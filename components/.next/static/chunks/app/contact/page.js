/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/contact/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=E%3A%5CNext%5Cportfolio%5Capp%5Ccontact%5Cpage.tsx&server=false!":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=E%3A%5CNext%5Cportfolio%5Capp%5Ccontact%5Cpage.tsx&server=false! ***!
  \******************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/contact/page.tsx */ \"(app-pages-browser)/./app/contact/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz1FJTNBJTVDTmV4dCU1Q3BvcnRmb2xpbyU1Q2FwcCU1Q2NvbnRhY3QlNUNwYWdlLnRzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/ZTg0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkU6XFxcXE5leHRcXFxccG9ydGZvbGlvXFxcXGFwcFxcXFxjb250YWN0XFxcXHBhZ2UudHN4XCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=E%3A%5CNext%5Cportfolio%5Capp%5Ccontact%5Cpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ createCache; }\n/* harmony export */ });\n/* harmony import */ var _emotion_sheet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/sheet */ \"(app-pages-browser)/./node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js\");\n/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stylis */ \"(app-pages-browser)/./node_modules/stylis/src/Tokenizer.js\");\n/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stylis */ \"(app-pages-browser)/./node_modules/stylis/src/Utility.js\");\n/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! stylis */ \"(app-pages-browser)/./node_modules/stylis/src/Enum.js\");\n/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! stylis */ \"(app-pages-browser)/./node_modules/stylis/src/Serializer.js\");\n/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! stylis */ \"(app-pages-browser)/./node_modules/stylis/src/Middleware.js\");\n/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! stylis */ \"(app-pages-browser)/./node_modules/stylis/src/Parser.js\");\n/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/weak-memoize */ \"(app-pages-browser)/./node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js\");\n/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/memoize */ \"(app-pages-browser)/./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js\");\n\n\n\n\nvar identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {\n    var previous = 0;\n    var character = 0;\n    while(true){\n        previous = character;\n        character = (0,stylis__WEBPACK_IMPORTED_MODULE_3__.peek)(); // &\\f\n        if (previous === 38 && character === 12) {\n            points[index] = 1;\n        }\n        if ((0,stylis__WEBPACK_IMPORTED_MODULE_3__.token)(character)) {\n            break;\n        }\n        (0,stylis__WEBPACK_IMPORTED_MODULE_3__.next)();\n    }\n    return (0,stylis__WEBPACK_IMPORTED_MODULE_3__.slice)(begin, stylis__WEBPACK_IMPORTED_MODULE_3__.position);\n};\nvar toRules = function toRules(parsed, points) {\n    // pretend we've started with a comma\n    var index = -1;\n    var character = 44;\n    do {\n        switch((0,stylis__WEBPACK_IMPORTED_MODULE_3__.token)(character)){\n            case 0:\n                // &\\f\n                if (character === 38 && (0,stylis__WEBPACK_IMPORTED_MODULE_3__.peek)() === 12) {\n                    // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings\n                    // stylis inserts \\f after & to know when & where it should replace this sequence with the context selector\n                    // and when it should just concatenate the outer and inner selectors\n                    // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here\n                    points[index] = 1;\n                }\n                parsed[index] += identifierWithPointTracking(stylis__WEBPACK_IMPORTED_MODULE_3__.position - 1, points, index);\n                break;\n            case 2:\n                parsed[index] += (0,stylis__WEBPACK_IMPORTED_MODULE_3__.delimit)(character);\n                break;\n            case 4:\n                // comma\n                if (character === 44) {\n                    // colon\n                    parsed[++index] = (0,stylis__WEBPACK_IMPORTED_MODULE_3__.peek)() === 58 ? \"&\\f\" : \"\";\n                    points[index] = parsed[index].length;\n                    break;\n                }\n            // fallthrough\n            default:\n                parsed[index] += (0,stylis__WEBPACK_IMPORTED_MODULE_4__.from)(character);\n        }\n    }while (character = (0,stylis__WEBPACK_IMPORTED_MODULE_3__.next)());\n    return parsed;\n};\nvar getRules = function getRules(value, points) {\n    return (0,stylis__WEBPACK_IMPORTED_MODULE_3__.dealloc)(toRules((0,stylis__WEBPACK_IMPORTED_MODULE_3__.alloc)(value), points));\n}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11\nvar fixedElements = /* #__PURE__ */ new WeakMap();\nvar compat = function compat(element) {\n    if (element.type !== \"rule\" || !element.parent || // positive .length indicates that this rule contains pseudo\n    // negative .length indicates that this rule has been already prefixed\n    element.length < 1) {\n        return;\n    }\n    var value = element.value, parent = element.parent;\n    var isImplicitRule = element.column === parent.column && element.line === parent.line;\n    while(parent.type !== \"rule\"){\n        parent = parent.parent;\n        if (!parent) return;\n    } // short-circuit for the simplest case\n    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {\n        return;\n    } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)\n    // then the props has already been manipulated beforehand as they that array is shared between it and its \"rule parent\"\n    if (isImplicitRule) {\n        return;\n    }\n    fixedElements.set(element, true);\n    var points = [];\n    var rules = getRules(value, points);\n    var parentRules = parent.props;\n    for(var i = 0, k = 0; i < rules.length; i++){\n        for(var j = 0; j < parentRules.length; j++, k++){\n            element.props[k] = points[i] ? rules[i].replace(/&\\f/g, parentRules[j]) : parentRules[j] + \" \" + rules[i];\n        }\n    }\n};\nvar removeLabel = function removeLabel(element) {\n    if (element.type === \"decl\") {\n        var value = element.value;\n        if (value.charCodeAt(0) === 108 && // charcode for b\n        value.charCodeAt(2) === 98) {\n            // this ignores label\n            element[\"return\"] = \"\";\n            element.value = \"\";\n        }\n    }\n};\nvar ignoreFlag = \"emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason\";\nvar isIgnoringComment = function isIgnoringComment(element) {\n    return element.type === \"comm\" && element.children.indexOf(ignoreFlag) > -1;\n};\nvar createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {\n    return function(element, index, children) {\n        if (element.type !== \"rule\" || cache.compat) return;\n        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);\n        if (unsafePseudoClasses) {\n            var isNested = !!element.parent; // in nested rules comments become children of the \"auto-inserted\" rule and that's always the `element.parent`\n            //\n            // considering this input:\n            // .a {\n            //   .b /* comm */ {}\n            //   color: hotpink;\n            // }\n            // we get output corresponding to this:\n            // .a {\n            //   & {\n            //     /* comm */\n            //     color: hotpink;\n            //   }\n            //   .b {}\n            // }\n            var commentContainer = isNested ? element.parent.children : children;\n            for(var i = commentContainer.length - 1; i >= 0; i--){\n                var node = commentContainer[i];\n                if (node.line < element.line) {\n                    break;\n                } // it is quite weird but comments are *usually* put at `column: element.column - 1`\n                // so we seek *from the end* for the node that is earlier than the rule's `element` and check that\n                // this will also match inputs like this:\n                // .a {\n                //   /* comm */\n                //   .b {}\n                // }\n                //\n                // but that is fine\n                //\n                // it would be the easiest to change the placement of the comment to be the first child of the rule:\n                // .a {\n                //   .b { /* comm */ }\n                // }\n                // with such inputs we wouldn't have to search for the comment at all\n                // TODO: consider changing this comment placement in the next major version\n                if (node.column < element.column) {\n                    if (isIgnoringComment(node)) {\n                        return;\n                    }\n                    break;\n                }\n            }\n            unsafePseudoClasses.forEach(function(unsafePseudoClass) {\n                console.error('The pseudo class \"' + unsafePseudoClass + '\" is potentially unsafe when doing server-side rendering. Try changing it to \"' + unsafePseudoClass.split(\"-child\")[0] + '-of-type\".');\n            });\n        }\n    };\n};\nvar isImportRule = function isImportRule(element) {\n    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;\n};\nvar isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {\n    for(var i = index - 1; i >= 0; i--){\n        if (!isImportRule(children[i])) {\n            return true;\n        }\n    }\n    return false;\n}; // use this to remove incorrect elements from further processing\n// so they don't get handed to the `sheet` (or anything else)\n// as that could potentially lead to additional logs which in turn could be overhelming to the user\nvar nullifyElement = function nullifyElement(element) {\n    element.type = \"\";\n    element.value = \"\";\n    element[\"return\"] = \"\";\n    element.children = \"\";\n    element.props = \"\";\n};\nvar incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {\n    if (!isImportRule(element)) {\n        return;\n    }\n    if (element.parent) {\n        console.error(\"`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.\");\n        nullifyElement(element);\n    } else if (isPrependedWithRegularRules(index, children)) {\n        console.error(\"`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.\");\n        nullifyElement(element);\n    }\n};\n/* eslint-disable no-fallthrough */ function prefix(value, length) {\n    switch((0,stylis__WEBPACK_IMPORTED_MODULE_4__.hash)(value, length)){\n        // color-adjust\n        case 5103:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"print-\" + value + value;\n        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)\n        case 5737:\n        case 4201:\n        case 3177:\n        case 3433:\n        case 1641:\n        case 4457:\n        case 2921:\n        case 5572:\n        case 6356:\n        case 5844:\n        case 3191:\n        case 6645:\n        case 3005:\n        case 6391:\n        case 5879:\n        case 5623:\n        case 6135:\n        case 4599:\n        case 4855:\n        case 4215:\n        case 6389:\n        case 5109:\n        case 5365:\n        case 5621:\n        case 3829:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + value;\n        // appearance, user-select, transform, hyphens, text-size-adjust\n        case 5349:\n        case 4246:\n        case 4810:\n        case 6968:\n        case 2756:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MOZ + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + value + value;\n        // flex, flex-direction\n        case 6828:\n        case 4268:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + value + value;\n        // order\n        case 6165:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + \"flex-\" + value + value;\n        // align-items\n        case 5187:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(\\w+).+(:[^]+)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"box-$1$2\" + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + \"flex-$1$2\") + value;\n        // align-self\n        case 5443:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + \"flex-item-\" + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /flex-|-self/, \"\") + value;\n        // align-content\n        case 4675:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + \"flex-line-pack\" + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /align-content|flex-|-self/, \"\") + value;\n        // flex-shrink\n        case 5548:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, \"shrink\", \"negative\") + value;\n        // flex-basis\n        case 5292:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, \"basis\", \"preferred-size\") + value;\n        // flex-grow\n        case 6060:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"box-\" + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, \"-grow\", \"\") + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, \"grow\", \"positive\") + value;\n        // transition\n        case 4554:\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /([^-])(transform)/g, \"$1\" + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"$2\") + value;\n        // cursor\n        case 6187:\n            return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)((0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)((0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(zoom-|grab)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"$1\"), /(image-set)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"$1\"), value, \"\") + value;\n        // background, background-image\n        case 5495:\n        case 3959:\n            return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(image-set\\([^]*)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"$1\" + \"$`$1\");\n        // justify-content\n        case 4968:\n            return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)((0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(.+:)(flex-)?(.*)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"box-pack:$3\" + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + \"flex-pack:$3\"), /s.+-b[^;]+/, \"justify\") + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + value;\n        // (margin|padding)-inline-(start|end)\n        case 4095:\n        case 3583:\n        case 4068:\n        case 2532:\n            return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(.+)-inline(.+)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"$1$2\") + value;\n        // (min|max)?(width|height|inline-size|block-size)\n        case 8116:\n        case 7059:\n        case 5753:\n        case 5535:\n        case 5445:\n        case 5701:\n        case 4933:\n        case 4677:\n        case 5533:\n        case 5789:\n        case 5021:\n        case 4765:\n            // stretch, max-content, min-content, fill-available\n            if ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.strlen)(value) - 1 - length > 6) switch((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 1)){\n                // (m)ax-content, (m)in-content\n                case 109:\n                    // -\n                    if ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 4) !== 45) break;\n                // (f)ill-available, (f)it-content\n                case 102:\n                    return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(.+:)(.+)-([^]+)/, \"$1\" + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"$2-$3\" + \"$1\" + stylis__WEBPACK_IMPORTED_MODULE_5__.MOZ + ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 3) == 108 ? \"$3\" : \"$2-$3\")) + value;\n                // (s)tretch\n                case 115:\n                    return ~(0,stylis__WEBPACK_IMPORTED_MODULE_4__.indexof)(value, \"stretch\") ? prefix((0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, \"stretch\", \"fill-available\"), length) + value : value;\n            }\n            break;\n        // position: sticky\n        case 4949:\n            // (s)ticky?\n            if ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 1) !== 115) break;\n        // display: (flex|inline-flex)\n        case 6444:\n            switch((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, (0,stylis__WEBPACK_IMPORTED_MODULE_4__.strlen)(value) - 3 - (~(0,stylis__WEBPACK_IMPORTED_MODULE_4__.indexof)(value, \"!important\") && 10))){\n                // stic(k)y\n                case 107:\n                    return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, \":\", \":\" + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT) + value;\n                // (inline-)?fl(e)x\n                case 101:\n                    return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(.+:)([^;!]+)(;|!.+)?/, \"$1\" + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, 14) === 45 ? \"inline-\" : \"\") + \"box$3\" + \"$1\" + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"$2$3\" + \"$1\" + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + \"$2box$3\") + value;\n            }\n            break;\n        // writing-mode\n        case 5936:\n            switch((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 11)){\n                // vertical-l(r)\n                case 114:\n                    return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /[svh]\\w+-[tblr]{2}/, \"tb\") + value;\n                // vertical-r(l)\n                case 108:\n                    return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /[svh]\\w+-[tblr]{2}/, \"tb-rl\") + value;\n                // horizontal(-)tb\n                case 45:\n                    return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /[svh]\\w+-[tblr]{2}/, \"lr\") + value;\n            }\n            return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + value + value;\n    }\n    return value;\n}\nvar prefixer = function prefixer(element, index, children, callback) {\n    if (element.length > -1) {\n        if (!element[\"return\"]) switch(element.type){\n            case stylis__WEBPACK_IMPORTED_MODULE_5__.DECLARATION:\n                element[\"return\"] = prefix(element.value, element.length);\n                break;\n            case stylis__WEBPACK_IMPORTED_MODULE_5__.KEYFRAMES:\n                return (0,stylis__WEBPACK_IMPORTED_MODULE_6__.serialize)([\n                    (0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {\n                        value: (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(element.value, \"@\", \"@\" + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT)\n                    })\n                ], callback);\n            case stylis__WEBPACK_IMPORTED_MODULE_5__.RULESET:\n                if (element.length) return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.combine)(element.props, function(value) {\n                    switch((0,stylis__WEBPACK_IMPORTED_MODULE_4__.match)(value, /(::plac\\w+|:read-\\w+)/)){\n                        // :read-(only|write)\n                        case \":read-only\":\n                        case \":read-write\":\n                            return (0,stylis__WEBPACK_IMPORTED_MODULE_6__.serialize)([\n                                (0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {\n                                    props: [\n                                        (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /:(read-\\w+)/, \":\" + stylis__WEBPACK_IMPORTED_MODULE_5__.MOZ + \"$1\")\n                                    ]\n                                })\n                            ], callback);\n                        // :placeholder\n                        case \"::placeholder\":\n                            return (0,stylis__WEBPACK_IMPORTED_MODULE_6__.serialize)([\n                                (0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {\n                                    props: [\n                                        (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /:(plac\\w+)/, \":\" + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + \"input-$1\")\n                                    ]\n                                }),\n                                (0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {\n                                    props: [\n                                        (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /:(plac\\w+)/, \":\" + stylis__WEBPACK_IMPORTED_MODULE_5__.MOZ + \"$1\")\n                                    ]\n                                }),\n                                (0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {\n                                    props: [\n                                        (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /:(plac\\w+)/, stylis__WEBPACK_IMPORTED_MODULE_5__.MS + \"input-$1\")\n                                    ]\n                                })\n                            ], callback);\n                    }\n                    return \"\";\n                });\n        }\n    }\n};\nvar defaultStylisPlugins = [\n    prefixer\n];\nvar createCache = function createCache(options) {\n    var key = options.key;\n    if ( true && !key) {\n        throw new Error(\"You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\\n\" + 'If multiple caches share the same key they might \"fight\" for each other\\'s style elements.');\n    }\n    if (key === \"css\") {\n        var ssrStyles = document.querySelectorAll(\"style[data-emotion]:not([data-s])\"); // get SSRed styles out of the way of React's hydration\n        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)\n        // note this very very intentionally targets all style elements regardless of the key to ensure\n        // that creating a cache works inside of render of a React component\n        Array.prototype.forEach.call(ssrStyles, function(node) {\n            // we want to only move elements which have a space in the data-emotion attribute value\n            // because that indicates that it is an Emotion 11 server-side rendered style elements\n            // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector\n            // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)\n            // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles\n            // will not result in the Emotion 10 styles being destroyed\n            var dataEmotionAttribute = node.getAttribute(\"data-emotion\");\n            if (dataEmotionAttribute.indexOf(\" \") === -1) {\n                return;\n            }\n            document.head.appendChild(node);\n            node.setAttribute(\"data-s\", \"\");\n        });\n    }\n    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;\n    if (true) {\n        // $FlowFixMe\n        if (/[^a-z-]/.test(key)) {\n            throw new Error('Emotion key must only contain lower case alphabetical characters and - but \"' + key + '\" was passed');\n        }\n    }\n    var inserted = {};\n    var container;\n    var nodesToHydrate = [];\n    {\n        container = options.container || document.head;\n        Array.prototype.forEach.call(// means that the style elements we're looking at are only Emotion 11 server-rendered style elements\n        document.querySelectorAll('style[data-emotion^=\"' + key + ' \"]'), function(node) {\n            var attrib = node.getAttribute(\"data-emotion\").split(\" \"); // $FlowFixMe\n            for(var i = 1; i < attrib.length; i++){\n                inserted[attrib[i]] = true;\n            }\n            nodesToHydrate.push(node);\n        });\n    }\n    var _insert;\n    var omnipresentPlugins = [\n        compat,\n        removeLabel\n    ];\n    if (true) {\n        omnipresentPlugins.push(createUnsafeSelectorsAlarm({\n            get compat () {\n                return cache.compat;\n            }\n        }), incorrectImportAlarm);\n    }\n    {\n        var currentSheet;\n        var finalizingPlugins = [\n            stylis__WEBPACK_IMPORTED_MODULE_6__.stringify,\n             true ? function(element) {\n                if (!element.root) {\n                    if (element[\"return\"]) {\n                        currentSheet.insert(element[\"return\"]);\n                    } else if (element.value && element.type !== stylis__WEBPACK_IMPORTED_MODULE_5__.COMMENT) {\n                        // insert empty rule in non-production environments\n                        // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet\n                        currentSheet.insert(element.value + \"{}\");\n                    }\n                }\n            } : 0\n        ];\n        var serializer = (0,stylis__WEBPACK_IMPORTED_MODULE_7__.middleware)(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));\n        var stylis = function stylis(styles) {\n            return (0,stylis__WEBPACK_IMPORTED_MODULE_6__.serialize)((0,stylis__WEBPACK_IMPORTED_MODULE_8__.compile)(styles), serializer);\n        };\n        _insert = function insert(selector, serialized, sheet, shouldCache) {\n            currentSheet = sheet;\n            if ( true && serialized.map !== undefined) {\n                currentSheet = {\n                    insert: function insert(rule) {\n                        sheet.insert(rule + serialized.map);\n                    }\n                };\n            }\n            stylis(selector ? selector + \"{\" + serialized.styles + \"}\" : serialized.styles);\n            if (shouldCache) {\n                cache.inserted[serialized.name] = true;\n            }\n        };\n    }\n    var cache = {\n        key: key,\n        sheet: new _emotion_sheet__WEBPACK_IMPORTED_MODULE_0__.StyleSheet({\n            key: key,\n            container: container,\n            nonce: options.nonce,\n            speedy: options.speedy,\n            prepend: options.prepend,\n            insertionPoint: options.insertionPoint\n        }),\n        nonce: options.nonce,\n        inserted: inserted,\n        registered: {},\n        insert: _insert\n    };\n    cache.sheet.hydrate(nodesToHydrate);\n    return cache;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/hash/dist/emotion-hash.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@emotion/hash/dist/emotion-hash.esm.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ murmur2; }\n/* harmony export */ });\n/* eslint-disable */ // Inspired by https://github.com/garycourt/murmurhash-js\n// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86\nfunction murmur2(str) {\n    // 'm' and 'r' are mixing constants generated offline.\n    // They're not really 'magic', they just happen to work well.\n    // const m = 0x5bd1e995;\n    // const r = 24;\n    // Initialize the hash\n    var h = 0; // Mix 4 bytes at a time into the hash\n    var k, i = 0, len = str.length;\n    for(; len >= 4; ++i, len -= 4){\n        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n        k = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);\n        k ^= /* k >>> r: */ k >>> 24;\n        h = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n    } // Handle the last few bytes of the input array\n    switch(len){\n        case 3:\n            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            h ^= str.charCodeAt(i) & 0xff;\n            h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n    } // Do a few final mixes of the hash to ensure the last few\n    // bytes are well-incorporated.\n    h ^= h >>> 13;\n    h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n    return ((h ^ h >>> 15) >>> 0).toString(36);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvZW1vdGlvbi1oYXNoLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsa0JBQWtCLEdBQ2xCLHlEQUF5RDtBQUN6RCw2SEFBNkg7QUFDN0gsU0FBU0EsUUFBUUMsR0FBRztJQUNsQixzREFBc0Q7SUFDdEQsNkRBQTZEO0lBQzdELHdCQUF3QjtJQUN4QixnQkFBZ0I7SUFDaEIsc0JBQXNCO0lBQ3RCLElBQUlDLElBQUksR0FBRyxzQ0FBc0M7SUFFakQsSUFBSUMsR0FDQUMsSUFBSSxHQUNKQyxNQUFNSixJQUFJSyxNQUFNO0lBRXBCLE1BQU9ELE9BQU8sR0FBRyxFQUFFRCxHQUFHQyxPQUFPLEVBQUc7UUFDOUJGLElBQUlGLElBQUlNLFVBQVUsQ0FBQ0gsS0FBSyxPQUFPLENBQUNILElBQUlNLFVBQVUsQ0FBQyxFQUFFSCxLQUFLLElBQUcsS0FBTSxJQUFJLENBQUNILElBQUlNLFVBQVUsQ0FBQyxFQUFFSCxLQUFLLElBQUcsS0FBTSxLQUFLLENBQUNILElBQUlNLFVBQVUsQ0FBQyxFQUFFSCxLQUFLLElBQUcsS0FBTTtRQUN4SUQsSUFFQSxvQkFEb0IsR0FDbkJBLENBQUFBLElBQUksTUFBSyxJQUFLLGFBQWMsRUFBQ0EsTUFBTSxFQUFDLElBQUssVUFBVSxFQUFDO1FBQ3JEQSxLQUNBLFlBQVksR0FDWkEsTUFBTTtRQUNORCxJQUVBLG9CQURvQixHQUNuQkMsQ0FBQUEsSUFBSSxNQUFLLElBQUssYUFBYyxFQUFDQSxNQUFNLEVBQUMsSUFBSyxVQUFVLEVBQUMsSUFFckQsb0JBRG9CLEdBQ25CRCxDQUFBQSxJQUFJLE1BQUssSUFBSyxhQUFjLEVBQUNBLE1BQU0sRUFBQyxJQUFLLFVBQVUsRUFBQztJQUN2RCxFQUFFLCtDQUErQztJQUdqRCxPQUFRRztRQUNOLEtBQUs7WUFDSEgsS0FBSyxDQUFDRCxJQUFJTSxVQUFVLENBQUNILElBQUksS0FBSyxJQUFHLEtBQU07UUFFekMsS0FBSztZQUNIRixLQUFLLENBQUNELElBQUlNLFVBQVUsQ0FBQ0gsSUFBSSxLQUFLLElBQUcsS0FBTTtRQUV6QyxLQUFLO1lBQ0hGLEtBQUtELElBQUlNLFVBQVUsQ0FBQ0gsS0FBSztZQUN6QkYsSUFFQSxvQkFEb0IsR0FDbkJBLENBQUFBLElBQUksTUFBSyxJQUFLLGFBQWMsRUFBQ0EsTUFBTSxFQUFDLElBQUssVUFBVSxFQUFDO0lBQ3pELEVBQUUsMERBQTBEO0lBQzVELCtCQUErQjtJQUcvQkEsS0FBS0EsTUFBTTtJQUNYQSxJQUVBLG9CQURvQixHQUNuQkEsQ0FBQUEsSUFBSSxNQUFLLElBQUssYUFBYyxFQUFDQSxNQUFNLEVBQUMsSUFBSyxVQUFVLEVBQUM7SUFDckQsT0FBTyxDQUFDLENBQUNBLElBQUlBLE1BQU0sRUFBQyxNQUFPLEdBQUdNLFFBQVEsQ0FBQztBQUN6QztBQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2Vtb3Rpb24taGFzaC5lc20uanM/NTBiYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IHsgbXVybXVyMiBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsibXVybXVyMiIsInN0ciIsImgiLCJrIiwiaSIsImxlbiIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/hash/dist/emotion-hash.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ isPropValid; }\n/* harmony export */ });\n/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/memoize */ \"(app-pages-browser)/./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js\");\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\nvar isPropValid = /* #__PURE__ */ (0,_emotion_memoize__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(function(prop) {\n    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1QztBQUV2QyxJQUFJQyxrQkFBa0IscTlIQUFxOUgscURBQXFEO0FBRWhpSSxJQUFJQyxjQUFjLGFBQWEsR0FBRUYsNERBQU9BLENBQUMsU0FBVUcsSUFBSTtJQUNyRCxPQUFPRixnQkFBZ0JHLElBQUksQ0FBQ0QsU0FBU0EsS0FBS0UsVUFBVSxDQUFDLE9BQU8sT0FFekRGLEtBQUtFLFVBQVUsQ0FBQyxPQUFPLE9BRXZCRixLQUFLRSxVQUFVLENBQUMsS0FBSztBQUMxQjtBQUlrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2Vtb3Rpb24taXMtcHJvcC12YWxpZC5lc20uanM/ZGM3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIHJlYWN0UHJvcHNSZWdleCA9IC9eKChjaGlsZHJlbnxkYW5nZXJvdXNseVNldElubmVySFRNTHxrZXl8cmVmfGF1dG9Gb2N1c3xkZWZhdWx0VmFsdWV8ZGVmYXVsdENoZWNrZWR8aW5uZXJIVE1MfHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ3xzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmd8dmFsdWVMaW5rfGFiYnJ8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8ZW50ZXJLZXlIaW50fGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHJhbnNsYXRlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5jcmVtZW50YWx8ZmFsbGJhY2t8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufG9wdGlvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpc1Byb3BWYWxpZCA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IHsgaXNQcm9wVmFsaWQgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbIm1lbW9pemUiLCJyZWFjdFByb3BzUmVnZXgiLCJpc1Byb3BWYWxpZCIsInByb3AiLCJ0ZXN0IiwiY2hhckNvZGVBdCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ memoize; }\n/* harmony export */ });\nfunction memoize(fn) {\n    var cache = Object.create(null);\n    return function(arg) {\n        if (cache[arg] === undefined) cache[arg] = fn(arg);\n        return cache[arg];\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsUUFBUUMsRUFBRTtJQUNqQixJQUFJQyxRQUFRQyxPQUFPQyxNQUFNLENBQUM7SUFDMUIsT0FBTyxTQUFVQyxHQUFHO1FBQ2xCLElBQUlILEtBQUssQ0FBQ0csSUFBSSxLQUFLQyxXQUFXSixLQUFLLENBQUNHLElBQUksR0FBR0osR0FBR0k7UUFDOUMsT0FBT0gsS0FBSyxDQUFDRyxJQUFJO0lBQ25CO0FBQ0Y7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9lbW90aW9uLW1lbW9pemUuZXNtLmpzPzM4NGUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgeyBtZW1vaXplIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJtZW1vaXplIiwiZm4iLCJjYWNoZSIsIk9iamVjdCIsImNyZWF0ZSIsImFyZyIsInVuZGVmaW5lZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ hoistNonReactStatics; }\n/* harmony export */ });\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hoist-non-react-statics */ \"(app-pages-browser)/./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_0__);\n\n// this file isolates this package that is not tree-shakeable\n// and if this module doesn't actually contain any logic of its own\n// then Rollup just use 'hoist-non-react-statics' directly in other chunks\nvar hoistNonReactStatics = function(targetComponent, sourceComponent) {\n    return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_0___default()(targetComponent, sourceComponent);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZEO0FBRTdELDZEQUE2RDtBQUM3RCxtRUFBbUU7QUFDbkUsMEVBQTBFO0FBRTFFLElBQUlDLHVCQUF3QixTQUFVQyxlQUFlLEVBQUVDLGVBQWU7SUFDcEUsT0FBT0gsOERBQXNCQSxDQUFDRSxpQkFBaUJDO0FBQ2pEO0FBRTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanM/Y2JkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MkMSBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIHRoaXMgZmlsZSBpc29sYXRlcyB0aGlzIHBhY2thZ2UgdGhhdCBpcyBub3QgdHJlZS1zaGFrZWFibGVcbi8vIGFuZCBpZiB0aGlzIG1vZHVsZSBkb2Vzbid0IGFjdHVhbGx5IGNvbnRhaW4gYW55IGxvZ2ljIG9mIGl0cyBvd25cbi8vIHRoZW4gUm9sbHVwIGp1c3QgdXNlICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcycgZGlyZWN0bHkgaW4gb3RoZXIgY2h1bmtzXG5cbnZhciBob2lzdE5vblJlYWN0U3RhdGljcyA9IChmdW5jdGlvbiAodGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQpIHtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzJDEodGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQpO1xufSk7XG5cbmV4cG9ydCB7IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJob2lzdE5vblJlYWN0U3RhdGljcyQxIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: function() { return /* binding */ CacheProvider; },\n/* harmony export */   E: function() { return /* binding */ Emotion$1; },\n/* harmony export */   T: function() { return /* binding */ ThemeContext; },\n/* harmony export */   _: function() { return /* binding */ __unsafe_useEmotionCache; },\n/* harmony export */   a: function() { return /* binding */ ThemeProvider; },\n/* harmony export */   b: function() { return /* binding */ withTheme; },\n/* harmony export */   c: function() { return /* binding */ createEmotionProps; },\n/* harmony export */   h: function() { return /* binding */ hasOwnProperty; },\n/* harmony export */   i: function() { return /* binding */ isBrowser; },\n/* harmony export */   u: function() { return /* binding */ useTheme; },\n/* harmony export */   w: function() { return /* binding */ withEmotionCache; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/cache */ \"(app-pages-browser)/./node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/weak-memoize */ \"(app-pages-browser)/./node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js\");\n/* harmony import */ var _isolated_hnrs_dist_emotion_react_isolated_hnrs_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js */ \"(app-pages-browser)/./node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js\");\n/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/utils */ \"(app-pages-browser)/./node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js\");\n/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/serialize */ \"(app-pages-browser)/./node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js\");\n/* harmony import */ var _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/use-insertion-effect-with-fallbacks */ \"(app-pages-browser)/./node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nvar isBrowser = \"object\" !== \"undefined\";\nvar hasOwnProperty = {}.hasOwnProperty;\nvar EmotionCacheContext = /* #__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(// because this module is primarily intended for the browser and node\n// but it's also required in react native and similar environments sometimes\n// and we could have a special build just for that\n// but this is much easier and the native packages\n// might use a different theme context in the future anyway\ntypeof HTMLElement !== \"undefined\" ? /* #__PURE__ */ (0,_emotion_cache__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n    key: \"css\"\n}) : null);\nif (true) {\n    EmotionCacheContext.displayName = \"EmotionCacheContext\";\n}\nvar CacheProvider = EmotionCacheContext.Provider;\nvar __unsafe_useEmotionCache = function useEmotionCache() {\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmotionCacheContext);\n};\n_s(__unsafe_useEmotionCache, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar withEmotionCache = function withEmotionCache(func) {\n    var _s = $RefreshSig$();\n    // $FlowFixMe\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(_s(function(props, ref) {\n        _s();\n        // the cache will never be null in the browser\n        var cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmotionCacheContext);\n        return func(props, cache, ref);\n    }, \"fZR2dUNhdavhp/yb1XDPaBFabgk=\"));\n};\nif (!isBrowser) {\n    withEmotionCache = function withEmotionCache(func) {\n        var _s = $RefreshSig$();\n        return _s(function(props) {\n            _s();\n            var cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmotionCacheContext);\n            if (cache === null) {\n                // yes, we're potentially creating this on every render\n                // it doesn't actually matter though since it's only on the server\n                // so there will only every be a single render\n                // that could change in the future because of suspense and etc. but for now,\n                // this works and i don't want to optimise for a future thing that we aren't sure about\n                cache = (0,_emotion_cache__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    key: \"css\"\n                });\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EmotionCacheContext.Provider, {\n                    value: cache\n                }, func(props, cache));\n            } else {\n                return func(props, cache);\n            }\n        }, \"fZR2dUNhdavhp/yb1XDPaBFabgk=\");\n    };\n}\nvar ThemeContext = /* #__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\nif (true) {\n    ThemeContext.displayName = \"EmotionThemeContext\";\n}\nvar useTheme = function useTheme() {\n    _s1();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(ThemeContext);\n};\n_s1(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar getTheme = function getTheme(outerTheme, theme) {\n    if (typeof theme === \"function\") {\n        var mergedTheme = theme(outerTheme);\n        if ( true && (mergedTheme == null || typeof mergedTheme !== \"object\" || Array.isArray(mergedTheme))) {\n            throw new Error(\"[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!\");\n        }\n        return mergedTheme;\n    }\n    if ( true && (theme == null || typeof theme !== \"object\" || Array.isArray(theme))) {\n        throw new Error(\"[ThemeProvider] Please make your theme prop a plain object\");\n    }\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, outerTheme, theme);\n};\nvar createCacheWithTheme = /* #__PURE__ */ (0,_emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(function(outerTheme) {\n    return (0,_emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(function(theme) {\n        return getTheme(outerTheme, theme);\n    });\n});\nvar ThemeProvider = function ThemeProvider(props) {\n    _s2();\n    var theme = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ThemeContext);\n    if (props.theme !== theme) {\n        theme = createCacheWithTheme(theme)(props.theme);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeContext.Provider, {\n        value: theme\n    }, props.children);\n};\n_s2(ThemeProvider, \"+C1P7ukOg/azcV4AZ819oyezFOE=\");\n_c = ThemeProvider;\nfunction withTheme(Component) {\n    var _s = $RefreshSig$();\n    var componentName = Component.displayName || Component.name || \"Component\";\n    var render = function render(props, ref) {\n        _s();\n        var theme = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ThemeContext);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            theme: theme,\n            ref: ref\n        }, props));\n    }; // $FlowFixMe\n    _s(render, \"+C1P7ukOg/azcV4AZ819oyezFOE=\");\n    var WithTheme = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(render);\n    WithTheme.displayName = \"WithTheme(\" + componentName + \")\";\n    return (0,_isolated_hnrs_dist_emotion_react_isolated_hnrs_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(WithTheme, Component);\n}\nvar getLastPart = function getLastPart(functionName) {\n    // The match may be something like 'Object.createEmotionProps' or\n    // 'Loader.prototype.render'\n    var parts = functionName.split(\".\");\n    return parts[parts.length - 1];\n};\nvar getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {\n    // V8\n    var match = /^\\s+at\\s+([A-Za-z0-9$.]+)\\s/.exec(line);\n    if (match) return getLastPart(match[1]); // Safari / Firefox\n    match = /^([A-Za-z0-9$.]+)@/.exec(line);\n    if (match) return getLastPart(match[1]);\n    return undefined;\n};\nvar internalReactFunctionNames = /* #__PURE__ */ new Set([\n    \"renderWithHooks\",\n    \"processChild\",\n    \"finishClassComponent\",\n    \"renderToString\"\n]); // These identifiers come from error stacks, so they have to be valid JS\n// identifiers, thus we only need to replace what is a valid character for JS,\n// but not for CSS.\nvar sanitizeIdentifier = function sanitizeIdentifier(identifier) {\n    return identifier.replace(/\\$/g, \"-\");\n};\nvar getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {\n    if (!stackTrace) return undefined;\n    var lines = stackTrace.split(\"\\n\");\n    for(var i = 0; i < lines.length; i++){\n        var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just \"Error\"\n        if (!functionName) continue; // If we reach one of these, we have gone too far and should quit\n        if (internalReactFunctionNames.has(functionName)) break; // The component name is the first function in the stack that starts with an\n        // uppercase letter\n        if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);\n    }\n    return undefined;\n};\nvar typePropName = \"__EMOTION_TYPE_PLEASE_DO_NOT_USE__\";\nvar labelPropName = \"__EMOTION_LABEL_PLEASE_DO_NOT_USE__\";\nvar createEmotionProps = function createEmotionProps(type, props) {\n    if ( true && typeof props.css === \"string\" && // check if there is a css declaration\n    props.css.indexOf(\":\") !== -1) {\n        throw new Error(\"Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`\" + props.css + \"`\");\n    }\n    var newProps = {};\n    for(var key in props){\n        if (hasOwnProperty.call(props, key)) {\n            newProps[key] = props[key];\n        }\n    }\n    newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when\n    // the label hasn't already been computed\n    if ( true && !!props.css && (typeof props.css !== \"object\" || typeof props.css.name !== \"string\" || props.css.name.indexOf(\"-\") === -1)) {\n        var label = getLabelFromStackTrace(new Error().stack);\n        if (label) newProps[labelPropName] = label;\n    }\n    return newProps;\n};\nvar Insertion = function Insertion(_ref) {\n    _s3();\n    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;\n    (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_4__.registerStyles)(cache, serialized, isStringTag);\n    (0,_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__.useInsertionEffectAlwaysWithSyncFallback)(function() {\n        return (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_4__.insertStyles)(cache, serialized, isStringTag);\n    });\n    return null;\n};\n_s3(Insertion, \"7Nf+XQRPn90Zbp+ebkZKxlEWnAc=\", false, function() {\n    return [\n        _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__.useInsertionEffectAlwaysWithSyncFallback\n    ];\n});\n_c1 = Insertion;\nvar Emotion = /* #__PURE__ */ _s4(withEmotionCache(_c2 = _s4(function(props, cache, ref) {\n    _s4();\n    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works\n    // not passing the registered cache to serializeStyles because it would\n    // make certain babel optimisations not possible\n    if (typeof cssProp === \"string\" && cache.registered[cssProp] !== undefined) {\n        cssProp = cache.registered[cssProp];\n    }\n    var WrappedComponent = props[typePropName];\n    var registeredStyles = [\n        cssProp\n    ];\n    var className = \"\";\n    if (typeof props.className === \"string\") {\n        className = (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_4__.getRegisteredStyles)(cache.registered, registeredStyles, props.className);\n    } else if (props.className != null) {\n        className = props.className + \" \";\n    }\n    var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_5__.serializeStyles)(registeredStyles, undefined, react__WEBPACK_IMPORTED_MODULE_0__.useContext(ThemeContext));\n    if ( true && serialized.name.indexOf(\"-\") === -1) {\n        var labelFromStack = props[labelPropName];\n        if (labelFromStack) {\n            serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_5__.serializeStyles)([\n                serialized,\n                \"label:\" + labelFromStack + \";\"\n            ]);\n        }\n    }\n    className += cache.key + \"-\" + serialized.name;\n    var newProps = {};\n    for(var key in props){\n        if (hasOwnProperty.call(props, key) && key !== \"css\" && key !== typePropName && ( false || key !== labelPropName)) {\n            newProps[key] = props[key];\n        }\n    }\n    newProps.ref = ref;\n    newProps.className = className;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Insertion, {\n        cache: cache,\n        serialized: serialized,\n        isStringTag: typeof WrappedComponent === \"string\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent, newProps));\n}, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\")), \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c3 = Emotion;\nif (true) {\n    Emotion.displayName = \"EmotionCssPropInternal\";\n}\nvar Emotion$1 = Emotion;\n\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"ThemeProvider\");\n$RefreshReg$(_c1, \"Insertion\");\n$RefreshReg$(_c2, \"Emotion$withEmotionCache\");\n$RefreshReg$(_c3, \"Emotion\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeStyles: function() { return /* binding */ serializeStyles; }\n/* harmony export */ });\n/* harmony import */ var _emotion_hash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/hash */ \"(app-pages-browser)/./node_modules/@emotion/hash/dist/emotion-hash.esm.js\");\n/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/unitless */ \"(app-pages-browser)/./node_modules/@emotion/unitless/dist/emotion-unitless.esm.js\");\n/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/memoize */ \"(app-pages-browser)/./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js\");\n\n\n\nvar ILLEGAL_ESCAPE_SEQUENCE_ERROR = \"You have illegal escape sequence in your template literal, most likely inside content's property value.\\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \\\"content: '\\\\00d7';\\\" should become \\\"content: '\\\\\\\\00d7';\\\".\\nYou can read more about this here:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\";\nvar UNDEFINED_AS_OBJECT_KEY_ERROR = \"You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).\";\nvar hyphenateRegex = /[A-Z]|^ms/g;\nvar animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;\nvar isCustomProperty = function isCustomProperty(property) {\n    return property.charCodeAt(1) === 45;\n};\nvar isProcessableValue = function isProcessableValue(value) {\n    return value != null && typeof value !== \"boolean\";\n};\nvar processStyleName = /* #__PURE__ */ (0,_emotion_memoize__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(function(styleName) {\n    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, \"-$&\").toLowerCase();\n});\nvar processStyleValue = function processStyleValue(key, value) {\n    switch(key){\n        case \"animation\":\n        case \"animationName\":\n            {\n                if (typeof value === \"string\") {\n                    return value.replace(animationRegex, function(match, p1, p2) {\n                        cursor = {\n                            name: p1,\n                            styles: p2,\n                            next: cursor\n                        };\n                        return p1;\n                    });\n                }\n            }\n    }\n    if (_emotion_unitless__WEBPACK_IMPORTED_MODULE_1__[\"default\"][key] !== 1 && !isCustomProperty(key) && typeof value === \"number\" && value !== 0) {\n        return value + \"px\";\n    }\n    return value;\n};\nif (true) {\n    var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\\(|(no-)?(open|close)-quote/;\n    var contentValues = [\n        \"normal\",\n        \"none\",\n        \"initial\",\n        \"inherit\",\n        \"unset\"\n    ];\n    var oldProcessStyleValue = processStyleValue;\n    var msPattern = /^-ms-/;\n    var hyphenPattern = /-(.)/g;\n    var hyphenatedCache = {};\n    processStyleValue = function processStyleValue(key, value) {\n        if (key === \"content\") {\n            if (typeof value !== \"string\" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '\"' && value.charAt(0) !== \"'\")) {\n                throw new Error(\"You seem to be using a value for 'content' without quotes, try replacing it with `content: '\\\"\" + value + \"\\\"'`\");\n            }\n        }\n        var processed = oldProcessStyleValue(key, value);\n        if (processed !== \"\" && !isCustomProperty(key) && key.indexOf(\"-\") !== -1 && hyphenatedCache[key] === undefined) {\n            hyphenatedCache[key] = true;\n            console.error(\"Using kebab-case for css properties in objects is not supported. Did you mean \" + key.replace(msPattern, \"ms-\").replace(hyphenPattern, function(str, _char) {\n                return _char.toUpperCase();\n            }) + \"?\");\n        }\n        return processed;\n    };\n}\nvar noComponentSelectorMessage = \"Component selectors can only be used in conjunction with \" + \"@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware \" + \"compiler transform.\";\nfunction handleInterpolation(mergedProps, registered, interpolation) {\n    if (interpolation == null) {\n        return \"\";\n    }\n    if (interpolation.__emotion_styles !== undefined) {\n        if ( true && interpolation.toString() === \"NO_COMPONENT_SELECTOR\") {\n            throw new Error(noComponentSelectorMessage);\n        }\n        return interpolation;\n    }\n    switch(typeof interpolation){\n        case \"boolean\":\n            {\n                return \"\";\n            }\n        case \"object\":\n            {\n                if (interpolation.anim === 1) {\n                    cursor = {\n                        name: interpolation.name,\n                        styles: interpolation.styles,\n                        next: cursor\n                    };\n                    return interpolation.name;\n                }\n                if (interpolation.styles !== undefined) {\n                    var next = interpolation.next;\n                    if (next !== undefined) {\n                        // not the most efficient thing ever but this is a pretty rare case\n                        // and there will be very few iterations of this generally\n                        while(next !== undefined){\n                            cursor = {\n                                name: next.name,\n                                styles: next.styles,\n                                next: cursor\n                            };\n                            next = next.next;\n                        }\n                    }\n                    var styles = interpolation.styles + \";\";\n                    if ( true && interpolation.map !== undefined) {\n                        styles += interpolation.map;\n                    }\n                    return styles;\n                }\n                return createStringFromObject(mergedProps, registered, interpolation);\n            }\n        case \"function\":\n            {\n                if (mergedProps !== undefined) {\n                    var previousCursor = cursor;\n                    var result = interpolation(mergedProps);\n                    cursor = previousCursor;\n                    return handleInterpolation(mergedProps, registered, result);\n                } else if (true) {\n                    console.error(\"Functions that are interpolated in css calls will be stringified.\\n\" + \"If you want to have a css call based on props, create a function that returns a css call like this\\n\" + \"let dynamicStyle = (props) => css`color: ${props.color}`\\n\" + \"It can be called directly with props or interpolated in a styled call like this\\n\" + \"let SomeComponent = styled('div')`${dynamicStyle}`\");\n                }\n                break;\n            }\n        case \"string\":\n            if (true) {\n                var matched = [];\n                var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {\n                    var fakeVarName = \"animation\" + matched.length;\n                    matched.push(\"const \" + fakeVarName + \" = keyframes`\" + p2.replace(/^@keyframes animation-\\w+/, \"\") + \"`\");\n                    return \"${\" + fakeVarName + \"}\";\n                });\n                if (matched.length) {\n                    console.error(\"`keyframes` output got interpolated into plain string, please wrap it with `css`.\\n\\n\" + \"Instead of doing this:\\n\\n\" + [].concat(matched, [\n                        \"`\" + replaced + \"`\"\n                    ]).join(\"\\n\") + \"\\n\\nYou should wrap it with `css` like this:\\n\\n\" + (\"css`\" + replaced + \"`\"));\n                }\n            }\n            break;\n    } // finalize string values (regular strings and functions interpolated into css calls)\n    if (registered == null) {\n        return interpolation;\n    }\n    var cached = registered[interpolation];\n    return cached !== undefined ? cached : interpolation;\n}\nfunction createStringFromObject(mergedProps, registered, obj) {\n    var string = \"\";\n    if (Array.isArray(obj)) {\n        for(var i = 0; i < obj.length; i++){\n            string += handleInterpolation(mergedProps, registered, obj[i]) + \";\";\n        }\n    } else {\n        for(var _key in obj){\n            var value = obj[_key];\n            if (typeof value !== \"object\") {\n                if (registered != null && registered[value] !== undefined) {\n                    string += _key + \"{\" + registered[value] + \"}\";\n                } else if (isProcessableValue(value)) {\n                    string += processStyleName(_key) + \":\" + processStyleValue(_key, value) + \";\";\n                }\n            } else {\n                if (_key === \"NO_COMPONENT_SELECTOR\" && \"development\" !== \"production\") {\n                    throw new Error(noComponentSelectorMessage);\n                }\n                if (Array.isArray(value) && typeof value[0] === \"string\" && (registered == null || registered[value[0]] === undefined)) {\n                    for(var _i = 0; _i < value.length; _i++){\n                        if (isProcessableValue(value[_i])) {\n                            string += processStyleName(_key) + \":\" + processStyleValue(_key, value[_i]) + \";\";\n                        }\n                    }\n                } else {\n                    var interpolated = handleInterpolation(mergedProps, registered, value);\n                    switch(_key){\n                        case \"animation\":\n                        case \"animationName\":\n                            {\n                                string += processStyleName(_key) + \":\" + interpolated + \";\";\n                                break;\n                            }\n                        default:\n                            {\n                                if ( true && _key === \"undefined\") {\n                                    console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);\n                                }\n                                string += _key + \"{\" + interpolated + \"}\";\n                            }\n                    }\n                }\n            }\n        }\n    }\n    return string;\n}\nvar labelPattern = /label:\\s*([^\\s;\\n{]+)\\s*(;|$)/g;\nvar sourceMapPattern;\nif (true) {\n    sourceMapPattern = /\\/\\*#\\ssourceMappingURL=data:application\\/json;\\S+\\s+\\*\\//g;\n} // this is the cursor for keyframes\n// keyframes are stored on the SerializedStyles object as a linked list\nvar cursor;\nvar serializeStyles = function serializeStyles(args, registered, mergedProps) {\n    if (args.length === 1 && typeof args[0] === \"object\" && args[0] !== null && args[0].styles !== undefined) {\n        return args[0];\n    }\n    var stringMode = true;\n    var styles = \"\";\n    cursor = undefined;\n    var strings = args[0];\n    if (strings == null || strings.raw === undefined) {\n        stringMode = false;\n        styles += handleInterpolation(mergedProps, registered, strings);\n    } else {\n        if ( true && strings[0] === undefined) {\n            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n        }\n        styles += strings[0];\n    } // we start at 1 since we've already handled the first arg\n    for(var i = 1; i < args.length; i++){\n        styles += handleInterpolation(mergedProps, registered, args[i]);\n        if (stringMode) {\n            if ( true && strings[i] === undefined) {\n                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n            }\n            styles += strings[i];\n        }\n    }\n    var sourceMap;\n    if (true) {\n        styles = styles.replace(sourceMapPattern, function(match) {\n            sourceMap = match;\n            return \"\";\n        });\n    } // using a global regex with .exec is stateful so lastIndex has to be reset each time\n    labelPattern.lastIndex = 0;\n    var identifierName = \"\";\n    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5\n    while((match = labelPattern.exec(styles)) !== null){\n        identifierName += \"-\" + // $FlowFixMe we know it's not null\n        match[1];\n    }\n    var name = (0,_emotion_hash__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(styles) + identifierName;\n    if (true) {\n        // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)\n        return {\n            name: name,\n            styles: styles,\n            map: sourceMap,\n            next: cursor,\n            toString: function toString() {\n                return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n            }\n        };\n    }\n    return {\n        name: name,\n        styles: styles,\n        next: cursor\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StyleSheet: function() { return /* binding */ StyleSheet; }\n/* harmony export */ });\n/*\n\nBased off glamor's StyleSheet, thanks Sunil ❤️\n\nhigh performance StyleSheet for css-in-js systems\n\n- uses multiple style tags behind the scenes for millions of rules\n- uses `insertRule` for appending in production for *much* faster performance\n\n// usage\n\nimport { StyleSheet } from '@emotion/sheet'\n\nlet styleSheet = new StyleSheet({ key: '', container: document.head })\n\nstyleSheet.insert('#box { border: 1px solid red; }')\n- appends a css rule into the stylesheet\n\nstyleSheet.flush()\n- empties the stylesheet of all its contents\n\n*/ // $FlowFixMe\nfunction sheetForTag(tag) {\n    if (tag.sheet) {\n        // $FlowFixMe\n        return tag.sheet;\n    } // this weirdness brought to you by firefox\n    /* istanbul ignore next */ for(var i = 0; i < document.styleSheets.length; i++){\n        if (document.styleSheets[i].ownerNode === tag) {\n            // $FlowFixMe\n            return document.styleSheets[i];\n        }\n    }\n}\nfunction createStyleElement(options) {\n    var tag = document.createElement(\"style\");\n    tag.setAttribute(\"data-emotion\", options.key);\n    if (options.nonce !== undefined) {\n        tag.setAttribute(\"nonce\", options.nonce);\n    }\n    tag.appendChild(document.createTextNode(\"\"));\n    tag.setAttribute(\"data-s\", \"\");\n    return tag;\n}\nvar StyleSheet = /*#__PURE__*/ function() {\n    // Using Node instead of HTMLElement since container may be a ShadowRoot\n    function StyleSheet(options) {\n        var _this = this;\n        this._insertTag = function(tag) {\n            var before;\n            if (_this.tags.length === 0) {\n                if (_this.insertionPoint) {\n                    before = _this.insertionPoint.nextSibling;\n                } else if (_this.prepend) {\n                    before = _this.container.firstChild;\n                } else {\n                    before = _this.before;\n                }\n            } else {\n                before = _this.tags[_this.tags.length - 1].nextSibling;\n            }\n            _this.container.insertBefore(tag, before);\n            _this.tags.push(tag);\n        };\n        this.isSpeedy = options.speedy === undefined ? \"development\" === \"production\" : options.speedy;\n        this.tags = [];\n        this.ctr = 0;\n        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets\n        this.key = options.key;\n        this.container = options.container;\n        this.prepend = options.prepend;\n        this.insertionPoint = options.insertionPoint;\n        this.before = null;\n    }\n    var _proto = StyleSheet.prototype;\n    _proto.hydrate = function hydrate(nodes) {\n        nodes.forEach(this._insertTag);\n    };\n    _proto.insert = function insert(rule) {\n        // the max length is how many rules we have per style tag, it's 65000 in speedy mode\n        // it's 1 in dev because we insert source maps that map a single rule to a location\n        // and you can only have one source map per style tag\n        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {\n            this._insertTag(createStyleElement(this));\n        }\n        var tag = this.tags[this.tags.length - 1];\n        if (true) {\n            var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;\n            if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {\n                // this would only cause problem in speedy mode\n                // but we don't want enabling speedy to affect the observable behavior\n                // so we report this error at all times\n                console.error(\"You're attempting to insert the following rule:\\n\" + rule + \"\\n\\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.\");\n            }\n            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;\n        }\n        if (this.isSpeedy) {\n            var sheet = sheetForTag(tag);\n            try {\n                // this is the ultrafast version, works across browsers\n                // the big drawback is that the css won't be editable in devtools\n                sheet.insertRule(rule, sheet.cssRules.length);\n            } catch (e) {\n                if ( true && !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {\n                    console.error('There was a problem inserting the following rule: \"' + rule + '\"', e);\n                }\n            }\n        } else {\n            tag.appendChild(document.createTextNode(rule));\n        }\n        this.ctr++;\n    };\n    _proto.flush = function flush() {\n        // $FlowFixMe\n        this.tags.forEach(function(tag) {\n            return tag.parentNode && tag.parentNode.removeChild(tag);\n        });\n        this.tags = [];\n        this.ctr = 0;\n        if (true) {\n            this._alreadyInsertedOrderInsensitiveRule = false;\n        }\n    };\n    return StyleSheet;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ createStyled; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/is-prop-valid */ \"(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ \"(app-pages-browser)/./node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js\");\n/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/utils */ \"(app-pages-browser)/./node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js\");\n/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/serialize */ \"(app-pages-browser)/./node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js\");\n/* harmony import */ var _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/use-insertion-effect-with-fallbacks */ \"(app-pages-browser)/./node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js\");\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nvar testOmitPropsOnStringTag = _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\nvar testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {\n    return key !== \"theme\";\n};\nvar getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {\n    return typeof tag === \"string\" && // 96 is one less than the char code\n    // for \"a\" so this is checking that\n    // it's a lowercase character\n    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;\n};\nvar composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {\n    var shouldForwardProp;\n    if (options) {\n        var optionsShouldForwardProp = options.shouldForwardProp;\n        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {\n            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);\n        } : optionsShouldForwardProp;\n    }\n    if (typeof shouldForwardProp !== \"function\" && isReal) {\n        shouldForwardProp = tag.__emotion_forwardProp;\n    }\n    return shouldForwardProp;\n};\nvar ILLEGAL_ESCAPE_SEQUENCE_ERROR = \"You have illegal escape sequence in your template literal, most likely inside content's property value.\\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \\\"content: '\\\\00d7';\\\" should become \\\"content: '\\\\\\\\00d7';\\\".\\nYou can read more about this here:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\";\nvar Insertion = function Insertion(_ref) {\n    _s();\n    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;\n    (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_3__.registerStyles)(cache, serialized, isStringTag);\n    (0,_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_5__.useInsertionEffectAlwaysWithSyncFallback)(function() {\n        return (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_3__.insertStyles)(cache, serialized, isStringTag);\n    });\n    return null;\n};\n_s(Insertion, \"7Nf+XQRPn90Zbp+ebkZKxlEWnAc=\", false, function() {\n    return [\n        _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_5__.useInsertionEffectAlwaysWithSyncFallback\n    ];\n});\n_c = Insertion;\nvar createStyled = function createStyled(tag, options) {\n    if (true) {\n        if (tag === undefined) {\n            throw new Error(\"You are trying to create a styled element with an undefined component.\\nYou may have forgotten to import it.\");\n        }\n    }\n    var isReal = tag.__emotion_real === tag;\n    var baseTag = isReal && tag.__emotion_base || tag;\n    var identifierName;\n    var targetClassName;\n    if (options !== undefined) {\n        identifierName = options.label;\n        targetClassName = options.target;\n    }\n    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);\n    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);\n    var shouldUseAs = !defaultShouldForwardProp(\"as\");\n    return function() {\n        var args = arguments;\n        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];\n        if (identifierName !== undefined) {\n            styles.push(\"label:\" + identifierName + \";\");\n        }\n        if (args[0] == null || args[0].raw === undefined) {\n            styles.push.apply(styles, args);\n        } else {\n            if ( true && args[0][0] === undefined) {\n                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n            }\n            styles.push(args[0][0]);\n            var len = args.length;\n            var i = 1;\n            for(; i < len; i++){\n                if ( true && args[0][i] === undefined) {\n                    console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n                }\n                styles.push(args[i], args[0][i]);\n            }\n        } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class\n        var Styled = (0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.w)(function(props, cache, ref) {\n            var FinalTag = shouldUseAs && props.as || baseTag;\n            var className = \"\";\n            var classInterpolations = [];\n            var mergedProps = props;\n            if (props.theme == null) {\n                mergedProps = {};\n                for(var key in props){\n                    mergedProps[key] = props[key];\n                }\n                mergedProps.theme = react__WEBPACK_IMPORTED_MODULE_1__.useContext(_emotion_react__WEBPACK_IMPORTED_MODULE_6__.T);\n            }\n            if (typeof props.className === \"string\") {\n                className = (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_3__.getRegisteredStyles)(cache.registered, classInterpolations, props.className);\n            } else if (props.className != null) {\n                className = props.className + \" \";\n            }\n            var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__.serializeStyles)(styles.concat(classInterpolations), cache.registered, mergedProps);\n            className += cache.key + \"-\" + serialized.name;\n            if (targetClassName !== undefined) {\n                className += \" \" + targetClassName;\n            }\n            var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;\n            var newProps = {};\n            for(var _key in props){\n                if (shouldUseAs && _key === \"as\") continue;\n                if (finalShouldForwardProp(_key)) {\n                    newProps[_key] = props[_key];\n                }\n            }\n            newProps.className = className;\n            newProps.ref = ref;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Insertion, {\n                cache: cache,\n                serialized: serialized,\n                isStringTag: typeof FinalTag === \"string\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(FinalTag, newProps));\n        });\n        Styled.displayName = identifierName !== undefined ? identifierName : \"Styled(\" + (typeof baseTag === \"string\" ? baseTag : baseTag.displayName || baseTag.name || \"Component\") + \")\";\n        Styled.defaultProps = tag.defaultProps;\n        Styled.__emotion_real = Styled;\n        Styled.__emotion_base = baseTag;\n        Styled.__emotion_styles = styles;\n        Styled.__emotion_forwardProp = shouldForwardProp;\n        Object.defineProperty(Styled, \"toString\", {\n            value: function value() {\n                if (targetClassName === undefined && \"development\" !== \"production\") {\n                    return \"NO_COMPONENT_SELECTOR\";\n                } // $FlowFixMe: coerce undefined to string\n                return \".\" + targetClassName;\n            }\n        });\n        Styled.withComponent = function(nextTag, nextOptions) {\n            return createStyled(nextTag, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options, nextOptions, {\n                shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)\n            })).apply(void 0, styles);\n        };\n        return Styled;\n    };\n};\n\nvar _c;\n$RefreshReg$(_c, \"Insertion\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ newStyled; }\n/* harmony export */ });\n/* harmony import */ var _base_dist_emotion_styled_base_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/dist/emotion-styled-base.browser.esm.js */ \"(app-pages-browser)/./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/is-prop-valid */ \"(app-pages-browser)/./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js\");\n/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/utils */ \"(app-pages-browser)/./node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js\");\n/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/serialize */ \"(app-pages-browser)/./node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js\");\n/* harmony import */ var _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/use-insertion-effect-with-fallbacks */ \"(app-pages-browser)/./node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js\");\n\n\n\n\n\n\n\n\nvar tags = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"marquee\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"ellipse\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"mask\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"text\",\n    \"tspan\"\n];\nvar newStyled = _base_dist_emotion_styled_base_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bind();\ntags.forEach(function(tagName) {\n    // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type\n    newStyled[tagName] = newStyled(tagName);\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvZGlzdC9lbW90aW9uLXN0eWxlZC5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBMkU7QUFDbkM7QUFDekI7QUFDaUI7QUFDUjtBQUNBO0FBQ0k7QUFDMEI7QUFFdEQsSUFBSUMsT0FBTztJQUFDO0lBQUs7SUFBUTtJQUFXO0lBQVE7SUFBVztJQUFTO0lBQVM7SUFBSztJQUFRO0lBQU87SUFBTztJQUFPO0lBQWM7SUFBUTtJQUFNO0lBQVU7SUFBVTtJQUFXO0lBQVE7SUFBUTtJQUFPO0lBQVk7SUFBUTtJQUFZO0lBQU07SUFBTztJQUFXO0lBQU87SUFBVTtJQUFPO0lBQU07SUFBTTtJQUFNO0lBQVM7SUFBWTtJQUFjO0lBQVU7SUFBVTtJQUFRO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQVE7SUFBVTtJQUFVO0lBQU07SUFBUTtJQUFLO0lBQVU7SUFBTztJQUFTO0lBQU87SUFBTztJQUFVO0lBQVM7SUFBVTtJQUFNO0lBQVE7SUFBUTtJQUFPO0lBQVE7SUFBVztJQUFRO0lBQVk7SUFBUTtJQUFTO0lBQU87SUFBWTtJQUFVO0lBQU07SUFBWTtJQUFVO0lBQVU7SUFBSztJQUFTO0lBQVc7SUFBTztJQUFZO0lBQUs7SUFBTTtJQUFNO0lBQVE7SUFBSztJQUFRO0lBQVU7SUFBVztJQUFVO0lBQVM7SUFBVTtJQUFRO0lBQVU7SUFBUztJQUFPO0lBQVc7SUFBTztJQUFTO0lBQVM7SUFBTTtJQUFZO0lBQVM7SUFBTTtJQUFTO0lBQVE7SUFBUztJQUFNO0lBQVM7SUFBSztJQUFNO0lBQU87SUFBUztJQUM3N0I7SUFBVTtJQUFZO0lBQVE7SUFBVztJQUFpQjtJQUFLO0lBQVM7SUFBUTtJQUFrQjtJQUFRO0lBQVE7SUFBVztJQUFXO0lBQVk7SUFBa0I7SUFBUTtJQUFRO0lBQU87SUFBUTtDQUFRO0FBRTdNLElBQUlDLFlBQVlGLHFGQUFZQSxDQUFDRyxJQUFJO0FBQ2pDRixLQUFLRyxPQUFPLENBQUMsU0FBVUMsT0FBTztJQUM1Qiw4RkFBOEY7SUFDOUZILFNBQVMsQ0FBQ0csUUFBUSxHQUFHSCxVQUFVRztBQUNqQztBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Rpc3QvZW1vdGlvbi1zdHlsZWQuYnJvd3Nlci5lc20uanM/ZDk3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJy4uL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHRhZ3MgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsIC8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxudmFyIG5ld1N0eWxlZCA9IGNyZWF0ZVN0eWxlZC5iaW5kKCk7XG50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgLy8gJEZsb3dGaXhNZTogd2UgY2FuIGlnbm9yZSB0aGlzIGJlY2F1c2UgaXRzIGV4cG9zZWQgdHlwZSBpcyBkZWZpbmVkIGJ5IHRoZSBDcmVhdGVTdHlsZWQgdHlwZVxuICBuZXdTdHlsZWRbdGFnTmFtZV0gPSBuZXdTdHlsZWQodGFnTmFtZSk7XG59KTtcblxuZXhwb3J0IHsgbmV3U3R5bGVkIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVTdHlsZWQiLCJ0YWdzIiwibmV3U3R5bGVkIiwiYmluZCIsImZvckVhY2giLCJ0YWdOYW1lIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/unitless/dist/emotion-unitless.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@emotion/unitless/dist/emotion-unitless.esm.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ unitlessKeys; }\n/* harmony export */ });\nvar unitlessKeys = {\n    animationIterationCount: 1,\n    aspectRatio: 1,\n    borderImageOutset: 1,\n    borderImageSlice: 1,\n    borderImageWidth: 1,\n    boxFlex: 1,\n    boxFlexGroup: 1,\n    boxOrdinalGroup: 1,\n    columnCount: 1,\n    columns: 1,\n    flex: 1,\n    flexGrow: 1,\n    flexPositive: 1,\n    flexShrink: 1,\n    flexNegative: 1,\n    flexOrder: 1,\n    gridRow: 1,\n    gridRowEnd: 1,\n    gridRowSpan: 1,\n    gridRowStart: 1,\n    gridColumn: 1,\n    gridColumnEnd: 1,\n    gridColumnSpan: 1,\n    gridColumnStart: 1,\n    msGridRow: 1,\n    msGridRowSpan: 1,\n    msGridColumn: 1,\n    msGridColumnSpan: 1,\n    fontWeight: 1,\n    lineHeight: 1,\n    opacity: 1,\n    order: 1,\n    orphans: 1,\n    tabSize: 1,\n    widows: 1,\n    zIndex: 1,\n    zoom: 1,\n    WebkitLineClamp: 1,\n    // SVG-related properties\n    fillOpacity: 1,\n    floodOpacity: 1,\n    stopOpacity: 1,\n    strokeDasharray: 1,\n    strokeDashoffset: 1,\n    strokeMiterlimit: 1,\n    strokeOpacity: 1,\n    strokeWidth: 1\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L2Vtb3Rpb24tdW5pdGxlc3MuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxlQUFlO0lBQ2pCQyx5QkFBeUI7SUFDekJDLGFBQWE7SUFDYkMsbUJBQW1CO0lBQ25CQyxrQkFBa0I7SUFDbEJDLGtCQUFrQjtJQUNsQkMsU0FBUztJQUNUQyxjQUFjO0lBQ2RDLGlCQUFpQjtJQUNqQkMsYUFBYTtJQUNiQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxjQUFjO0lBQ2RDLFlBQVk7SUFDWkMsY0FBYztJQUNkQyxXQUFXO0lBQ1hDLFNBQVM7SUFDVEMsWUFBWTtJQUNaQyxhQUFhO0lBQ2JDLGNBQWM7SUFDZEMsWUFBWTtJQUNaQyxlQUFlO0lBQ2ZDLGdCQUFnQjtJQUNoQkMsaUJBQWlCO0lBQ2pCQyxXQUFXO0lBQ1hDLGVBQWU7SUFDZkMsY0FBYztJQUNkQyxrQkFBa0I7SUFDbEJDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxTQUFTO0lBQ1RDLE9BQU87SUFDUEMsU0FBUztJQUNUQyxTQUFTO0lBQ1RDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLGlCQUFpQjtJQUNqQix5QkFBeUI7SUFDekJDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxhQUFhO0lBQ2JDLGlCQUFpQjtJQUNqQkMsa0JBQWtCO0lBQ2xCQyxrQkFBa0I7SUFDbEJDLGVBQWU7SUFDZkMsYUFBYTtBQUNmO0FBRW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L2Vtb3Rpb24tdW5pdGxlc3MuZXNtLmpzPzcxNTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGFzcGVjdFJhdGlvOiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgeyB1bml0bGVzc0tleXMgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbInVuaXRsZXNzS2V5cyIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJXZWJraXRMaW5lQ2xhbXAiLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/unitless/dist/emotion-unitless.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js ***!
  \***********************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInsertionEffectAlwaysWithSyncFallback: function() { return /* binding */ useInsertionEffectAlwaysWithSyncFallback; },\n/* harmony export */   useInsertionEffectWithLayoutFallback: function() { return /* binding */ useInsertionEffectWithLayoutFallback; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nvar syncFallback = function syncFallback(create) {\n    return create();\n};\nvar useInsertionEffect = react__WEBPACK_IMPORTED_MODULE_0__[\"useInsertion\" + \"Effect\"] ? react__WEBPACK_IMPORTED_MODULE_0__[\"useInsertion\" + \"Effect\"] : false;\nvar useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;\nvar useInsertionEffectWithLayoutFallback = useInsertionEffect || react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy9kaXN0L2Vtb3Rpb24tdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MuYnJvd3Nlci5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQjtBQUUvQixJQUFJQyxlQUFlLFNBQVNBLGFBQWFDLE1BQU07SUFDN0MsT0FBT0E7QUFDVDtBQUVBLElBQUlDLHFCQUFxQkgsa0NBQUssQ0FBQyxpQkFBaUIsU0FBUyxHQUFHQSxrQ0FBSyxDQUFDLGlCQUFpQixTQUFTLEdBQUc7QUFDL0YsSUFBSUksMkNBQTJDRCxzQkFBc0JGO0FBQ3JFLElBQUlJLHVDQUF1Q0Ysc0JBQXNCSCxrREFBcUI7QUFFSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MvZGlzdC9lbW90aW9uLXVzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzLmJyb3dzZXIuZXNtLmpzPzdjMTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG52YXIgc3luY0ZhbGxiYWNrID0gZnVuY3Rpb24gc3luY0ZhbGxiYWNrKGNyZWF0ZSkge1xuICByZXR1cm4gY3JlYXRlKCk7XG59O1xuXG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0ID0gUmVhY3RbJ3VzZUluc2VydGlvbicgKyAnRWZmZWN0J10gPyBSZWFjdFsndXNlSW5zZXJ0aW9uJyArICdFZmZlY3QnXSA6IGZhbHNlO1xudmFyIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgPSB1c2VJbnNlcnRpb25FZmZlY3QgfHwgc3luY0ZhbGxiYWNrO1xudmFyIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayA9IHVzZUluc2VydGlvbkVmZmVjdCB8fCBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG5cbmV4cG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2ssIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayB9O1xuIl0sIm5hbWVzIjpbIlJlYWN0Iiwic3luY0ZhbGxiYWNrIiwiY3JlYXRlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayIsInVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayIsInVzZUxheW91dEVmZmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRegisteredStyles: function() { return /* binding */ getRegisteredStyles; },\n/* harmony export */   insertStyles: function() { return /* binding */ insertStyles; },\n/* harmony export */   registerStyles: function() { return /* binding */ registerStyles; }\n/* harmony export */ });\nvar isBrowser = \"object\" !== \"undefined\";\nfunction getRegisteredStyles(registered, registeredStyles, classNames) {\n    var rawClassName = \"\";\n    classNames.split(\" \").forEach(function(className) {\n        if (registered[className] !== undefined) {\n            registeredStyles.push(registered[className] + \";\");\n        } else {\n            rawClassName += className + \" \";\n        }\n    });\n    return rawClassName;\n}\nvar registerStyles = function registerStyles(cache, serialized, isStringTag) {\n    var className = cache.key + \"-\" + serialized.name;\n    if (// class name could be used further down\n    // the tree but if it's a string tag, we know it won't\n    // so we don't have to add it to registered cache.\n    // this improves memory usage since we can avoid storing the whole style string\n    (isStringTag === false || // we need to always store it if we're in compat mode and\n    // in node since emotion-server relies on whether a style is in\n    // the registered cache to know whether a style is global or not\n    // also, note that this check will be dead code eliminated in the browser\n    isBrowser === false) && cache.registered[className] === undefined) {\n        cache.registered[className] = serialized.styles;\n    }\n};\nvar insertStyles = function insertStyles(cache, serialized, isStringTag) {\n    registerStyles(cache, serialized, isStringTag);\n    var className = cache.key + \"-\" + serialized.name;\n    if (cache.inserted[serialized.name] === undefined) {\n        var current = serialized;\n        do {\n            cache.insert(serialized === current ? \".\" + className : \"\", current, cache.sheet, true);\n            current = current.next;\n        }while (current !== undefined);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91dGlscy9kaXN0L2Vtb3Rpb24tdXRpbHMuYnJvd3Nlci5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBSUEsWUFBWSxhQUFhO0FBQzdCLFNBQVNDLG9CQUFvQkMsVUFBVSxFQUFFQyxnQkFBZ0IsRUFBRUMsVUFBVTtJQUNuRSxJQUFJQyxlQUFlO0lBQ25CRCxXQUFXRSxLQUFLLENBQUMsS0FBS0MsT0FBTyxDQUFDLFNBQVVDLFNBQVM7UUFDL0MsSUFBSU4sVUFBVSxDQUFDTSxVQUFVLEtBQUtDLFdBQVc7WUFDdkNOLGlCQUFpQk8sSUFBSSxDQUFDUixVQUFVLENBQUNNLFVBQVUsR0FBRztRQUNoRCxPQUFPO1lBQ0xILGdCQUFnQkcsWUFBWTtRQUM5QjtJQUNGO0lBQ0EsT0FBT0g7QUFDVDtBQUNBLElBQUlNLGlCQUFpQixTQUFTQSxlQUFlQyxLQUFLLEVBQUVDLFVBQVUsRUFBRUMsV0FBVztJQUN6RSxJQUFJTixZQUFZSSxNQUFNRyxHQUFHLEdBQUcsTUFBTUYsV0FBV0csSUFBSTtJQUVqRCxJQUtBLHdDQUp3QztJQUN4QyxzREFBc0Q7SUFDdEQsa0RBQWtEO0lBQ2xELCtFQUErRTtJQUM5RUYsQ0FBQUEsZ0JBQWdCLFNBQVMseURBQXlEO0lBQ25GLCtEQUErRDtJQUMvRCxnRUFBZ0U7SUFDaEUseUVBQXlFO0lBQ3pFZCxjQUFjLEtBQUksS0FBT1ksTUFBTVYsVUFBVSxDQUFDTSxVQUFVLEtBQUtDLFdBQVc7UUFDbEVHLE1BQU1WLFVBQVUsQ0FBQ00sVUFBVSxHQUFHSyxXQUFXSSxNQUFNO0lBQ2pEO0FBQ0Y7QUFDQSxJQUFJQyxlQUFlLFNBQVNBLGFBQWFOLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxXQUFXO0lBQ3JFSCxlQUFlQyxPQUFPQyxZQUFZQztJQUNsQyxJQUFJTixZQUFZSSxNQUFNRyxHQUFHLEdBQUcsTUFBTUYsV0FBV0csSUFBSTtJQUVqRCxJQUFJSixNQUFNTyxRQUFRLENBQUNOLFdBQVdHLElBQUksQ0FBQyxLQUFLUCxXQUFXO1FBQ2pELElBQUlXLFVBQVVQO1FBRWQsR0FBRztZQUNERCxNQUFNUyxNQUFNLENBQUNSLGVBQWVPLFVBQVUsTUFBTVosWUFBWSxJQUFJWSxTQUFTUixNQUFNVSxLQUFLLEVBQUU7WUFFbEZGLFVBQVVBLFFBQVFHLElBQUk7UUFDeEIsUUFBU0gsWUFBWVgsV0FBVztJQUNsQztBQUNGO0FBRTZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91dGlscy9kaXN0L2Vtb3Rpb24tdXRpbHMuYnJvd3Nlci5lc20uanM/ZGRmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdICsgXCI7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciByZWdpc3RlclN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxufTtcbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBzZXJpYWxpemVkO1xuXG4gICAgZG8ge1xuICAgICAgY2FjaGUuaW5zZXJ0KHNlcmlhbGl6ZWQgPT09IGN1cnJlbnQgPyBcIi5cIiArIGNsYXNzTmFtZSA6ICcnLCBjdXJyZW50LCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG5cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgfSB3aGlsZSAoY3VycmVudCAhPT0gdW5kZWZpbmVkKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcyB9O1xuIl0sIm5hbWVzIjpbImlzQnJvd3NlciIsImdldFJlZ2lzdGVyZWRTdHlsZXMiLCJyZWdpc3RlcmVkIiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJzcGxpdCIsImZvckVhY2giLCJjbGFzc05hbWUiLCJ1bmRlZmluZWQiLCJwdXNoIiwicmVnaXN0ZXJTdHlsZXMiLCJjYWNoZSIsInNlcmlhbGl6ZWQiLCJpc1N0cmluZ1RhZyIsImtleSIsIm5hbWUiLCJzdHlsZXMiLCJpbnNlcnRTdHlsZXMiLCJpbnNlcnRlZCIsImN1cnJlbnQiLCJpbnNlcnQiLCJzaGVldCIsIm5leHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ weakMemoize; }\n/* harmony export */ });\nvar weakMemoize = function weakMemoize(func) {\n    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps\n    var cache = new WeakMap();\n    return function(arg) {\n        if (cache.has(arg)) {\n            // $FlowFixMe\n            return cache.get(arg);\n        }\n        var ret = func(arg);\n        cache.set(arg, ret);\n        return ret;\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi93ZWFrLW1lbW9pemUvZGlzdC9lbW90aW9uLXdlYWstbWVtb2l6ZS5lc20uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGNBQWMsU0FBU0EsWUFBWUMsSUFBSTtJQUN6QyxrRkFBa0Y7SUFDbEYsSUFBSUMsUUFBUSxJQUFJQztJQUNoQixPQUFPLFNBQVVDLEdBQUc7UUFDbEIsSUFBSUYsTUFBTUcsR0FBRyxDQUFDRCxNQUFNO1lBQ2xCLGFBQWE7WUFDYixPQUFPRixNQUFNSSxHQUFHLENBQUNGO1FBQ25CO1FBRUEsSUFBSUcsTUFBTU4sS0FBS0c7UUFDZkYsTUFBTU0sR0FBRyxDQUFDSixLQUFLRztRQUNmLE9BQU9BO0lBQ1Q7QUFDRjtBQUVrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vd2Vhay1tZW1vaXplL2Rpc3QvZW1vdGlvbi13ZWFrLW1lbW9pemUuZXNtLmpzPzlmMzIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHdlYWtNZW1vaXplID0gZnVuY3Rpb24gd2Vha01lbW9pemUoZnVuYykge1xuICAvLyAkRmxvd0ZpeE1lIGZsb3cgZG9lc24ndCBpbmNsdWRlIGFsbCBub24tcHJpbWl0aXZlIHR5cGVzIGFzIGFsbG93ZWQgZm9yIHdlYWttYXBzXG4gIHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlLmhhcyhhcmcpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGFyZyk7XG4gICAgfVxuXG4gICAgdmFyIHJldCA9IGZ1bmMoYXJnKTtcbiAgICBjYWNoZS5zZXQoYXJnLCByZXQpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG59O1xuXG5leHBvcnQgeyB3ZWFrTWVtb2l6ZSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsid2Vha01lbW9pemUiLCJmdW5jIiwiY2FjaGUiLCJXZWFrTWFwIiwiYXJnIiwiaGFzIiwiZ2V0IiwicmV0Iiwic2V0IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar reactIs = __webpack_require__(/*! react-is */ \"(app-pages-browser)/./node_modules/hoist-non-react-statics/node_modules/react-is/index.js\");\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */ var REACT_STATICS = {\n    childContextTypes: true,\n    contextType: true,\n    contextTypes: true,\n    defaultProps: true,\n    displayName: true,\n    getDefaultProps: true,\n    getDerivedStateFromError: true,\n    getDerivedStateFromProps: true,\n    mixins: true,\n    propTypes: true,\n    type: true\n};\nvar KNOWN_STATICS = {\n    name: true,\n    length: true,\n    prototype: true,\n    caller: true,\n    callee: true,\n    arguments: true,\n    arity: true\n};\nvar FORWARD_REF_STATICS = {\n    \"$$typeof\": true,\n    render: true,\n    defaultProps: true,\n    displayName: true,\n    propTypes: true\n};\nvar MEMO_STATICS = {\n    \"$$typeof\": true,\n    compare: true,\n    defaultProps: true,\n    displayName: true,\n    propTypes: true,\n    type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\nfunction getStatics(component) {\n    // React v16.11 and below\n    if (reactIs.isMemo(component)) {\n        return MEMO_STATICS;\n    } // React v16.12 and above\n    return TYPE_STATICS[component[\"$$typeof\"]] || REACT_STATICS;\n}\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n    if (typeof sourceComponent !== \"string\") {\n        // don't hoist over string (html) components\n        if (objectPrototype) {\n            var inheritedComponent = getPrototypeOf(sourceComponent);\n            if (inheritedComponent && inheritedComponent !== objectPrototype) {\n                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n            }\n        }\n        var keys = getOwnPropertyNames(sourceComponent);\n        if (getOwnPropertySymbols) {\n            keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n        }\n        var targetStatics = getStatics(targetComponent);\n        var sourceStatics = getStatics(sourceComponent);\n        for(var i = 0; i < keys.length; ++i){\n            var key = keys[i];\n            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n                try {\n                    // Avoid failures from read-only properties\n                    defineProperty(targetComponent, key, descriptor);\n                } catch (e) {}\n            }\n        }\n    }\n    return targetComponent;\n}\nmodule.exports = hoistNonReactStatics;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFVBQVVDLG1CQUFPQSxDQUFDO0FBRXRCOzs7Q0FHQyxHQUNELElBQUlDLGdCQUFnQjtJQUNsQkMsbUJBQW1CO0lBQ25CQyxhQUFhO0lBQ2JDLGNBQWM7SUFDZEMsY0FBYztJQUNkQyxhQUFhO0lBQ2JDLGlCQUFpQjtJQUNqQkMsMEJBQTBCO0lBQzFCQywwQkFBMEI7SUFDMUJDLFFBQVE7SUFDUkMsV0FBVztJQUNYQyxNQUFNO0FBQ1I7QUFDQSxJQUFJQyxnQkFBZ0I7SUFDbEJDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxXQUFXO0lBQ1hDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxXQUFXO0lBQ1hDLE9BQU87QUFDVDtBQUNBLElBQUlDLHNCQUFzQjtJQUN4QixZQUFZO0lBQ1pDLFFBQVE7SUFDUmpCLGNBQWM7SUFDZEMsYUFBYTtJQUNiSyxXQUFXO0FBQ2I7QUFDQSxJQUFJWSxlQUFlO0lBQ2pCLFlBQVk7SUFDWkMsU0FBUztJQUNUbkIsY0FBYztJQUNkQyxhQUFhO0lBQ2JLLFdBQVc7SUFDWEMsTUFBTTtBQUNSO0FBQ0EsSUFBSWEsZUFBZSxDQUFDO0FBQ3BCQSxZQUFZLENBQUMxQixRQUFRMkIsVUFBVSxDQUFDLEdBQUdMO0FBQ25DSSxZQUFZLENBQUMxQixRQUFRNEIsSUFBSSxDQUFDLEdBQUdKO0FBRTdCLFNBQVNLLFdBQVdDLFNBQVM7SUFDM0IseUJBQXlCO0lBQ3pCLElBQUk5QixRQUFRK0IsTUFBTSxDQUFDRCxZQUFZO1FBQzdCLE9BQU9OO0lBQ1QsRUFBRSx5QkFBeUI7SUFHM0IsT0FBT0UsWUFBWSxDQUFDSSxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUk1QjtBQUNoRDtBQUVBLElBQUk4QixpQkFBaUJDLE9BQU9ELGNBQWM7QUFDMUMsSUFBSUUsc0JBQXNCRCxPQUFPQyxtQkFBbUI7QUFDcEQsSUFBSUMsd0JBQXdCRixPQUFPRSxxQkFBcUI7QUFDeEQsSUFBSUMsMkJBQTJCSCxPQUFPRyx3QkFBd0I7QUFDOUQsSUFBSUMsaUJBQWlCSixPQUFPSSxjQUFjO0FBQzFDLElBQUlDLGtCQUFrQkwsT0FBT2hCLFNBQVM7QUFDdEMsU0FBU3NCLHFCQUFxQkMsZUFBZSxFQUFFQyxlQUFlLEVBQUVDLFNBQVM7SUFDdkUsSUFBSSxPQUFPRCxvQkFBb0IsVUFBVTtRQUN2Qyw0Q0FBNEM7UUFDNUMsSUFBSUgsaUJBQWlCO1lBQ25CLElBQUlLLHFCQUFxQk4sZUFBZUk7WUFFeEMsSUFBSUUsc0JBQXNCQSx1QkFBdUJMLGlCQUFpQjtnQkFDaEVDLHFCQUFxQkMsaUJBQWlCRyxvQkFBb0JEO1lBQzVEO1FBQ0Y7UUFFQSxJQUFJRSxPQUFPVixvQkFBb0JPO1FBRS9CLElBQUlOLHVCQUF1QjtZQUN6QlMsT0FBT0EsS0FBS0MsTUFBTSxDQUFDVixzQkFBc0JNO1FBQzNDO1FBRUEsSUFBSUssZ0JBQWdCakIsV0FBV1c7UUFDL0IsSUFBSU8sZ0JBQWdCbEIsV0FBV1k7UUFFL0IsSUFBSyxJQUFJTyxJQUFJLEdBQUdBLElBQUlKLEtBQUs1QixNQUFNLEVBQUUsRUFBRWdDLEVBQUc7WUFDcEMsSUFBSUMsTUFBTUwsSUFBSSxDQUFDSSxFQUFFO1lBRWpCLElBQUksQ0FBQ2xDLGFBQWEsQ0FBQ21DLElBQUksSUFBSSxDQUFFUCxDQUFBQSxhQUFhQSxTQUFTLENBQUNPLElBQUksS0FBSyxDQUFFRixDQUFBQSxpQkFBaUJBLGFBQWEsQ0FBQ0UsSUFBSSxLQUFLLENBQUVILENBQUFBLGlCQUFpQkEsYUFBYSxDQUFDRyxJQUFJLEdBQUc7Z0JBQzdJLElBQUlDLGFBQWFkLHlCQUF5QkssaUJBQWlCUTtnQkFFM0QsSUFBSTtvQkFDRiwyQ0FBMkM7b0JBQzNDakIsZUFBZVEsaUJBQWlCUyxLQUFLQztnQkFDdkMsRUFBRSxPQUFPQyxHQUFHLENBQUM7WUFDZjtRQUNGO0lBQ0Y7SUFFQSxPQUFPWDtBQUNUO0FBRUFZLE9BQU9DLE9BQU8sR0FBR2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzPzkxZGIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iXSwibmFtZXMiOlsicmVhY3RJcyIsInJlcXVpcmUiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJuYW1lIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJndW1lbnRzIiwiYXJpdHkiLCJGT1JXQVJEX1JFRl9TVEFUSUNTIiwicmVuZGVyIiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsIkZvcndhcmRSZWYiLCJNZW1vIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsImRlZmluZVByb3BlcnR5IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwiY29uY2F0IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJpIiwia2V5IiwiZGVzY3JpcHRvciIsImUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n        // nor polyfill, then a plain number is used for performance.\n        var hasSymbol = typeof Symbol === \"function\" && Symbol.for;\n        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for(\"react.element\") : 0xeac7;\n        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for(\"react.portal\") : 0xeaca;\n        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for(\"react.fragment\") : 0xeacb;\n        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.strict_mode\") : 0xeacc;\n        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for(\"react.profiler\") : 0xead2;\n        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for(\"react.provider\") : 0xeacd;\n        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for(\"react.context\") : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n        // (unstable) APIs that have been removed. Can we remove the symbols?\n        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for(\"react.async_mode\") : 0xeacf;\n        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.concurrent_mode\") : 0xeacf;\n        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for(\"react.forward_ref\") : 0xead0;\n        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for(\"react.suspense\") : 0xead1;\n        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for(\"react.suspense_list\") : 0xead8;\n        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for(\"react.memo\") : 0xead3;\n        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for(\"react.lazy\") : 0xead4;\n        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for(\"react.block\") : 0xead9;\n        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for(\"react.fundamental\") : 0xead5;\n        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for(\"react.responder\") : 0xead6;\n        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for(\"react.scope\") : 0xead7;\n        function isValidElementType(type) {\n            return typeof type === \"string\" || typeof type === \"function\" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === \"object\" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n        }\n        function typeOf(object) {\n            if (typeof object === \"object\" && object !== null) {\n                var $$typeof = object.$$typeof;\n                switch($$typeof){\n                    case REACT_ELEMENT_TYPE:\n                        var type = object.type;\n                        switch(type){\n                            case REACT_ASYNC_MODE_TYPE:\n                            case REACT_CONCURRENT_MODE_TYPE:\n                            case REACT_FRAGMENT_TYPE:\n                            case REACT_PROFILER_TYPE:\n                            case REACT_STRICT_MODE_TYPE:\n                            case REACT_SUSPENSE_TYPE:\n                                return type;\n                            default:\n                                var $$typeofType = type && type.$$typeof;\n                                switch($$typeofType){\n                                    case REACT_CONTEXT_TYPE:\n                                    case REACT_FORWARD_REF_TYPE:\n                                    case REACT_LAZY_TYPE:\n                                    case REACT_MEMO_TYPE:\n                                    case REACT_PROVIDER_TYPE:\n                                        return $$typeofType;\n                                    default:\n                                        return $$typeof;\n                                }\n                        }\n                    case REACT_PORTAL_TYPE:\n                        return $$typeof;\n                }\n            }\n            return undefined;\n        } // AsyncMode is deprecated along with isAsyncMode\n        var AsyncMode = REACT_ASYNC_MODE_TYPE;\n        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n        var ContextConsumer = REACT_CONTEXT_TYPE;\n        var ContextProvider = REACT_PROVIDER_TYPE;\n        var Element = REACT_ELEMENT_TYPE;\n        var ForwardRef = REACT_FORWARD_REF_TYPE;\n        var Fragment = REACT_FRAGMENT_TYPE;\n        var Lazy = REACT_LAZY_TYPE;\n        var Memo = REACT_MEMO_TYPE;\n        var Portal = REACT_PORTAL_TYPE;\n        var Profiler = REACT_PROFILER_TYPE;\n        var StrictMode = REACT_STRICT_MODE_TYPE;\n        var Suspense = REACT_SUSPENSE_TYPE;\n        var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n        function isAsyncMode(object) {\n            {\n                if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n                    hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n                    console[\"warn\"](\"The ReactIs.isAsyncMode() alias has been deprecated, \" + \"and will be removed in React 17+. Update your code to use \" + \"ReactIs.isConcurrentMode() instead. It has the exact same API.\");\n                }\n            }\n            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n        }\n        function isConcurrentMode(object) {\n            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n        }\n        function isContextConsumer(object) {\n            return typeOf(object) === REACT_CONTEXT_TYPE;\n        }\n        function isContextProvider(object) {\n            return typeOf(object) === REACT_PROVIDER_TYPE;\n        }\n        function isElement(object) {\n            return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n        function isForwardRef(object) {\n            return typeOf(object) === REACT_FORWARD_REF_TYPE;\n        }\n        function isFragment(object) {\n            return typeOf(object) === REACT_FRAGMENT_TYPE;\n        }\n        function isLazy(object) {\n            return typeOf(object) === REACT_LAZY_TYPE;\n        }\n        function isMemo(object) {\n            return typeOf(object) === REACT_MEMO_TYPE;\n        }\n        function isPortal(object) {\n            return typeOf(object) === REACT_PORTAL_TYPE;\n        }\n        function isProfiler(object) {\n            return typeOf(object) === REACT_PROFILER_TYPE;\n        }\n        function isStrictMode(object) {\n            return typeOf(object) === REACT_STRICT_MODE_TYPE;\n        }\n        function isSuspense(object) {\n            return typeOf(object) === REACT_SUSPENSE_TYPE;\n        }\n        exports.AsyncMode = AsyncMode;\n        exports.ConcurrentMode = ConcurrentMode;\n        exports.ContextConsumer = ContextConsumer;\n        exports.ContextProvider = ContextProvider;\n        exports.Element = Element;\n        exports.ForwardRef = ForwardRef;\n        exports.Fragment = Fragment;\n        exports.Lazy = Lazy;\n        exports.Memo = Memo;\n        exports.Portal = Portal;\n        exports.Profiler = Profiler;\n        exports.StrictMode = StrictMode;\n        exports.Suspense = Suspense;\n        exports.isAsyncMode = isAsyncMode;\n        exports.isConcurrentMode = isConcurrentMode;\n        exports.isContextConsumer = isContextConsumer;\n        exports.isContextProvider = isContextProvider;\n        exports.isElement = isElement;\n        exports.isForwardRef = isForwardRef;\n        exports.isFragment = isFragment;\n        exports.isLazy = isLazy;\n        exports.isMemo = isMemo;\n        exports.isPortal = isPortal;\n        exports.isProfiler = isProfiler;\n        exports.isStrictMode = isStrictMode;\n        exports.isSuspense = isSuspense;\n        exports.isValidElementType = isValidElementType;\n        exports.typeOf = typeOf;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hoist-non-react-statics/node_modules/react-is/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/node_modules/react-is/index.js ***!
  \*****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"(app-pages-browser)/./node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUF5QixFQUFjLEVBRTFDLE1BQU07SUFDTEMseUxBQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/YzZjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hoist-non-react-statics/node_modules/react-is/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash.mergewith/index.js":
/*!************************************************!*\
  !*** ./node_modules/lodash.mergewith/index.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ /** Used as the size to enable large array optimizations. */ \nvar LARGE_ARRAY_SIZE = 200;\n/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n/** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;\n/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;\n/** `Object#toString` result references. */ var argsTag = \"[object Arguments]\", arrayTag = \"[object Array]\", asyncTag = \"[object AsyncFunction]\", boolTag = \"[object Boolean]\", dateTag = \"[object Date]\", errorTag = \"[object Error]\", funcTag = \"[object Function]\", genTag = \"[object GeneratorFunction]\", mapTag = \"[object Map]\", numberTag = \"[object Number]\", nullTag = \"[object Null]\", objectTag = \"[object Object]\", proxyTag = \"[object Proxy]\", regexpTag = \"[object RegExp]\", setTag = \"[object Set]\", stringTag = \"[object String]\", undefinedTag = \"[object Undefined]\", weakMapTag = \"[object WeakMap]\";\nvar arrayBufferTag = \"[object ArrayBuffer]\", dataViewTag = \"[object DataView]\", float32Tag = \"[object Float32Array]\", float64Tag = \"[object Float64Array]\", int8Tag = \"[object Int8Array]\", int16Tag = \"[object Int16Array]\", int32Tag = \"[object Int32Array]\", uint8Tag = \"[object Uint8Array]\", uint8ClampedTag = \"[object Uint8ClampedArray]\", uint16Tag = \"[object Uint16Array]\", uint32Tag = \"[object Uint32Array]\";\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */ var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\\d*)$/;\n/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof __webpack_require__.g == \"object\" && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n/** Detect free variable `self`. */ var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function(\"return this\")();\n/** Detect free variable `exports`. */ var freeExports =  true && exports && !exports.nodeType && exports;\n/** Detect free variable `module`. */ var freeModule = freeExports && \"object\" == \"object\" && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;\n/** Used to access faster Node.js helpers. */ var nodeUtil = function() {\n    try {\n        // Use `util.types` for Node.js 10+.\n        var types = freeModule && freeModule.require && freeModule.require(\"util\").types;\n        if (types) {\n            return types;\n        }\n        // Legacy `process.binding('util')` for Node.js < 10.\n        return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n    } catch (e) {}\n}();\n/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */ function apply(func, thisArg, args) {\n    switch(args.length){\n        case 0:\n            return func.call(thisArg);\n        case 1:\n            return func.call(thisArg, args[0]);\n        case 2:\n            return func.call(thisArg, args[0], args[1]);\n        case 3:\n            return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n}\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */ function baseTimes(n, iteratee) {\n    var index = -1, result = Array(n);\n    while(++index < n){\n        result[index] = iteratee(index);\n    }\n    return result;\n}\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */ function baseUnary(func) {\n    return function(value) {\n        return func(value);\n    };\n}\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function getValue(object, key) {\n    return object == null ? undefined : object[key];\n}\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */ function overArg(func, transform) {\n    return function(arg) {\n        return func(transform(arg));\n    };\n}\n/** Used for built-in method references. */ var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;\n/** Used to detect overreaching core-js shims. */ var coreJsData = root[\"__core-js_shared__\"];\n/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || \"\");\n    return uid ? \"Symbol(src)_1.\" + uid : \"\";\n}();\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);\n/** Used to detect if a method is native. */ var reIsNative = RegExp(\"^\" + funcToString.call(hasOwnProperty).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, Symbol = root.Symbol, Uint8Array = root.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nvar defineProperty = function() {\n    try {\n        var func = getNative(Object, \"defineProperty\");\n        func({}, \"\", {});\n        return func;\n    } catch (e) {}\n}();\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeMax = Math.max, nativeNow = Date.now;\n/* Built-in method references that are verified to be native. */ var Map = getNative(root, \"Map\"), nativeCreate = getNative(Object, \"create\");\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */ var baseCreate = function() {\n    function object() {}\n    return function(proto) {\n        if (!isObject(proto)) {\n            return {};\n        }\n        if (objectCreate) {\n            return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n    };\n}();\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Hash(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c = Hash;\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */ function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n}\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n}\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n    }\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */ function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n}\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype[\"delete\"] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function ListCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c1 = ListCache;\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */ function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n}\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function listCacheDelete(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n        data.pop();\n    } else {\n        splice.call(data, index, 1);\n    }\n    --this.size;\n    return true;\n}\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function listCacheGet(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n}\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n}\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */ function listCacheSet(key, value) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        ++this.size;\n        data.push([\n            key,\n            value\n        ]);\n    } else {\n        data[index][1] = value;\n    }\n    return this;\n}\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype[\"delete\"] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function MapCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c2 = MapCache;\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */ function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n        \"hash\": new Hash,\n        \"map\": new (Map || ListCache),\n        \"string\": new Hash\n    };\n}\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function mapCacheDelete(key) {\n    var result = getMapData(this, key)[\"delete\"](key);\n    this.size -= result ? 1 : 0;\n    return result;\n}\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n}\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n}\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */ function mapCacheSet(key, value) {\n    var data = getMapData(this, key), size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n}\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype[\"delete\"] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n}\n_c3 = Stack;\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */ function stackClear() {\n    this.__data__ = new ListCache;\n    this.size = 0;\n}\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function stackDelete(key) {\n    var data = this.__data__, result = data[\"delete\"](key);\n    this.size = data.size;\n    return result;\n}\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function stackGet(key) {\n    return this.__data__.get(key);\n}\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function stackHas(key) {\n    return this.__data__.has(key);\n}\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */ function stackSet(key, value) {\n    var data = this.__data__;\n    if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n            pairs.push([\n                key,\n                value\n            ]);\n            this.size = ++data.size;\n            return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n    }\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n}\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype[\"delete\"] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */ function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;\n    for(var key in value){\n        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.\n        (key == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n        isBuff && (key == \"offset\" || key == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n        isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") || // Skip index properties.\n        isIndex(key, length)))) {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function assignMergeValue(object, key, value) {\n    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {\n        baseAssignValue(object, key, value);\n    }\n}\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function assignValue(object, key, value) {\n    var objValue = object[key];\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\n        baseAssignValue(object, key, value);\n    }\n}\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function assocIndexOf(array, key) {\n    var length = array.length;\n    while(length--){\n        if (eq(array[length][0], key)) {\n            return length;\n        }\n    }\n    return -1;\n}\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function baseAssignValue(object, key, value) {\n    if (key == \"__proto__\" && defineProperty) {\n        defineProperty(object, key, {\n            \"configurable\": true,\n            \"enumerable\": true,\n            \"value\": value,\n            \"writable\": true\n        });\n    } else {\n        object[key] = value;\n    }\n}\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */ var baseFor = createBaseFor();\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ function baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */ function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */ function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n        return false;\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n}\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */ function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function baseKeysIn(object) {\n    if (!isObject(object)) {\n        return nativeKeysIn(object);\n    }\n    var isProto = isPrototype(object), result = [];\n    for(var key in object){\n        if (!(key == \"constructor\" && (isProto || !hasOwnProperty.call(object, key)))) {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */ function baseMerge(object, source, srcIndex, customizer, stack) {\n    if (object === source) {\n        return;\n    }\n    baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        } else {\n            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + \"\", object, source, stack) : undefined;\n            if (newValue === undefined) {\n                newValue = srcValue;\n            }\n            assignMergeValue(object, key, newValue);\n        }\n    }, keysIn);\n}\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);\n    if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n    }\n    var newValue = customizer ? customizer(objValue, srcValue, key + \"\", object, source, stack) : undefined;\n    var isCommon = newValue === undefined;\n    if (isCommon) {\n        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n            if (isArray(objValue)) {\n                newValue = objValue;\n            } else if (isArrayLikeObject(objValue)) {\n                newValue = copyArray(objValue);\n            } else if (isBuff) {\n                isCommon = false;\n                newValue = cloneBuffer(srcValue, true);\n            } else if (isTyped) {\n                isCommon = false;\n                newValue = cloneTypedArray(srcValue, true);\n            } else {\n                newValue = [];\n            }\n        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n            newValue = objValue;\n            if (isArguments(objValue)) {\n                newValue = toPlainObject(objValue);\n            } else if (!isObject(objValue) || isFunction(objValue)) {\n                newValue = initCloneObject(srcValue);\n            }\n        } else {\n            isCommon = false;\n        }\n    }\n    if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack[\"delete\"](srcValue);\n    }\n    assignMergeValue(object, key, newValue);\n}\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */ function baseRest(func, start) {\n    return setToString(overRest(func, start, identity), func + \"\");\n}\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var baseSetToString = !defineProperty ? identity : function(func, string) {\n    return defineProperty(func, \"toString\", {\n        \"configurable\": true,\n        \"enumerable\": false,\n        \"value\": constant(string),\n        \"writable\": true\n    });\n};\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */ function cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n        return buffer.slice();\n    }\n    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n    buffer.copy(result);\n    return result;\n}\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */ function cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n}\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */ function cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */ function copyArray(source, array) {\n    var index = -1, length = source.length;\n    array || (array = Array(length));\n    while(++index < length){\n        array[index] = source[index];\n    }\n    return array;\n}\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */ function copyObject(source, props, object, customizer) {\n    var isNew = !object;\n    object || (object = {});\n    var index = -1, length = props.length;\n    while(++index < length){\n        var key = props[index];\n        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;\n        if (newValue === undefined) {\n            newValue = source[key];\n        }\n        if (isNew) {\n            baseAssignValue(object, key, newValue);\n        } else {\n            assignValue(object, key, newValue);\n        }\n    }\n    return object;\n}\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */ function createAssigner(assigner) {\n    return baseRest(function(object, sources) {\n        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;\n        customizer = assigner.length > 3 && typeof customizer == \"function\" ? (length--, customizer) : undefined;\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n            customizer = length < 3 ? undefined : customizer;\n            length = 1;\n        }\n        object = Object(object);\n        while(++index < length){\n            var source = sources[index];\n            if (source) {\n                assigner(object, source, index, customizer);\n            }\n        }\n        return object;\n    });\n}\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */ function createBaseFor(fromRight) {\n    return function(object, iteratee, keysFunc) {\n        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;\n        while(length--){\n            var key = props[fromRight ? length : ++index];\n            if (iteratee(iterable[key], key, iterable) === false) {\n                break;\n            }\n        }\n        return object;\n    };\n}\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */ function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n}\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */ function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */ function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n    } catch (e) {}\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        } else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */ function initCloneObject(object) {\n    return typeof object.constructor == \"function\" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\n}\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */ function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (type == \"number\" || type != \"symbol\" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */ function isIterateeCall(value, index, object) {\n    if (!isObject(object)) {\n        return false;\n    }\n    var type = typeof index;\n    if (type == \"number\" ? isArrayLike(object) && isIndex(index, object.length) : type == \"string\" && index in object) {\n        return eq(object[index], value);\n    }\n    return false;\n}\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */ function isKeyable(value) {\n    var type = typeof value;\n    return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n}\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */ function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n}\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */ function isPrototype(value) {\n    var Ctor = value && value.constructor, proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto;\n    return value === proto;\n}\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function nativeKeysIn(object) {\n    var result = [];\n    if (object != null) {\n        for(var key in Object(object)){\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */ function objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */ function overRest(func, start, transform) {\n    start = nativeMax(start === undefined ? func.length - 1 : start, 0);\n    return function() {\n        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);\n        while(++index < length){\n            array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while(++index < start){\n            otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n    };\n}\n/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function safeGet(object, key) {\n    if (key === \"constructor\" && typeof object[key] === \"function\") {\n        return;\n    }\n    if (key == \"__proto__\") {\n        return;\n    }\n    return object[key];\n}\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var setToString = shortOut(baseSetToString);\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */ function shortOut(func) {\n    var count = 0, lastCalled = 0;\n    return function() {\n        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);\n        lastCalled = stamp;\n        if (remaining > 0) {\n            if (++count >= HOT_COUNT) {\n                return arguments[0];\n            }\n        } else {\n            count = 0;\n        }\n        return func.apply(undefined, arguments);\n    };\n}\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */ function toSource(func) {\n    if (func != null) {\n        try {\n            return funcToString.call(func);\n        } catch (e) {}\n        try {\n            return func + \"\";\n        } catch (e) {}\n    }\n    return \"\";\n}\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */ function eq(value, other) {\n    return value === other || value !== value && other !== other;\n}\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */ var isArguments = baseIsArguments(function() {\n    return arguments;\n}()) ? baseIsArguments : function(value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, \"callee\") && !propertyIsEnumerable.call(value, \"callee\");\n};\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */ var isArray = Array.isArray;\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */ function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n}\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */ function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n}\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */ var isBuffer = nativeIsBuffer || stubFalse;\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */ function isFunction(value) {\n    if (!isObject(value)) {\n        return false;\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */ function isLength(value) {\n    return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */ function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == \"object\" || type == \"function\");\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ function isObjectLike(value) {\n    return value != null && typeof value == \"object\";\n}\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */ function isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n    }\n    var proto = getPrototype(value);\n    if (proto === null) {\n        return true;\n    }\n    var Ctor = hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n    return typeof Ctor == \"function\" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n}\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */ function toPlainObject(value) {\n    return copyObject(value, keysIn(value));\n}\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */ function keysIn(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n    baseMerge(object, source, srcIndex, customizer);\n});\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */ function constant(value) {\n    return function() {\n        return value;\n    };\n}\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */ function identity(value) {\n    return value;\n}\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */ function stubFalse() {\n    return false;\n}\nmodule.exports = mergeWith;\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Hash\");\n$RefreshReg$(_c1, \"ListCache\");\n$RefreshReg$(_c2, \"MapCache\");\n$RefreshReg$(_c3, \"Stack\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash.mergewith/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// shim for using process in browser\n\nvar process = module.exports = {};\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar cachedSetTimeout;\nvar cachedClearTimeout;\nfunction defaultSetTimout() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction defaultClearTimeout() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n    try {\n        if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n})();\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n    var len = queue.length;\n    while(len){\n        currentQueue = queue;\n        queue = [];\n        while(++queueIndex < len){\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nprocess.nextTick = function(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for(var i = 1; i < arguments.length; i++){\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\n_c = Item;\nItem.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\nprocess.title = \"browser\";\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = \"\"; // empty string to avoid regexp issues\nprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\nprocess.listeners = function(name) {\n    return [];\n};\nprocess.binding = function(name) {\n    throw new Error(\"process.binding is not supported\");\n};\nprocess.cwd = function() {\n    return \"/\";\n};\nprocess.chdir = function(dir) {\n    throw new Error(\"process.chdir is not supported\");\n};\nprocess.umask = function() {\n    return 0;\n};\nvar _c;\n$RefreshReg$(_c, \"Item\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsb0NBQW9DOztBQUNwQyxJQUFJQSxVQUFVQyxPQUFPQyxPQUFPLEdBQUcsQ0FBQztBQUVoQywyRUFBMkU7QUFDM0UsMkVBQTJFO0FBQzNFLCtFQUErRTtBQUMvRSw4REFBOEQ7QUFFOUQsSUFBSUM7QUFDSixJQUFJQztBQUVKLFNBQVNDO0lBQ0wsTUFBTSxJQUFJQyxNQUFNO0FBQ3BCO0FBQ0EsU0FBU0M7SUFDTCxNQUFNLElBQUlELE1BQU07QUFDcEI7QUFDQztJQUNHLElBQUk7UUFDQSxJQUFJLE9BQU9FLGVBQWUsWUFBWTtZQUNsQ0wsbUJBQW1CSztRQUN2QixPQUFPO1lBQ0hMLG1CQUFtQkU7UUFDdkI7SUFDSixFQUFFLE9BQU9JLEdBQUc7UUFDUk4sbUJBQW1CRTtJQUN2QjtJQUNBLElBQUk7UUFDQSxJQUFJLE9BQU9LLGlCQUFpQixZQUFZO1lBQ3BDTixxQkFBcUJNO1FBQ3pCLE9BQU87WUFDSE4scUJBQXFCRztRQUN6QjtJQUNKLEVBQUUsT0FBT0UsR0FBRztRQUNSTCxxQkFBcUJHO0lBQ3pCO0FBQ0o7QUFDQSxTQUFTSSxXQUFXQyxHQUFHO0lBQ25CLElBQUlULHFCQUFxQkssWUFBWTtRQUNqQyx1Q0FBdUM7UUFDdkMsT0FBT0EsV0FBV0ksS0FBSztJQUMzQjtJQUNBLHdEQUF3RDtJQUN4RCxJQUFJLENBQUNULHFCQUFxQkUsb0JBQW9CLENBQUNGLGdCQUFlLEtBQU1LLFlBQVk7UUFDNUVMLG1CQUFtQks7UUFDbkIsT0FBT0EsV0FBV0ksS0FBSztJQUMzQjtJQUNBLElBQUk7UUFDQSxzRUFBc0U7UUFDdEUsT0FBT1QsaUJBQWlCUyxLQUFLO0lBQ2pDLEVBQUUsT0FBTUgsR0FBRTtRQUNOLElBQUk7WUFDQSxrSEFBa0g7WUFDbEgsT0FBT04saUJBQWlCVSxJQUFJLENBQUMsTUFBTUQsS0FBSztRQUM1QyxFQUFFLE9BQU1ILEdBQUU7WUFDTixpS0FBaUs7WUFDakssT0FBT04saUJBQWlCVSxJQUFJLENBQUMsSUFBSSxFQUFFRCxLQUFLO1FBQzVDO0lBQ0o7QUFHSjtBQUNBLFNBQVNFLGdCQUFnQkMsTUFBTTtJQUMzQixJQUFJWCx1QkFBdUJNLGNBQWM7UUFDckMsdUNBQXVDO1FBQ3ZDLE9BQU9BLGFBQWFLO0lBQ3hCO0lBQ0EsMERBQTBEO0lBQzFELElBQUksQ0FBQ1gsdUJBQXVCRyx1QkFBdUIsQ0FBQ0gsa0JBQWlCLEtBQU1NLGNBQWM7UUFDckZOLHFCQUFxQk07UUFDckIsT0FBT0EsYUFBYUs7SUFDeEI7SUFDQSxJQUFJO1FBQ0Esc0VBQXNFO1FBQ3RFLE9BQU9YLG1CQUFtQlc7SUFDOUIsRUFBRSxPQUFPTixHQUFFO1FBQ1AsSUFBSTtZQUNBLG1IQUFtSDtZQUNuSCxPQUFPTCxtQkFBbUJTLElBQUksQ0FBQyxNQUFNRTtRQUN6QyxFQUFFLE9BQU9OLEdBQUU7WUFDUCxrS0FBa0s7WUFDbEssNEVBQTRFO1lBQzVFLE9BQU9MLG1CQUFtQlMsSUFBSSxDQUFDLElBQUksRUFBRUU7UUFDekM7SUFDSjtBQUlKO0FBQ0EsSUFBSUMsUUFBUSxFQUFFO0FBQ2QsSUFBSUMsV0FBVztBQUNmLElBQUlDO0FBQ0osSUFBSUMsYUFBYSxDQUFDO0FBRWxCLFNBQVNDO0lBQ0wsSUFBSSxDQUFDSCxZQUFZLENBQUNDLGNBQWM7UUFDNUI7SUFDSjtJQUNBRCxXQUFXO0lBQ1gsSUFBSUMsYUFBYUcsTUFBTSxFQUFFO1FBQ3JCTCxRQUFRRSxhQUFhSSxNQUFNLENBQUNOO0lBQ2hDLE9BQU87UUFDSEcsYUFBYSxDQUFDO0lBQ2xCO0lBQ0EsSUFBSUgsTUFBTUssTUFBTSxFQUFFO1FBQ2RFO0lBQ0o7QUFDSjtBQUVBLFNBQVNBO0lBQ0wsSUFBSU4sVUFBVTtRQUNWO0lBQ0o7SUFDQSxJQUFJTyxVQUFVYixXQUFXUztJQUN6QkgsV0FBVztJQUVYLElBQUlRLE1BQU1ULE1BQU1LLE1BQU07SUFDdEIsTUFBTUksSUFBSztRQUNQUCxlQUFlRjtRQUNmQSxRQUFRLEVBQUU7UUFDVixNQUFPLEVBQUVHLGFBQWFNLElBQUs7WUFDdkIsSUFBSVAsY0FBYztnQkFDZEEsWUFBWSxDQUFDQyxXQUFXLENBQUNPLEdBQUc7WUFDaEM7UUFDSjtRQUNBUCxhQUFhLENBQUM7UUFDZE0sTUFBTVQsTUFBTUssTUFBTTtJQUN0QjtJQUNBSCxlQUFlO0lBQ2ZELFdBQVc7SUFDWEgsZ0JBQWdCVTtBQUNwQjtBQUVBeEIsUUFBUTJCLFFBQVEsR0FBRyxTQUFVZixHQUFHO0lBQzVCLElBQUlnQixPQUFPLElBQUlDLE1BQU1DLFVBQVVULE1BQU0sR0FBRztJQUN4QyxJQUFJUyxVQUFVVCxNQUFNLEdBQUcsR0FBRztRQUN0QixJQUFLLElBQUlVLElBQUksR0FBR0EsSUFBSUQsVUFBVVQsTUFBTSxFQUFFVSxJQUFLO1lBQ3ZDSCxJQUFJLENBQUNHLElBQUksRUFBRSxHQUFHRCxTQUFTLENBQUNDLEVBQUU7UUFDOUI7SUFDSjtJQUNBZixNQUFNZ0IsSUFBSSxDQUFDLElBQUlDLEtBQUtyQixLQUFLZ0I7SUFDekIsSUFBSVosTUFBTUssTUFBTSxLQUFLLEtBQUssQ0FBQ0osVUFBVTtRQUNqQ04sV0FBV1k7SUFDZjtBQUNKO0FBRUEsK0JBQStCO0FBQy9CLFNBQVNVLEtBQUtyQixHQUFHLEVBQUVzQixLQUFLO0lBQ3BCLElBQUksQ0FBQ3RCLEdBQUcsR0FBR0E7SUFDWCxJQUFJLENBQUNzQixLQUFLLEdBQUdBO0FBQ2pCO0tBSFNEO0FBSVRBLEtBQUtFLFNBQVMsQ0FBQ1QsR0FBRyxHQUFHO0lBQ2pCLElBQUksQ0FBQ2QsR0FBRyxDQUFDd0IsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDRixLQUFLO0FBQ25DO0FBQ0FsQyxRQUFRcUMsS0FBSyxHQUFHO0FBQ2hCckMsUUFBUXNDLE9BQU8sR0FBRztBQUNsQnRDLFFBQVF1QyxHQUFHLEdBQUcsQ0FBQztBQUNmdkMsUUFBUXdDLElBQUksR0FBRyxFQUFFO0FBQ2pCeEMsUUFBUXlDLE9BQU8sR0FBRyxJQUFJLHNDQUFzQztBQUM1RHpDLFFBQVEwQyxRQUFRLEdBQUcsQ0FBQztBQUVwQixTQUFTQyxRQUFRO0FBRWpCM0MsUUFBUTRDLEVBQUUsR0FBR0Q7QUFDYjNDLFFBQVE2QyxXQUFXLEdBQUdGO0FBQ3RCM0MsUUFBUThDLElBQUksR0FBR0g7QUFDZjNDLFFBQVErQyxHQUFHLEdBQUdKO0FBQ2QzQyxRQUFRZ0QsY0FBYyxHQUFHTDtBQUN6QjNDLFFBQVFpRCxrQkFBa0IsR0FBR047QUFDN0IzQyxRQUFRa0QsSUFBSSxHQUFHUDtBQUNmM0MsUUFBUW1ELGVBQWUsR0FBR1I7QUFDMUIzQyxRQUFRb0QsbUJBQW1CLEdBQUdUO0FBRTlCM0MsUUFBUXFELFNBQVMsR0FBRyxTQUFVQyxJQUFJO0lBQUksT0FBTyxFQUFFO0FBQUM7QUFFaER0RCxRQUFRdUQsT0FBTyxHQUFHLFNBQVVELElBQUk7SUFDNUIsTUFBTSxJQUFJaEQsTUFBTTtBQUNwQjtBQUVBTixRQUFRd0QsR0FBRyxHQUFHO0lBQWMsT0FBTztBQUFJO0FBQ3ZDeEQsUUFBUXlELEtBQUssR0FBRyxTQUFVQyxHQUFHO0lBQ3pCLE1BQU0sSUFBSXBELE1BQU07QUFDcEI7QUFDQU4sUUFBUTJELEtBQUssR0FBRztJQUFhLE9BQU87QUFBRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzPzVjYjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImUiLCJjbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2FsbCIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsInF1ZXVlIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwibGVuZ3RoIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJuZXh0VGljayIsImFyZ3MiLCJBcnJheSIsImFyZ3VtZW50cyIsImkiLCJwdXNoIiwiSXRlbSIsImFycmF5IiwicHJvdG90eXBlIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsIm5hbWUiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/recoil/es/index.js":
/*!*****************************************!*\
  !*** ./node_modules/recoil/es/index.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultValue: function() { return /* binding */ Recoil_index_1; },\n/* harmony export */   RecoilEnv: function() { return /* binding */ Recoil_index_4; },\n/* harmony export */   RecoilLoadable: function() { return /* binding */ Recoil_index_3; },\n/* harmony export */   RecoilRoot: function() { return /* binding */ Recoil_index_5; },\n/* harmony export */   atom: function() { return /* binding */ Recoil_index_8; },\n/* harmony export */   atomFamily: function() { return /* binding */ Recoil_index_10; },\n/* harmony export */   constSelector: function() { return /* binding */ Recoil_index_12; },\n/* harmony export */   errorSelector: function() { return /* binding */ Recoil_index_13; },\n/* harmony export */   isRecoilValue: function() { return /* binding */ Recoil_index_2; },\n/* harmony export */   noWait: function() { return /* binding */ Recoil_index_15; },\n/* harmony export */   readOnlySelector: function() { return /* binding */ Recoil_index_14; },\n/* harmony export */   retentionZone: function() { return /* binding */ Recoil_index_38; },\n/* harmony export */   selector: function() { return /* binding */ Recoil_index_9; },\n/* harmony export */   selectorFamily: function() { return /* binding */ Recoil_index_11; },\n/* harmony export */   snapshot_UNSTABLE: function() { return /* binding */ Recoil_index_36; },\n/* harmony export */   useGetRecoilValueInfo_UNSTABLE: function() { return /* binding */ Recoil_index_26; },\n/* harmony export */   useGotoRecoilSnapshot: function() { return /* binding */ Recoil_index_33; },\n/* harmony export */   useRecoilBridgeAcrossReactRoots_UNSTABLE: function() { return /* binding */ Recoil_index_7; },\n/* harmony export */   useRecoilCallback: function() { return /* binding */ Recoil_index_31; },\n/* harmony export */   useRecoilRefresher_UNSTABLE: function() { return /* binding */ Recoil_index_27; },\n/* harmony export */   useRecoilSnapshot: function() { return /* binding */ Recoil_index_34; },\n/* harmony export */   useRecoilState: function() { return /* binding */ Recoil_index_22; },\n/* harmony export */   useRecoilStateLoadable: function() { return /* binding */ Recoil_index_23; },\n/* harmony export */   useRecoilState_TRANSITION_SUPPORT_UNSTABLE: function() { return /* binding */ Recoil_index_30; },\n/* harmony export */   useRecoilStoreID: function() { return /* binding */ Recoil_index_6; },\n/* harmony export */   useRecoilTransactionObserver_UNSTABLE: function() { return /* binding */ Recoil_index_35; },\n/* harmony export */   useRecoilTransaction_UNSTABLE: function() { return /* binding */ Recoil_index_32; },\n/* harmony export */   useRecoilValue: function() { return /* binding */ Recoil_index_20; },\n/* harmony export */   useRecoilValueLoadable: function() { return /* binding */ Recoil_index_21; },\n/* harmony export */   useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE: function() { return /* binding */ Recoil_index_28; },\n/* harmony export */   useRecoilValue_TRANSITION_SUPPORT_UNSTABLE: function() { return /* binding */ Recoil_index_29; },\n/* harmony export */   useResetRecoilState: function() { return /* binding */ Recoil_index_25; },\n/* harmony export */   useRetain: function() { return /* binding */ Recoil_index_37; },\n/* harmony export */   useSetRecoilState: function() { return /* binding */ Recoil_index_24; },\n/* harmony export */   waitForAll: function() { return /* binding */ Recoil_index_18; },\n/* harmony export */   waitForAllSettled: function() { return /* binding */ Recoil_index_19; },\n/* harmony export */   waitForAny: function() { return /* binding */ Recoil_index_17; },\n/* harmony export */   waitForNone: function() { return /* binding */ Recoil_index_16; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/process/browser.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$(), _s25 = $RefreshSig$(), _s26 = $RefreshSig$(), _s27 = $RefreshSig$(), _s28 = $RefreshSig$(), _s29 = $RefreshSig$(), _s30 = $RefreshSig$(), _s31 = $RefreshSig$(), _s32 = $RefreshSig$(), _s33 = $RefreshSig$();\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ function err(message) {\n    const error = new Error(message); // In V8, Error objects keep the closure scope chain alive until the\n    // err.stack property is accessed.\n    if (error.stack === undefined) {\n        // IE sets the stack only if error is thrown\n        try {\n            throw error;\n        } catch (_) {} // eslint-disable-line fb-www/no-unused-catch-bindings, no-empty\n    }\n    return error;\n}\nvar err_1 = err;\n// @oss-only\nvar Recoil_err = err_1;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ // Split declaration and implementation to allow this function to pretend to\n// check for actual instance of Promise instead of something with a `then`\n// method.\n// eslint-disable-next-line no-redeclare\nfunction isPromise(p) {\n    return !!p && typeof p.then === \"function\";\n}\nvar Recoil_isPromise = isPromise;\nfunction nullthrows(x, message) {\n    if (x != null) {\n        return x;\n    }\n    throw Recoil_err(message !== null && message !== void 0 ? message : \"Got unexpected null or undefined\");\n}\nvar Recoil_nullthrows = nullthrows;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass BaseLoadable {\n    getValue() {\n        throw Recoil_err(\"BaseLoadable\");\n    }\n    toPromise() {\n        throw Recoil_err(\"BaseLoadable\");\n    }\n    valueMaybe() {\n        throw Recoil_err(\"BaseLoadable\");\n    }\n    valueOrThrow() {\n        // $FlowFixMe[prop-missing]\n        throw Recoil_err('Loadable expected value, but in \"'.concat(this.state, '\" state'));\n    }\n    promiseMaybe() {\n        throw Recoil_err(\"BaseLoadable\");\n    }\n    promiseOrThrow() {\n        // $FlowFixMe[prop-missing]\n        throw Recoil_err('Loadable expected promise, but in \"'.concat(this.state, '\" state'));\n    }\n    errorMaybe() {\n        throw Recoil_err(\"BaseLoadable\");\n    }\n    errorOrThrow() {\n        // $FlowFixMe[prop-missing]\n        throw Recoil_err('Loadable expected error, but in \"'.concat(this.state, '\" state'));\n    }\n    is(other) {\n        // $FlowFixMe[prop-missing]\n        return other.state === this.state && other.contents === this.contents;\n    }\n    map(_map) {\n        throw Recoil_err(\"BaseLoadable\");\n    }\n}\nclass ValueLoadable extends BaseLoadable {\n    getValue() {\n        return this.contents;\n    }\n    toPromise() {\n        return Promise.resolve(this.contents);\n    }\n    valueMaybe() {\n        return this.contents;\n    }\n    valueOrThrow() {\n        return this.contents;\n    }\n    promiseMaybe() {\n        return undefined;\n    }\n    errorMaybe() {\n        return undefined;\n    }\n    map(map) {\n        try {\n            const next = map(this.contents);\n            return Recoil_isPromise(next) ? loadableWithPromise(next) : isLoadable(next) ? next : loadableWithValue(next);\n        } catch (e) {\n            return Recoil_isPromise(e) ? // errors and subsequent retries will be handled in 'loading' case\n            // $FlowFixMe[prop-missing]\n            loadableWithPromise(e.next(()=>this.map(map))) : loadableWithError(e);\n        }\n    }\n    constructor(value){\n        super();\n        _defineProperty(this, \"state\", \"hasValue\");\n        _defineProperty(this, \"contents\", void 0);\n        this.contents = value;\n    }\n}\nclass ErrorLoadable extends BaseLoadable {\n    getValue() {\n        throw this.contents;\n    }\n    toPromise() {\n        return Promise.reject(this.contents);\n    }\n    valueMaybe() {\n        return undefined;\n    }\n    promiseMaybe() {\n        return undefined;\n    }\n    errorMaybe() {\n        return this.contents;\n    }\n    errorOrThrow() {\n        return this.contents;\n    }\n    map(_map) {\n        // $FlowIssue[incompatible-return]\n        return this;\n    }\n    constructor(error){\n        super();\n        _defineProperty(this, \"state\", \"hasError\");\n        _defineProperty(this, \"contents\", void 0);\n        this.contents = error;\n    }\n}\nclass LoadingLoadable extends BaseLoadable {\n    getValue() {\n        throw this.contents;\n    }\n    toPromise() {\n        return this.contents;\n    }\n    valueMaybe() {\n        return undefined;\n    }\n    promiseMaybe() {\n        return this.contents;\n    }\n    promiseOrThrow() {\n        return this.contents;\n    }\n    errorMaybe() {\n        return undefined;\n    }\n    map(map) {\n        return loadableWithPromise(this.contents.then((value)=>{\n            const next = map(value);\n            if (isLoadable(next)) {\n                const nextLoadable = next;\n                switch(nextLoadable.state){\n                    case \"hasValue\":\n                        return nextLoadable.contents;\n                    case \"hasError\":\n                        throw nextLoadable.contents;\n                    case \"loading\":\n                        return nextLoadable.contents;\n                }\n            } // $FlowIssue[incompatible-return]\n            return next;\n        }) // $FlowFixMe[incompatible-call]\n        .catch((e)=>{\n            if (Recoil_isPromise(e)) {\n                // we were \"suspended,\" try again\n                return e.then(()=>this.map(map).contents);\n            }\n            throw e;\n        }));\n    }\n    constructor(promise){\n        super();\n        _defineProperty(this, \"state\", \"loading\");\n        _defineProperty(this, \"contents\", void 0);\n        this.contents = promise;\n    }\n}\nfunction loadableWithValue(value) {\n    return Object.freeze(new ValueLoadable(value));\n}\nfunction loadableWithError(error) {\n    return Object.freeze(new ErrorLoadable(error));\n}\nfunction loadableWithPromise(promise) {\n    return Object.freeze(new LoadingLoadable(promise));\n}\nfunction loadableLoading() {\n    return Object.freeze(new LoadingLoadable(new Promise(()=>{})));\n}\nfunction loadableAllArray(inputs) {\n    return inputs.every((i)=>i.state === \"hasValue\") ? loadableWithValue(inputs.map((i)=>i.contents)) : inputs.some((i)=>i.state === \"hasError\") ? loadableWithError(Recoil_nullthrows(inputs.find((i)=>i.state === \"hasError\"), \"Invalid loadable passed to loadableAll\").contents) : loadableWithPromise(Promise.all(inputs.map((i)=>i.contents)));\n}\nfunction loadableAll(inputs) {\n    const unwrapedInputs = Array.isArray(inputs) ? inputs : Object.getOwnPropertyNames(inputs).map((key)=>inputs[key]);\n    const normalizedInputs = unwrapedInputs.map((x)=>isLoadable(x) ? x : Recoil_isPromise(x) ? loadableWithPromise(x) : loadableWithValue(x));\n    const output = loadableAllArray(normalizedInputs);\n    return Array.isArray(inputs) ? output : // $FlowIssue[incompatible-call]\n    output.map((outputs)=>Object.getOwnPropertyNames(inputs).reduce((out, key, idx)=>({\n                ...out,\n                [key]: outputs[idx]\n            }), {}));\n}\nfunction isLoadable(x) {\n    return x instanceof BaseLoadable;\n}\nconst LoadableStaticInterface = {\n    of: (value)=>Recoil_isPromise(value) ? loadableWithPromise(value) : isLoadable(value) ? value : loadableWithValue(value),\n    error: (error)=>loadableWithError(error),\n    // $FlowIssue[incompatible-return]\n    loading: ()=>loadableLoading(),\n    // $FlowIssue[unclear-type]\n    all: loadableAll,\n    isLoadable\n};\nvar Recoil_Loadable = {\n    loadableWithValue,\n    loadableWithError,\n    loadableWithPromise,\n    loadableLoading,\n    loadableAll,\n    isLoadable,\n    RecoilLoadable: LoadableStaticInterface\n};\nvar Recoil_Loadable_1 = Recoil_Loadable.loadableWithValue;\nvar Recoil_Loadable_2 = Recoil_Loadable.loadableWithError;\nvar Recoil_Loadable_3 = Recoil_Loadable.loadableWithPromise;\nvar Recoil_Loadable_4 = Recoil_Loadable.loadableLoading;\nvar Recoil_Loadable_5 = Recoil_Loadable.loadableAll;\nvar Recoil_Loadable_6 = Recoil_Loadable.isLoadable;\nvar Recoil_Loadable_7 = Recoil_Loadable.RecoilLoadable;\nvar Recoil_Loadable$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    loadableWithValue: Recoil_Loadable_1,\n    loadableWithError: Recoil_Loadable_2,\n    loadableWithPromise: Recoil_Loadable_3,\n    loadableLoading: Recoil_Loadable_4,\n    loadableAll: Recoil_Loadable_5,\n    isLoadable: Recoil_Loadable_6,\n    RecoilLoadable: Recoil_Loadable_7\n});\nconst env = {\n    RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED: true,\n    // Note: RECOIL_GKS_ENABLED settings will only be honored in OSS builds of Recoil\n    RECOIL_GKS_ENABLED: new Set([\n        \"recoil_hamt_2020\",\n        \"recoil_sync_external_store\",\n        \"recoil_suppress_rerender_in_callback\",\n        \"recoil_memory_managament_2020\"\n    ])\n};\nfunction readProcessEnvBooleanFlag(name, set) {\n    var _process$env$name, _process$env$name$toL;\n    const sanitizedValue = (_process$env$name = process.env[name]) === null || _process$env$name === void 0 ? void 0 : (_process$env$name$toL = _process$env$name.toLowerCase()) === null || _process$env$name$toL === void 0 ? void 0 : _process$env$name$toL.trim();\n    if (sanitizedValue == null || sanitizedValue === \"\") {\n        return;\n    }\n    const allowedValues = [\n        \"true\",\n        \"false\"\n    ];\n    if (!allowedValues.includes(sanitizedValue)) {\n        throw Recoil_err(\"process.env.\".concat(name, \" value must be 'true', 'false', or empty: \").concat(sanitizedValue));\n    }\n    set(sanitizedValue === \"true\");\n}\nfunction readProcessEnvStringArrayFlag(name, set) {\n    var _process$env$name2;\n    const sanitizedValue = (_process$env$name2 = process.env[name]) === null || _process$env$name2 === void 0 ? void 0 : _process$env$name2.trim();\n    if (sanitizedValue == null || sanitizedValue === \"\") {\n        return;\n    }\n    set(sanitizedValue.split(/\\s*,\\s*|\\s+/));\n}\n/**\n * Allow NodeJS/NextJS/etc to set the initial state through process.env variable\n * Note:  we don't assume 'process' is available in all runtime environments\n *\n * @see https://github.com/facebookexperimental/Recoil/issues/733\n */ function applyProcessEnvFlagOverrides() {\n    var _process;\n    // note: this check is needed in addition to the check below, runtime error will occur without it!\n    // eslint-disable-next-line fb-www/typeof-undefined\n    if (typeof process === \"undefined\") {\n        return;\n    }\n    if (((_process = process) === null || process === void 0 ? void 0 : process.env) == null) {\n        return;\n    }\n    readProcessEnvBooleanFlag(\"RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED\", (value)=>{\n        env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED = value;\n    });\n    readProcessEnvStringArrayFlag(\"RECOIL_GKS_ENABLED\", (value)=>{\n        value.forEach((gk)=>{\n            env.RECOIL_GKS_ENABLED.add(gk);\n        });\n    });\n}\napplyProcessEnvFlagOverrides();\nvar Recoil_RecoilEnv = env;\nfunction Recoil_gkx_OSS(gk) {\n    return Recoil_RecoilEnv.RECOIL_GKS_ENABLED.has(gk);\n}\n_c = Recoil_gkx_OSS;\nRecoil_gkx_OSS.setPass = (gk)=>{\n    Recoil_RecoilEnv.RECOIL_GKS_ENABLED.add(gk);\n};\nRecoil_gkx_OSS.setFail = (gk)=>{\n    Recoil_RecoilEnv.RECOIL_GKS_ENABLED.delete(gk);\n};\nRecoil_gkx_OSS.clear = ()=>{\n    Recoil_RecoilEnv.RECOIL_GKS_ENABLED.clear();\n};\nvar Recoil_gkx = Recoil_gkx_OSS; // @oss-only\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ function recoverableViolation(message, _projectName) {\n    let { error } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    if (true) {\n        console.error(message, error);\n    }\n    return null;\n}\nvar recoverableViolation_1 = recoverableViolation;\n// @oss-only\nvar Recoil_recoverableViolation = recoverableViolation_1;\nvar _createMutableSource, _useMutableSource, _useSyncExternalStore;\nconst createMutableSource = (_createMutableSource = (react__WEBPACK_IMPORTED_MODULE_0___default().createMutableSource)) !== null && _createMutableSource !== void 0 ? _createMutableSource : (react__WEBPACK_IMPORTED_MODULE_0___default().unstable_createMutableSource);\nconst useMutableSource = (_useMutableSource = (react__WEBPACK_IMPORTED_MODULE_0___default().useMutableSource)) !== null && _useMutableSource !== void 0 ? _useMutableSource : (react__WEBPACK_IMPORTED_MODULE_0___default().unstable_useMutableSource); // https://github.com/reactwg/react-18/discussions/86\nconst useSyncExternalStore = (_useSyncExternalStore = (react__WEBPACK_IMPORTED_MODULE_0___default().useSyncExternalStore)) !== null && _useSyncExternalStore !== void 0 ? _useSyncExternalStore : (react__WEBPACK_IMPORTED_MODULE_0___default().unstable_useSyncExternalStore);\nlet ReactRendererVersionMismatchWarnOnce = false; // Check if the current renderer supports `useSyncExternalStore()`.\n// Since React goes through a proxy dispatcher and the current renderer can\n// change we can't simply check if `React.useSyncExternalStore()` is defined.\nfunction currentRendererSupportsUseSyncExternalStore() {\n    var _ReactCurrentDispatch;\n    // $FlowFixMe[incompatible-use]\n    const { ReactCurrentDispatcher, ReactCurrentOwner } = /* $FlowFixMe[prop-missing] This workaround was approved as a safer mechanism\n   * to detect if the current renderer supports useSyncExternalStore()\n   * https://fb.workplace.com/groups/reactjs/posts/9558682330846963/ */ (react__WEBPACK_IMPORTED_MODULE_0___default().__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\n    const dispatcher = (_ReactCurrentDispatch = ReactCurrentDispatcher === null || ReactCurrentDispatcher === void 0 ? void 0 : ReactCurrentDispatcher.current) !== null && _ReactCurrentDispatch !== void 0 ? _ReactCurrentDispatch : ReactCurrentOwner.currentDispatcher;\n    const isUseSyncExternalStoreSupported = dispatcher.useSyncExternalStore != null;\n    if (useSyncExternalStore && !isUseSyncExternalStoreSupported && !ReactRendererVersionMismatchWarnOnce) {\n        ReactRendererVersionMismatchWarnOnce = true;\n        Recoil_recoverableViolation(\"A React renderer without React 18+ API support is being used with React 18+.\");\n    }\n    return isUseSyncExternalStoreSupported;\n}\n/**\n * mode: The React API and approach to use for syncing state with React\n * early: Re-renders from Recoil updates occur:\n *    1) earlier\n *    2) in sync with React updates in the same batch\n *    3) before transaction observers instead of after.\n * concurrent: Is the current mode compatible with Concurrent Mode and useTransition()\n */ function reactMode() {\n    // NOTE: This mode is currently broken with some Suspense cases\n    // see Recoil_selector-test.js\n    if (Recoil_gkx(\"recoil_transition_support\")) {\n        return {\n            mode: \"TRANSITION_SUPPORT\",\n            early: true,\n            concurrent: true\n        };\n    }\n    if (Recoil_gkx(\"recoil_sync_external_store\") && useSyncExternalStore != null) {\n        return {\n            mode: \"SYNC_EXTERNAL_STORE\",\n            early: true,\n            concurrent: false\n        };\n    }\n    if (Recoil_gkx(\"recoil_mutable_source\") && useMutableSource != null && \"object\" !== \"undefined\" && !window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE) {\n        return Recoil_gkx(\"recoil_suppress_rerender_in_callback\") ? {\n            mode: \"MUTABLE_SOURCE\",\n            early: true,\n            concurrent: true\n        } : {\n            mode: \"MUTABLE_SOURCE\",\n            early: false,\n            concurrent: false\n        };\n    }\n    return Recoil_gkx(\"recoil_suppress_rerender_in_callback\") ? {\n        mode: \"LEGACY\",\n        early: true,\n        concurrent: false\n    } : {\n        mode: \"LEGACY\",\n        early: false,\n        concurrent: false\n    };\n} // TODO Need to figure out if there is a standard/open-source equivalent to see if hot module replacement is happening:\nfunction isFastRefreshEnabled() {\n    // @fb-only: const {isAcceptingUpdate} = require('__debug');\n    // @fb-only: return typeof isAcceptingUpdate === 'function' && isAcceptingUpdate();\n    return false; // @oss-only\n}\nvar Recoil_ReactMode = {\n    createMutableSource,\n    useMutableSource,\n    useSyncExternalStore,\n    currentRendererSupportsUseSyncExternalStore,\n    reactMode,\n    isFastRefreshEnabled\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ // eslint-disable-next-line no-unused-vars\nclass AbstractRecoilValue {\n    toJSON() {\n        return {\n            key: this.key\n        };\n    }\n    constructor(newKey){\n        _defineProperty(this, \"key\", void 0);\n        this.key = newKey;\n    }\n}\nclass RecoilState extends AbstractRecoilValue {\n}\nclass RecoilValueReadOnly extends AbstractRecoilValue {\n}\nfunction isRecoilValue(x) {\n    return x instanceof RecoilState || x instanceof RecoilValueReadOnly;\n}\nvar Recoil_RecoilValue = {\n    AbstractRecoilValue,\n    RecoilState,\n    RecoilValueReadOnly,\n    isRecoilValue\n};\nvar Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;\nvar Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;\nvar Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;\nvar Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;\nvar Recoil_RecoilValue$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AbstractRecoilValue: Recoil_RecoilValue_1,\n    RecoilState: Recoil_RecoilValue_2,\n    RecoilValueReadOnly: Recoil_RecoilValue_3,\n    isRecoilValue: Recoil_RecoilValue_4\n});\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ function sprintf(format) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    let index = 0;\n    return format.replace(/%s/g, ()=>String(args[index++]));\n}\nvar sprintf_1 = sprintf;\nfunction expectationViolation(format) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    if (true) {\n        const message = sprintf_1.call(null, format, ...args);\n        const error = new Error(message);\n        error.name = \"Expectation Violation\";\n        console.error(error);\n    }\n}\nvar expectationViolation_1 = expectationViolation;\n// @oss-only\nvar Recoil_expectationViolation = expectationViolation_1;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * Creates a new iterable whose output is generated by passing the input\n * iterable's values through the mapper function.\n */ function mapIterable(iterable, callback) {\n    // Use generator to create iterable/iterator\n    return function*() {\n        let index = 0;\n        for (const value of iterable){\n            yield callback(value, index++);\n        }\n    }();\n}\nvar Recoil_mapIterable = mapIterable;\nconst { isFastRefreshEnabled: isFastRefreshEnabled$1 } = Recoil_ReactMode;\nclass DefaultValue {\n}\nconst DEFAULT_VALUE = new DefaultValue();\n// flowlint-next-line unclear-type:off\nconst nodes = new Map(); // flowlint-next-line unclear-type:off\nconst recoilValues = new Map();\n/* eslint-disable no-redeclare */ function recoilValuesForKeys(keys) {\n    return Recoil_mapIterable(keys, (key)=>Recoil_nullthrows(recoilValues.get(key)));\n}\nfunction checkForDuplicateAtomKey(key) {\n    if (nodes.has(key)) {\n        const message = 'Duplicate atom key \"'.concat(key, '\". This is a FATAL ERROR in\\n      production. But it is safe to ignore this warning if it occurred because of\\n      hot module replacement.');\n        if (true) {\n            // TODO Figure this out for open-source\n            if (!isFastRefreshEnabled$1()) {\n                Recoil_expectationViolation(message, \"recoil\");\n            }\n        } else {}\n    }\n}\nfunction registerNode(node) {\n    if (Recoil_RecoilEnv.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED) {\n        checkForDuplicateAtomKey(node.key);\n    }\n    nodes.set(node.key, node);\n    const recoilValue = node.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node.key) : new Recoil_RecoilValue$1.RecoilState(node.key);\n    recoilValues.set(node.key, recoilValue);\n    return recoilValue;\n}\n/* eslint-enable no-redeclare */ class NodeMissingError extends Error {\n} // flowlint-next-line unclear-type:off\nfunction getNode(key) {\n    const node = nodes.get(key);\n    if (node == null) {\n        throw new NodeMissingError('Missing definition for RecoilValue: \"'.concat(key, '\"\"'));\n    }\n    return node;\n} // flowlint-next-line unclear-type:off\nfunction getNodeMaybe(key) {\n    return nodes.get(key);\n}\nconst configDeletionHandlers = new Map();\nfunction deleteNodeConfigIfPossible(key) {\n    var _node$shouldDeleteCon;\n    if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        return;\n    }\n    const node = nodes.get(key);\n    if (node !== null && node !== void 0 && (_node$shouldDeleteCon = node.shouldDeleteConfigOnRelease) !== null && _node$shouldDeleteCon !== void 0 && _node$shouldDeleteCon.call(node)) {\n        var _getConfigDeletionHan;\n        nodes.delete(key);\n        (_getConfigDeletionHan = getConfigDeletionHandler(key)) === null || _getConfigDeletionHan === void 0 ? void 0 : _getConfigDeletionHan();\n        configDeletionHandlers.delete(key);\n    }\n}\nfunction setConfigDeletionHandler(key, fn) {\n    if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        return;\n    }\n    if (fn === undefined) {\n        configDeletionHandlers.delete(key);\n    } else {\n        configDeletionHandlers.set(key, fn);\n    }\n}\nfunction getConfigDeletionHandler(key) {\n    return configDeletionHandlers.get(key);\n}\nvar Recoil_Node = {\n    nodes,\n    recoilValues,\n    registerNode,\n    getNode,\n    getNodeMaybe,\n    deleteNodeConfigIfPossible,\n    setConfigDeletionHandler,\n    getConfigDeletionHandler,\n    recoilValuesForKeys,\n    NodeMissingError,\n    DefaultValue,\n    DEFAULT_VALUE\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ function enqueueExecution(s, f) {\n    f();\n}\nvar Recoil_Queue = {\n    enqueueExecution\n};\nfunction createCommonjsModule(fn, module) {\n    return module = {\n        exports: {}\n    }, fn(module, module.exports), module.exports;\n}\nvar hamt_1 = createCommonjsModule(function(module) {\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n    /**\n    @fileOverview Hash Array Mapped Trie.\n\n    Code based on: https://github.com/exclipy/pdata\n*/ var hamt = {}; // export\n    /* Configuration\n ******************************************************************************/ var SIZE = 5;\n    var BUCKET_SIZE = Math.pow(2, SIZE);\n    var MASK = BUCKET_SIZE - 1;\n    var MAX_INDEX_NODE = BUCKET_SIZE / 2;\n    var MIN_ARRAY_NODE = BUCKET_SIZE / 4;\n    /*\n ******************************************************************************/ var nothing = {};\n    var constant = function constant(x) {\n        return function() {\n            return x;\n        };\n    };\n    /**\n    Get 32 bit hash of string.\n\n    Based on:\n    http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n*/ var hash = hamt.hash = function(str) {\n        var type = typeof str === \"undefined\" ? \"undefined\" : _typeof(str);\n        if (type === \"number\") return str;\n        if (type !== \"string\") str += \"\";\n        var hash = 0;\n        for(var i = 0, len = str.length; i < len; ++i){\n            var c = str.charCodeAt(i);\n            hash = (hash << 5) - hash + c | 0;\n        }\n        return hash;\n    };\n    /* Bit Ops\n ******************************************************************************/ /**\n    Hamming weight.\n\n    Taken from: http://jsperf.com/hamming-weight\n*/ var popcount = function popcount(x) {\n        x -= x >> 1 & 0x55555555;\n        x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n        x = x + (x >> 4) & 0x0f0f0f0f;\n        x += x >> 8;\n        x += x >> 16;\n        return x & 0x7f;\n    };\n    var hashFragment = function hashFragment(shift, h) {\n        return h >>> shift & MASK;\n    };\n    var toBitmap = function toBitmap(x) {\n        return 1 << x;\n    };\n    var fromBitmap = function fromBitmap(bitmap, bit) {\n        return popcount(bitmap & bit - 1);\n    };\n    /* Array Ops\n ******************************************************************************/ /**\n    Set a value in an array.\n\n    @param mutate Should the input array be mutated?\n    @param at Index to change.\n    @param v New value\n    @param arr Array.\n*/ var arrayUpdate = function arrayUpdate(mutate, at, v, arr) {\n        var out = arr;\n        if (!mutate) {\n            var len = arr.length;\n            out = new Array(len);\n            for(var i = 0; i < len; ++i){\n                out[i] = arr[i];\n            }\n        }\n        out[at] = v;\n        return out;\n    };\n    /**\n    Remove a value from an array.\n\n    @param mutate Should the input array be mutated?\n    @param at Index to remove.\n    @param arr Array.\n*/ var arraySpliceOut = function arraySpliceOut(mutate, at, arr) {\n        var newLen = arr.length - 1;\n        var i = 0;\n        var g = 0;\n        var out = arr;\n        if (mutate) {\n            i = g = at;\n        } else {\n            out = new Array(newLen);\n            while(i < at){\n                out[g++] = arr[i++];\n            }\n        }\n        ++i;\n        while(i <= newLen){\n            out[g++] = arr[i++];\n        }\n        if (mutate) {\n            out.length = newLen;\n        }\n        return out;\n    };\n    /**\n    Insert a value into an array.\n\n    @param mutate Should the input array be mutated?\n    @param at Index to insert at.\n    @param v Value to insert,\n    @param arr Array.\n*/ var arraySpliceIn = function arraySpliceIn(mutate, at, v, arr) {\n        var len = arr.length;\n        if (mutate) {\n            var _i = len;\n            while(_i >= at){\n                arr[_i--] = arr[_i];\n            }\n            arr[at] = v;\n            return arr;\n        }\n        var i = 0, g = 0;\n        var out = new Array(len + 1);\n        while(i < at){\n            out[g++] = arr[i++];\n        }\n        out[at] = v;\n        while(i < len){\n            out[++g] = arr[i++];\n        }\n        return out;\n    };\n    /* Node Structures\n ******************************************************************************/ var LEAF = 1;\n    var COLLISION = 2;\n    var INDEX = 3;\n    var ARRAY = 4;\n    /**\n    Empty node.\n*/ var empty = {\n        __hamt_isEmpty: true\n    };\n    var isEmptyNode = function isEmptyNode(x) {\n        return x === empty || x && x.__hamt_isEmpty;\n    };\n    /**\n    Leaf holding a value.\n\n    @member edit Edit of the node.\n    @member hash Hash of key.\n    @member key Key.\n    @member value Value stored.\n*/ var Leaf = function Leaf(edit, hash, key, value) {\n        return {\n            type: LEAF,\n            edit: edit,\n            hash: hash,\n            key: key,\n            value: value,\n            _modify: Leaf__modify\n        };\n    };\n    /**\n    Leaf holding multiple values with the same hash but different keys.\n\n    @member edit Edit of the node.\n    @member hash Hash of key.\n    @member children Array of collision children node.\n*/ var Collision = function Collision(edit, hash, children) {\n        return {\n            type: COLLISION,\n            edit: edit,\n            hash: hash,\n            children: children,\n            _modify: Collision__modify\n        };\n    };\n    /**\n    Internal node with a sparse set of children.\n\n    Uses a bitmap and array to pack children.\n\n  @member edit Edit of the node.\n    @member mask Bitmap that encode the positions of children in the array.\n    @member children Array of child nodes.\n*/ var IndexedNode = function IndexedNode(edit, mask, children) {\n        return {\n            type: INDEX,\n            edit: edit,\n            mask: mask,\n            children: children,\n            _modify: IndexedNode__modify\n        };\n    };\n    /**\n    Internal node with many children.\n\n    @member edit Edit of the node.\n    @member size Number of children.\n    @member children Array of child nodes.\n*/ var ArrayNode = function ArrayNode(edit, size, children) {\n        return {\n            type: ARRAY,\n            edit: edit,\n            size: size,\n            children: children,\n            _modify: ArrayNode__modify\n        };\n    };\n    /**\n    Is `node` a leaf node?\n*/ var isLeaf = function isLeaf(node) {\n        return node === empty || node.type === LEAF || node.type === COLLISION;\n    };\n    /* Internal node operations.\n ******************************************************************************/ /**\n    Expand an indexed node into an array node.\n\n  @param edit Current edit.\n    @param frag Index of added child.\n    @param child Added child.\n    @param mask Index node mask before child added.\n    @param subNodes Index node children before child added.\n*/ var expand = function expand(edit, frag, child, bitmap, subNodes) {\n        var arr = [];\n        var bit = bitmap;\n        var count = 0;\n        for(var i = 0; bit; ++i){\n            if (bit & 1) arr[i] = subNodes[count++];\n            bit >>>= 1;\n        }\n        arr[frag] = child;\n        return ArrayNode(edit, count + 1, arr);\n    };\n    /**\n    Collapse an array node into a indexed node.\n\n  @param edit Current edit.\n    @param count Number of elements in new array.\n    @param removed Index of removed element.\n    @param elements Array node children before remove.\n*/ var pack = function pack(edit, count, removed, elements) {\n        var children = new Array(count - 1);\n        var g = 0;\n        var bitmap = 0;\n        for(var i = 0, len = elements.length; i < len; ++i){\n            if (i !== removed) {\n                var elem = elements[i];\n                if (elem && !isEmptyNode(elem)) {\n                    children[g++] = elem;\n                    bitmap |= 1 << i;\n                }\n            }\n        }\n        return IndexedNode(edit, bitmap, children);\n    };\n    /**\n    Merge two leaf nodes.\n\n    @param shift Current shift.\n    @param h1 Node 1 hash.\n    @param n1 Node 1.\n    @param h2 Node 2 hash.\n    @param n2 Node 2.\n*/ var mergeLeaves = function mergeLeaves(edit, shift, h1, n1, h2, n2) {\n        if (h1 === h2) return Collision(edit, h1, [\n            n2,\n            n1\n        ]);\n        var subH1 = hashFragment(shift, h1);\n        var subH2 = hashFragment(shift, h2);\n        return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [\n            mergeLeaves(edit, shift + SIZE, h1, n1, h2, n2)\n        ] : subH1 < subH2 ? [\n            n1,\n            n2\n        ] : [\n            n2,\n            n1\n        ]);\n    };\n    /**\n    Update an entry in a collision list.\n\n    @param mutate Should mutation be used?\n    @param edit Current edit.\n    @param keyEq Key compare function.\n    @param hash Hash of collision.\n    @param list Collision list.\n    @param f Update function.\n    @param k Key to update.\n    @param size Size ref.\n*/ var updateCollisionList = function updateCollisionList(mutate, edit, keyEq, h, list, f, k, size) {\n        var len = list.length;\n        for(var i = 0; i < len; ++i){\n            var child = list[i];\n            if (keyEq(k, child.key)) {\n                var value = child.value;\n                var _newValue = f(value);\n                if (_newValue === value) return list;\n                if (_newValue === nothing) {\n                    --size.value;\n                    return arraySpliceOut(mutate, i, list);\n                }\n                return arrayUpdate(mutate, i, Leaf(edit, h, k, _newValue), list);\n            }\n        }\n        var newValue = f();\n        if (newValue === nothing) return list;\n        ++size.value;\n        return arrayUpdate(mutate, len, Leaf(edit, h, k, newValue), list);\n    };\n    var canEditNode = function canEditNode(edit, node) {\n        return edit === node.edit;\n    };\n    /* Editing\n ******************************************************************************/ var Leaf__modify = function Leaf__modify(edit, keyEq, shift, f, h, k, size) {\n        if (keyEq(k, this.key)) {\n            var _v = f(this.value);\n            if (_v === this.value) return this;\n            else if (_v === nothing) {\n                --size.value;\n                return empty;\n            }\n            if (canEditNode(edit, this)) {\n                this.value = _v;\n                return this;\n            }\n            return Leaf(edit, h, k, _v);\n        }\n        var v = f();\n        if (v === nothing) return this;\n        ++size.value;\n        return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));\n    };\n    var Collision__modify = function Collision__modify(edit, keyEq, shift, f, h, k, size) {\n        if (h === this.hash) {\n            var canEdit = canEditNode(edit, this);\n            var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);\n            if (list === this.children) return this;\n            return list.length > 1 ? Collision(edit, this.hash, list) : list[0]; // collapse single element collision list\n        }\n        var v = f();\n        if (v === nothing) return this;\n        ++size.value;\n        return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));\n    };\n    var IndexedNode__modify = function IndexedNode__modify(edit, keyEq, shift, f, h, k, size) {\n        var mask = this.mask;\n        var children = this.children;\n        var frag = hashFragment(shift, h);\n        var bit = toBitmap(frag);\n        var indx = fromBitmap(mask, bit);\n        var exists = mask & bit;\n        var current = exists ? children[indx] : empty;\n        var child = current._modify(edit, keyEq, shift + SIZE, f, h, k, size);\n        if (current === child) return this;\n        var canEdit = canEditNode(edit, this);\n        var bitmap = mask;\n        var newChildren = void 0;\n        if (exists && isEmptyNode(child)) {\n            // remove\n            bitmap &= ~bit;\n            if (!bitmap) return empty;\n            if (children.length <= 2 && isLeaf(children[indx ^ 1])) return children[indx ^ 1]; // collapse\n            newChildren = arraySpliceOut(canEdit, indx, children);\n        } else if (!exists && !isEmptyNode(child)) {\n            // add\n            if (children.length >= MAX_INDEX_NODE) return expand(edit, frag, child, mask, children);\n            bitmap |= bit;\n            newChildren = arraySpliceIn(canEdit, indx, child, children);\n        } else {\n            // modify\n            newChildren = arrayUpdate(canEdit, indx, child, children);\n        }\n        if (canEdit) {\n            this.mask = bitmap;\n            this.children = newChildren;\n            return this;\n        }\n        return IndexedNode(edit, bitmap, newChildren);\n    };\n    var ArrayNode__modify = function ArrayNode__modify(edit, keyEq, shift, f, h, k, size) {\n        var count = this.size;\n        var children = this.children;\n        var frag = hashFragment(shift, h);\n        var child = children[frag];\n        var newChild = (child || empty)._modify(edit, keyEq, shift + SIZE, f, h, k, size);\n        if (child === newChild) return this;\n        var canEdit = canEditNode(edit, this);\n        var newChildren = void 0;\n        if (isEmptyNode(child) && !isEmptyNode(newChild)) {\n            // add\n            ++count;\n            newChildren = arrayUpdate(canEdit, frag, newChild, children);\n        } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {\n            // remove\n            --count;\n            if (count <= MIN_ARRAY_NODE) return pack(edit, count, frag, children);\n            newChildren = arrayUpdate(canEdit, frag, empty, children);\n        } else {\n            // modify\n            newChildren = arrayUpdate(canEdit, frag, newChild, children);\n        }\n        if (canEdit) {\n            this.size = count;\n            this.children = newChildren;\n            return this;\n        }\n        return ArrayNode(edit, count, newChildren);\n    };\n    empty._modify = function(edit, keyEq, shift, f, h, k, size) {\n        var v = f();\n        if (v === nothing) return empty;\n        ++size.value;\n        return Leaf(edit, h, k, v);\n    };\n    /*\n ******************************************************************************/ function Map1(editable, edit, config, root, size) {\n        this._editable = editable;\n        this._edit = edit;\n        this._config = config;\n        this._root = root;\n        this._size = size;\n    }\n    Map1.prototype.setTree = function(newRoot, newSize) {\n        if (this._editable) {\n            this._root = newRoot;\n            this._size = newSize;\n            return this;\n        }\n        return newRoot === this._root ? this : new Map1(this._editable, this._edit, this._config, newRoot, newSize);\n    };\n    /* Queries\n ******************************************************************************/ /**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `alt` if none.\n*/ var tryGetHash = hamt.tryGetHash = function(alt, hash, key, map) {\n        var node = map._root;\n        var shift = 0;\n        var keyEq = map._config.keyEq;\n        while(true){\n            switch(node.type){\n                case LEAF:\n                    {\n                        return keyEq(key, node.key) ? node.value : alt;\n                    }\n                case COLLISION:\n                    {\n                        if (hash === node.hash) {\n                            var children = node.children;\n                            for(var i = 0, len = children.length; i < len; ++i){\n                                var child = children[i];\n                                if (keyEq(key, child.key)) return child.value;\n                            }\n                        }\n                        return alt;\n                    }\n                case INDEX:\n                    {\n                        var frag = hashFragment(shift, hash);\n                        var bit = toBitmap(frag);\n                        if (node.mask & bit) {\n                            node = node.children[fromBitmap(node.mask, bit)];\n                            shift += SIZE;\n                            break;\n                        }\n                        return alt;\n                    }\n                case ARRAY:\n                    {\n                        node = node.children[hashFragment(shift, hash)];\n                        if (node) {\n                            shift += SIZE;\n                            break;\n                        }\n                        return alt;\n                    }\n                default:\n                    return alt;\n            }\n        }\n    };\n    Map1.prototype.tryGetHash = function(alt, hash, key) {\n        return tryGetHash(alt, hash, key, this);\n    };\n    /**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `tryGetHash`\n*/ var tryGet = hamt.tryGet = function(alt, key, map) {\n        return tryGetHash(alt, map._config.hash(key), key, map);\n    };\n    Map1.prototype.tryGet = function(alt, key) {\n        return tryGet(alt, key, this);\n    };\n    /**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `undefined` if none.\n*/ var getHash = hamt.getHash = function(hash, key, map) {\n        return tryGetHash(undefined, hash, key, map);\n    };\n    Map1.prototype.getHash = function(hash, key) {\n        return getHash(hash, key, this);\n    };\n    /**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `get`\n*/ var get = hamt.get = function(key, map) {\n        return tryGetHash(undefined, map._config.hash(key), key, map);\n    };\n    Map1.prototype.get = function(key, alt) {\n        return tryGet(alt, key, this);\n    };\n    /**\n    Does an entry exist for `key` in `map`? Uses custom `hash`.\n*/ var hasHash = hamt.has = function(hash, key, map) {\n        return tryGetHash(nothing, hash, key, map) !== nothing;\n    };\n    Map1.prototype.hasHash = function(hash, key) {\n        return hasHash(hash, key, this);\n    };\n    /**\n    Does an entry exist for `key` in `map`? Uses internal hash function.\n*/ var has = hamt.has = function(key, map) {\n        return hasHash(map._config.hash(key), key, map);\n    };\n    Map1.prototype.has = function(key) {\n        return has(key, this);\n    };\n    var defKeyCompare = function defKeyCompare(x, y) {\n        return x === y;\n    };\n    /**\n    Create an empty map.\n\n    @param config Configuration.\n*/ hamt.make = function(config) {\n        return new Map1(0, 0, {\n            keyEq: config && config.keyEq || defKeyCompare,\n            hash: config && config.hash || hash\n        }, empty, 0);\n    };\n    /**\n    Empty map.\n*/ hamt.empty = hamt.make();\n    /**\n    Does `map` contain any elements?\n*/ var isEmpty = hamt.isEmpty = function(map) {\n        return map && !!isEmptyNode(map._root);\n    };\n    Map1.prototype.isEmpty = function() {\n        return isEmpty(this);\n    };\n    /* Updates\n ******************************************************************************/ /**\n    Alter the value stored for `key` in `map` using function `f` using\n    custom hash.\n\n    `f` is invoked with the current value for `k` if it exists,\n    or no arguments if no such value exists. `modify` will always either\n    update or insert a value into the map.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/ var modifyHash = hamt.modifyHash = function(f, hash, key, map) {\n        var size = {\n            value: map._size\n        };\n        var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash, key, size);\n        return map.setTree(newRoot, size.value);\n    };\n    Map1.prototype.modifyHash = function(hash, key, f) {\n        return modifyHash(f, hash, key, this);\n    };\n    /**\n    Alter the value stored for `key` in `map` using function `f` using\n    internal hash function.\n\n    @see `modifyHash`\n*/ var modify = hamt.modify = function(f, key, map) {\n        return modifyHash(f, map._config.hash(key), key, map);\n    };\n    Map1.prototype.modify = function(key, f) {\n        return modify(f, key, this);\n    };\n    /**\n    Store `value` for `key` in `map` using custom `hash`.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/ var setHash = hamt.setHash = function(hash, key, value, map) {\n        return modifyHash(constant(value), hash, key, map);\n    };\n    Map1.prototype.setHash = function(hash, key, value) {\n        return setHash(hash, key, value, this);\n    };\n    /**\n    Store `value` for `key` in `map` using internal hash function.\n\n    @see `setHash`\n*/ var set = hamt.set = function(key, value, map) {\n        return setHash(map._config.hash(key), key, value, map);\n    };\n    Map1.prototype.set = function(key, value) {\n        return set(key, value, this);\n    };\n    /**\n    Remove the entry for `key` in `map`.\n\n    Returns a map with the value removed. Does not alter `map`.\n*/ var del = constant(nothing);\n    var removeHash = hamt.removeHash = function(hash, key, map) {\n        return modifyHash(del, hash, key, map);\n    };\n    Map1.prototype.removeHash = Map1.prototype.deleteHash = function(hash, key) {\n        return removeHash(hash, key, this);\n    };\n    /**\n    Remove the entry for `key` in `map` using internal hash function.\n\n    @see `removeHash`\n*/ var remove = hamt.remove = function(key, map) {\n        return removeHash(map._config.hash(key), key, map);\n    };\n    Map1.prototype.remove = Map1.prototype.delete = function(key) {\n        return remove(key, this);\n    };\n    /* Mutation\n ******************************************************************************/ /**\n    Mark `map` as mutable.\n */ var beginMutation = hamt.beginMutation = function(map) {\n        return new Map1(map._editable + 1, map._edit + 1, map._config, map._root, map._size);\n    };\n    Map1.prototype.beginMutation = function() {\n        return beginMutation(this);\n    };\n    /**\n    Mark `map` as immutable.\n */ var endMutation = hamt.endMutation = function(map) {\n        map._editable = map._editable && map._editable - 1;\n        return map;\n    };\n    Map1.prototype.endMutation = function() {\n        return endMutation(this);\n    };\n    /**\n    Mutate `map` within the context of `f`.\n    @param f\n    @param map HAMT\n*/ var mutate = hamt.mutate = function(f, map) {\n        var transient = beginMutation(map);\n        f(transient);\n        return endMutation(transient);\n    };\n    Map1.prototype.mutate = function(f) {\n        return mutate(f, this);\n    };\n    /* Traversal\n ******************************************************************************/ /**\n    Apply a continuation.\n*/ var appk = function appk(k) {\n        return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);\n    };\n    /**\n    Recursively visit all values stored in an array of nodes lazily.\n*/ var lazyVisitChildren = function lazyVisitChildren(len, children, i, f, k) {\n        while(i < len){\n            var child = children[i++];\n            if (child && !isEmptyNode(child)) return lazyVisit(child, f, [\n                len,\n                children,\n                i,\n                f,\n                k\n            ]);\n        }\n        return appk(k);\n    };\n    /**\n    Recursively visit all values stored in `node` lazily.\n*/ var lazyVisit = function lazyVisit(node, f, k) {\n        switch(node.type){\n            case LEAF:\n                return {\n                    value: f(node),\n                    rest: k\n                };\n            case COLLISION:\n            case ARRAY:\n            case INDEX:\n                var children = node.children;\n                return lazyVisitChildren(children.length, children, 0, f, k);\n            default:\n                return appk(k);\n        }\n    };\n    var DONE = {\n        done: true\n    };\n    /**\n    Javascript iterator over a map.\n*/ function MapIterator(v) {\n        this.v = v;\n    }\n    MapIterator.prototype.next = function() {\n        if (!this.v) return DONE;\n        var v0 = this.v;\n        this.v = appk(v0.rest);\n        return v0;\n    };\n    MapIterator.prototype[Symbol.iterator] = function() {\n        return this;\n    };\n    /**\n    Lazily visit each value in map with function `f`.\n*/ var visit = function visit(map, f) {\n        return new MapIterator(lazyVisit(map._root, f));\n    };\n    /**\n    Get a Javascsript iterator of `map`.\n\n    Iterates over `[key, value]` arrays.\n*/ var buildPairs = function buildPairs(x) {\n        return [\n            x.key,\n            x.value\n        ];\n    };\n    var entries = hamt.entries = function(map) {\n        return visit(map, buildPairs);\n    };\n    Map1.prototype.entries = Map1.prototype[Symbol.iterator] = function() {\n        return entries(this);\n    };\n    /**\n    Get array of all keys in `map`.\n\n    Order is not guaranteed.\n*/ var buildKeys = function buildKeys(x) {\n        return x.key;\n    };\n    var keys = hamt.keys = function(map) {\n        return visit(map, buildKeys);\n    };\n    Map1.prototype.keys = function() {\n        return keys(this);\n    };\n    /**\n    Get array of all values in `map`.\n\n    Order is not guaranteed, duplicates are preserved.\n*/ var buildValues = function buildValues(x) {\n        return x.value;\n    };\n    var values = hamt.values = Map1.prototype.values = function(map) {\n        return visit(map, buildValues);\n    };\n    Map1.prototype.values = function() {\n        return values(this);\n    };\n    /* Fold\n ******************************************************************************/ /**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function mapping accumulated value, value, and key to new value.\n    @param z Starting value.\n    @param m HAMT\n*/ var fold = hamt.fold = function(f, z, m) {\n        var root = m._root;\n        if (root.type === LEAF) return f(z, root.value, root.key);\n        var toVisit = [\n            root.children\n        ];\n        var children = void 0;\n        while(children = toVisit.pop()){\n            for(var i = 0, len = children.length; i < len;){\n                var child = children[i++];\n                if (child && child.type) {\n                    if (child.type === LEAF) z = f(z, child.value, child.key);\n                    else toVisit.push(child.children);\n                }\n            }\n        }\n        return z;\n    };\n    Map1.prototype.fold = function(f, z) {\n        return fold(f, z, this);\n    };\n    /**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function invoked with value and key\n    @param map HAMT\n*/ var forEach = hamt.forEach = function(f, map) {\n        return fold(function(_, value, key) {\n            return f(value, key, map);\n        }, null, map);\n    };\n    Map1.prototype.forEach = function(f) {\n        return forEach(f, this);\n    };\n    /* Aggregate\n ******************************************************************************/ /**\n    Get the number of entries in `map`.\n*/ var count = hamt.count = function(map) {\n        return map._size;\n    };\n    Map1.prototype.count = function() {\n        return count(this);\n    };\n    Object.defineProperty(Map1.prototype, \"size\", {\n        get: Map1.prototype.count\n    });\n    /* Export\n ******************************************************************************/ if (module.exports) {\n        module.exports = hamt;\n    } else {\n        undefined.hamt = hamt;\n    }\n});\nclass BuiltInMap {\n    keys() {\n        return this._map.keys();\n    }\n    entries() {\n        return this._map.entries();\n    }\n    get(k) {\n        return this._map.get(k);\n    }\n    has(k) {\n        return this._map.has(k);\n    }\n    set(k, v) {\n        this._map.set(k, v);\n        return this;\n    }\n    delete(k) {\n        this._map.delete(k);\n        return this;\n    }\n    clone() {\n        return persistentMap(this);\n    }\n    toMap() {\n        return new Map(this._map);\n    }\n    constructor(existing){\n        _defineProperty(this, \"_map\", void 0);\n        this._map = new Map(existing === null || existing === void 0 ? void 0 : existing.entries());\n    }\n}\nclass HashArrayMappedTrieMap {\n    keys() {\n        return this._hamt.keys();\n    }\n    entries() {\n        return this._hamt.entries();\n    }\n    get(k) {\n        return this._hamt.get(k);\n    }\n    has(k) {\n        return this._hamt.has(k);\n    }\n    set(k, v) {\n        this._hamt.set(k, v);\n        return this;\n    }\n    delete(k) {\n        this._hamt.delete(k);\n        return this;\n    }\n    clone() {\n        return persistentMap(this);\n    }\n    toMap() {\n        return new Map(this._hamt);\n    }\n    // Because hamt.empty is not a function there is no way to introduce type\n    // parameters on it, so empty is typed as HAMTPlusMap<string, mixed>.\n    // $FlowIssue\n    constructor(existing){\n        _defineProperty(this, \"_hamt\", hamt_1.empty.beginMutation());\n        if (existing instanceof HashArrayMappedTrieMap) {\n            const h = existing._hamt.endMutation();\n            existing._hamt = h.beginMutation();\n            this._hamt = h.beginMutation();\n        } else if (existing) {\n            for (const [k, v] of existing.entries()){\n                this._hamt.set(k, v);\n            }\n        }\n    }\n}\nfunction persistentMap(existing) {\n    if (Recoil_gkx(\"recoil_hamt_2020\")) {\n        return new HashArrayMappedTrieMap(existing);\n    } else {\n        return new BuiltInMap(existing);\n    }\n}\nvar Recoil_PersistentMap = {\n    persistentMap\n};\nvar Recoil_PersistentMap_1 = Recoil_PersistentMap.persistentMap;\nvar Recoil_PersistentMap$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    persistentMap: Recoil_PersistentMap_1\n});\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * Returns a set containing all of the values from the first set that are not\n * present in any of the subsequent sets.\n *\n * Note: this is written procedurally (i.e., without filterSet) for performant\n * use in tight loops.\n */ function differenceSets(set) {\n    for(var _len = arguments.length, setsWithValuesToRemove = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        setsWithValuesToRemove[_key - 1] = arguments[_key];\n    }\n    const ret = new Set();\n    FIRST: for (const value of set){\n        for (const otherSet of setsWithValuesToRemove){\n            if (otherSet.has(value)) {\n                continue FIRST;\n            }\n        }\n        ret.add(value);\n    }\n    return ret;\n}\nvar Recoil_differenceSets = differenceSets;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * Returns a new Map object with the same keys as the original, but with the\n * values replaced with the output of the given callback function.\n */ function mapMap(map, callback) {\n    const result = new Map();\n    map.forEach((value, key)=>{\n        result.set(key, callback(value, key));\n    });\n    return result;\n}\nvar Recoil_mapMap = mapMap;\nfunction makeGraph() {\n    return {\n        nodeDeps: new Map(),\n        nodeToNodeSubscriptions: new Map()\n    };\n}\nfunction cloneGraph(graph) {\n    return {\n        nodeDeps: Recoil_mapMap(graph.nodeDeps, (s)=>new Set(s)),\n        nodeToNodeSubscriptions: Recoil_mapMap(graph.nodeToNodeSubscriptions, (s)=>new Set(s))\n    };\n} // Note that this overwrites the deps of existing nodes, rather than unioning\n// the new deps with the old deps.\nfunction mergeDepsIntoGraph(key, newDeps, graph, // graph compared with olderGraph:\nolderGraph) {\n    const { nodeDeps, nodeToNodeSubscriptions } = graph;\n    const oldDeps = nodeDeps.get(key);\n    if (oldDeps && olderGraph && oldDeps !== olderGraph.nodeDeps.get(key)) {\n        return;\n    } // Update nodeDeps:\n    nodeDeps.set(key, newDeps); // Add new deps to nodeToNodeSubscriptions:\n    const addedDeps = oldDeps == null ? newDeps : Recoil_differenceSets(newDeps, oldDeps);\n    for (const dep of addedDeps){\n        if (!nodeToNodeSubscriptions.has(dep)) {\n            nodeToNodeSubscriptions.set(dep, new Set());\n        }\n        const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(dep));\n        existing.add(key);\n    } // Remove removed deps from nodeToNodeSubscriptions:\n    if (oldDeps) {\n        const removedDeps = Recoil_differenceSets(oldDeps, newDeps);\n        for (const dep of removedDeps){\n            if (!nodeToNodeSubscriptions.has(dep)) {\n                return;\n            }\n            const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(dep));\n            existing.delete(key);\n            if (existing.size === 0) {\n                nodeToNodeSubscriptions.delete(dep);\n            }\n        }\n    }\n}\nfunction saveDepsToStore(key, deps, store, version) {\n    var _storeState$nextTree, _storeState$previousT, _storeState$previousT2, _storeState$previousT3;\n    const storeState = store.getState();\n    if (!(version === storeState.currentTree.version || version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {\n        Recoil_recoverableViolation(\"Tried to save dependencies to a discarded tree\");\n    } // Merge the dependencies discovered into the store's dependency map\n    // for the version that was read:\n    const graph = store.getGraph(version);\n    mergeDepsIntoGraph(key, deps, graph); // If this version is not the latest version, also write these dependencies\n    // into later versions if they don't already have their own:\n    if (version === ((_storeState$previousT2 = storeState.previousTree) === null || _storeState$previousT2 === void 0 ? void 0 : _storeState$previousT2.version)) {\n        const currentGraph = store.getGraph(storeState.currentTree.version);\n        mergeDepsIntoGraph(key, deps, currentGraph, graph);\n    }\n    if (version === ((_storeState$previousT3 = storeState.previousTree) === null || _storeState$previousT3 === void 0 ? void 0 : _storeState$previousT3.version) || version === storeState.currentTree.version) {\n        var _storeState$nextTree2;\n        const nextVersion = (_storeState$nextTree2 = storeState.nextTree) === null || _storeState$nextTree2 === void 0 ? void 0 : _storeState$nextTree2.version;\n        if (nextVersion !== undefined) {\n            const nextGraph = store.getGraph(nextVersion);\n            mergeDepsIntoGraph(key, deps, nextGraph, graph);\n        }\n    }\n}\nvar Recoil_Graph = {\n    cloneGraph,\n    graph: makeGraph,\n    saveDepsToStore\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ let nextTreeStateVersion = 0;\nconst getNextTreeStateVersion = ()=>nextTreeStateVersion++;\nlet nextStoreID = 0;\nconst getNextStoreID = ()=>nextStoreID++;\nlet nextComponentID = 0;\nconst getNextComponentID = ()=>nextComponentID++;\nvar Recoil_Keys = {\n    getNextTreeStateVersion,\n    getNextStoreID,\n    getNextComponentID\n};\nconst { persistentMap: persistentMap$1 } = Recoil_PersistentMap$1;\nconst { graph } = Recoil_Graph;\nconst { getNextTreeStateVersion: getNextTreeStateVersion$1 } = Recoil_Keys;\nfunction makeEmptyTreeState() {\n    const version = getNextTreeStateVersion$1();\n    return {\n        version,\n        stateID: version,\n        transactionMetadata: {},\n        dirtyAtoms: new Set(),\n        atomValues: persistentMap$1(),\n        nonvalidatedAtoms: persistentMap$1()\n    };\n}\nfunction makeEmptyStoreState() {\n    const currentTree = makeEmptyTreeState();\n    return {\n        currentTree,\n        nextTree: null,\n        previousTree: null,\n        commitDepth: 0,\n        knownAtoms: new Set(),\n        knownSelectors: new Set(),\n        transactionSubscriptions: new Map(),\n        nodeTransactionSubscriptions: new Map(),\n        nodeToComponentSubscriptions: new Map(),\n        queuedComponentCallbacks_DEPRECATED: [],\n        suspendedComponentResolvers: new Set(),\n        graphsByVersion: new Map().set(currentTree.version, graph()),\n        retention: {\n            referenceCounts: new Map(),\n            nodesRetainedByZone: new Map(),\n            retainablesToCheckForRelease: new Set()\n        },\n        nodeCleanupFunctions: new Map()\n    };\n}\nvar Recoil_State = {\n    makeEmptyTreeState,\n    makeEmptyStoreState,\n    getNextTreeStateVersion: getNextTreeStateVersion$1\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ class RetentionZone {\n}\nfunction retentionZone() {\n    return new RetentionZone();\n}\nvar Recoil_RetentionZone = {\n    RetentionZone,\n    retentionZone\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Utilities for working with built-in Maps and Sets without mutating them.\n *\n * \n * @format\n * @oncall recoil\n */ function setByAddingToSet(set, v) {\n    const next = new Set(set);\n    next.add(v);\n    return next;\n}\nfunction setByDeletingFromSet(set, v) {\n    const next = new Set(set);\n    next.delete(v);\n    return next;\n}\nfunction mapBySettingInMap(map, k, v) {\n    const next = new Map(map);\n    next.set(k, v);\n    return next;\n}\nfunction mapByUpdatingInMap(map, k, updater) {\n    const next = new Map(map);\n    next.set(k, updater(next.get(k)));\n    return next;\n}\nfunction mapByDeletingFromMap(map, k) {\n    const next = new Map(map);\n    next.delete(k);\n    return next;\n}\nfunction mapByDeletingMultipleFromMap(map, ks) {\n    const next = new Map(map);\n    ks.forEach((k)=>next.delete(k));\n    return next;\n}\nvar Recoil_CopyOnWrite = {\n    setByAddingToSet,\n    setByDeletingFromSet,\n    mapBySettingInMap,\n    mapByUpdatingInMap,\n    mapByDeletingFromMap,\n    mapByDeletingMultipleFromMap\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * Creates a new iterable whose output is generated by passing the input\n * iterable's values through the filter function.\n */ function* filterIterable(iterable, predicate) {\n    // Use generator to create iterable/iterator\n    let index = 0;\n    for (const value of iterable){\n        if (predicate(value, index++)) {\n            yield value;\n        }\n    }\n}\nvar Recoil_filterIterable = filterIterable;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * Return a proxy object based on the provided base and factories objects.\n * The proxy will include all properties of the base object as-is.\n * The factories object contains callbacks to obtain the values of the properies\n * for its keys.\n *\n * This is useful for providing users an object where some properties may be\n * lazily computed only on first access.\n */ // $FlowIssue[unclear-type]\nfunction lazyProxy(base, factories) {\n    const proxy = new Proxy(base, {\n        // Compute and cache lazy property if not already done.\n        get: (target, prop)=>{\n            if (!(prop in target) && prop in factories) {\n                target[prop] = factories[prop]();\n            }\n            return target[prop];\n        },\n        // This method allows user to iterate keys as normal\n        ownKeys: (target)=>{\n            return Object.keys(target);\n        }\n    }); // $FlowIssue[incompatible-return]\n    return proxy;\n}\nvar Recoil_lazyProxy = lazyProxy;\nconst { getNode: getNode$1, getNodeMaybe: getNodeMaybe$1, recoilValuesForKeys: recoilValuesForKeys$1 } = Recoil_Node;\nconst { RetentionZone: RetentionZone$1 } = Recoil_RetentionZone;\nconst { setByAddingToSet: setByAddingToSet$1 } = Recoil_CopyOnWrite;\n// flowlint-next-line unclear-type:off\nconst emptySet = Object.freeze(new Set());\nclass ReadOnlyRecoilValueError extends Error {\n}\nfunction initializeRetentionForNode(store, nodeKey, retainedBy) {\n    if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        return ()=>undefined;\n    }\n    const { nodesRetainedByZone } = store.getState().retention;\n    function addToZone(zone) {\n        let set = nodesRetainedByZone.get(zone);\n        if (!set) {\n            nodesRetainedByZone.set(zone, set = new Set());\n        }\n        set.add(nodeKey);\n    }\n    if (retainedBy instanceof RetentionZone$1) {\n        addToZone(retainedBy);\n    } else if (Array.isArray(retainedBy)) {\n        for (const zone of retainedBy){\n            addToZone(zone);\n        }\n    }\n    return ()=>{\n        if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n            return;\n        }\n        const { retention } = store.getState();\n        function deleteFromZone(zone) {\n            const set = retention.nodesRetainedByZone.get(zone);\n            set === null || set === void 0 ? void 0 : set.delete(nodeKey);\n            if (set && set.size === 0) {\n                retention.nodesRetainedByZone.delete(zone);\n            }\n        }\n        if (retainedBy instanceof RetentionZone$1) {\n            deleteFromZone(retainedBy);\n        } else if (Array.isArray(retainedBy)) {\n            for (const zone of retainedBy){\n                deleteFromZone(zone);\n            }\n        }\n    };\n}\nfunction initializeNodeIfNewToStore(store, treeState, key, trigger) {\n    const storeState = store.getState();\n    if (storeState.nodeCleanupFunctions.has(key)) {\n        return;\n    }\n    const node = getNode$1(key);\n    const retentionCleanup = initializeRetentionForNode(store, key, node.retainedBy);\n    const nodeCleanup = node.init(store, treeState, trigger);\n    storeState.nodeCleanupFunctions.set(key, ()=>{\n        nodeCleanup();\n        retentionCleanup();\n    });\n}\nfunction initializeNode(store, key, trigger) {\n    initializeNodeIfNewToStore(store, store.getState().currentTree, key, trigger);\n}\nfunction cleanUpNode(store, key) {\n    var _state$nodeCleanupFun;\n    const state = store.getState();\n    (_state$nodeCleanupFun = state.nodeCleanupFunctions.get(key)) === null || _state$nodeCleanupFun === void 0 ? void 0 : _state$nodeCleanupFun();\n    state.nodeCleanupFunctions.delete(key);\n} // Get the current value loadable of a node and update the state.\n// Update dependencies and subscriptions for selectors.\n// Update saved value validation for atoms.\nfunction getNodeLoadable(store, state, key) {\n    initializeNodeIfNewToStore(store, state, key, \"get\");\n    return getNode$1(key).get(store, state);\n} // Peek at the current value loadable for a node without any evaluation or state change\nfunction peekNodeLoadable(store, state, key) {\n    return getNode$1(key).peek(store, state);\n} // Write value directly to state bypassing the Node interface as the node\n// definitions may not have been loaded yet when processing the initial snapshot.\nfunction setUnvalidatedAtomValue_DEPRECATED(state, key, newValue) {\n    var _node$invalidate;\n    const node = getNodeMaybe$1(key);\n    node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);\n    return {\n        ...state,\n        atomValues: state.atomValues.clone().delete(key),\n        nonvalidatedAtoms: state.nonvalidatedAtoms.clone().set(key, newValue),\n        dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)\n    };\n} // Return the discovered dependencies and values to be written by setting\n// a node value. (Multiple values may be written due to selectors getting to\n// set upstreams; deps may be discovered because of reads in updater functions.)\nfunction setNodeValue(store, state, key, newValue) {\n    const node = getNode$1(key);\n    if (node.set == null) {\n        throw new ReadOnlyRecoilValueError(\"Attempt to set read-only RecoilValue: \".concat(key));\n    }\n    const set = node.set; // so flow doesn't lose the above refinement.\n    initializeNodeIfNewToStore(store, state, key, \"set\");\n    return set(store, state, newValue);\n}\nfunction peekNodeInfo(store, state, key) {\n    const storeState = store.getState();\n    const graph = store.getGraph(state.version);\n    const type = getNode$1(key).nodeType;\n    return Recoil_lazyProxy({\n        type\n    }, {\n        // $FlowFixMe[underconstrained-implicit-instantiation]\n        loadable: ()=>peekNodeLoadable(store, state, key),\n        isActive: ()=>storeState.knownAtoms.has(key) || storeState.knownSelectors.has(key),\n        isSet: ()=>type === \"selector\" ? false : state.atomValues.has(key),\n        isModified: ()=>state.dirtyAtoms.has(key),\n        // Report current dependencies.  If the node hasn't been evaluated, then\n        // dependencies may be missing based on the current state.\n        deps: ()=>{\n            var _graph$nodeDeps$get;\n            return recoilValuesForKeys$1((_graph$nodeDeps$get = graph.nodeDeps.get(key)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : []);\n        },\n        // Reports all \"current\" subscribers.  Evaluating other nodes or\n        // previous in-progress async evaluations may introduce new subscribers.\n        subscribers: ()=>{\n            var _storeState$nodeToCom, _storeState$nodeToCom2;\n            return {\n                nodes: recoilValuesForKeys$1(Recoil_filterIterable(getDownstreamNodes(store, state, new Set([\n                    key\n                ])), (nodeKey)=>nodeKey !== key)),\n                components: Recoil_mapIterable((_storeState$nodeToCom = (_storeState$nodeToCom2 = storeState.nodeToComponentSubscriptions.get(key)) === null || _storeState$nodeToCom2 === void 0 ? void 0 : _storeState$nodeToCom2.values()) !== null && _storeState$nodeToCom !== void 0 ? _storeState$nodeToCom : [], (param)=>{\n                    let [name] = param;\n                    return {\n                        name\n                    };\n                })\n            };\n        }\n    });\n} // Find all of the recursively dependent nodes\nfunction getDownstreamNodes(store, state, keys) {\n    const visitedNodes = new Set();\n    const visitingNodes = Array.from(keys);\n    const graph = store.getGraph(state.version);\n    for(let key = visitingNodes.pop(); key; key = visitingNodes.pop()){\n        var _graph$nodeToNodeSubs;\n        visitedNodes.add(key);\n        const subscribedNodes = (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(key)) !== null && _graph$nodeToNodeSubs !== void 0 ? _graph$nodeToNodeSubs : emptySet;\n        for (const downstreamNode of subscribedNodes){\n            if (!visitedNodes.has(downstreamNode)) {\n                visitingNodes.push(downstreamNode);\n            }\n        }\n    }\n    return visitedNodes;\n}\nvar Recoil_FunctionalCore = {\n    getNodeLoadable,\n    peekNodeLoadable,\n    setNodeValue,\n    initializeNode,\n    cleanUpNode,\n    setUnvalidatedAtomValue_DEPRECATED,\n    peekNodeInfo,\n    getDownstreamNodes\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ let _invalidateMemoizedSnapshot = null;\nfunction setInvalidateMemoizedSnapshot(invalidate) {\n    _invalidateMemoizedSnapshot = invalidate;\n}\nfunction invalidateMemoizedSnapshot() {\n    var _invalidateMemoizedSn;\n    (_invalidateMemoizedSn = _invalidateMemoizedSnapshot) === null || _invalidateMemoizedSn === void 0 ? void 0 : _invalidateMemoizedSn();\n}\nvar Recoil_SnapshotCache = {\n    setInvalidateMemoizedSnapshot,\n    invalidateMemoizedSnapshot\n};\nconst { getDownstreamNodes: getDownstreamNodes$1, getNodeLoadable: getNodeLoadable$1, setNodeValue: setNodeValue$1 } = Recoil_FunctionalCore;\nconst { getNextComponentID: getNextComponentID$1 } = Recoil_Keys;\nconst { getNode: getNode$2, getNodeMaybe: getNodeMaybe$2 } = Recoil_Node;\nconst { DefaultValue: DefaultValue$1 } = Recoil_Node;\nconst { reactMode: reactMode$1 } = Recoil_ReactMode;\nconst { AbstractRecoilValue: AbstractRecoilValue$1, RecoilState: RecoilState$1, RecoilValueReadOnly: RecoilValueReadOnly$1, isRecoilValue: isRecoilValue$1 } = Recoil_RecoilValue$1;\nconst { invalidateMemoizedSnapshot: invalidateMemoizedSnapshot$1 } = Recoil_SnapshotCache;\nfunction getRecoilValueAsLoadable(store, param) {\n    let { key } = param, treeState = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : store.getState().currentTree;\n    var _storeState$nextTree, _storeState$previousT;\n    // Reading from an older tree can cause bugs because the dependencies that we\n    // discover during the read are lost.\n    const storeState = store.getState();\n    if (!(treeState.version === storeState.currentTree.version || treeState.version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || treeState.version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {\n        Recoil_recoverableViolation(\"Tried to read from a discarded tree\");\n    }\n    const loadable = getNodeLoadable$1(store, treeState, key);\n    if (loadable.state === \"loading\") {\n        loadable.contents.catch(()=>{\n            /**\n       * HACK: intercept thrown error here to prevent an uncaught promise exception. Ideally this would happen closer to selector\n       * execution (perhaps introducing a new ERROR class to be resolved by async selectors that are in an error state)\n       */ return;\n        });\n    }\n    return loadable;\n}\nfunction applyAtomValueWrites(atomValues, writes) {\n    const result = atomValues.clone();\n    writes.forEach((v, k)=>{\n        if (v.state === \"hasValue\" && v.contents instanceof DefaultValue$1) {\n            result.delete(k);\n        } else {\n            result.set(k, v);\n        }\n    });\n    return result;\n}\nfunction valueFromValueOrUpdater(store, state, param, valueOrUpdater) {\n    let { key } = param;\n    if (typeof valueOrUpdater === \"function\") {\n        // Updater form: pass in the current value. Throw if the current value\n        // is unavailable (namely when updating an async selector that's\n        // pending or errored):\n        const current = getNodeLoadable$1(store, state, key);\n        if (current.state === \"loading\") {\n            const msg = 'Tried to set atom or selector \"'.concat(key, '\" using an updater function while the current state is pending, this is not currently supported.');\n            Recoil_recoverableViolation(msg);\n            throw Recoil_err(msg);\n        } else if (current.state === \"hasError\") {\n            throw current.contents;\n        } // T itself may be a function, so our refinement is not sufficient:\n        return valueOrUpdater(current.contents); // flowlint-line unclear-type:off\n    } else {\n        return valueOrUpdater;\n    }\n}\nfunction applyAction(store, state, action) {\n    if (action.type === \"set\") {\n        const { recoilValue, valueOrUpdater } = action;\n        const newValue = valueFromValueOrUpdater(store, state, recoilValue, valueOrUpdater);\n        const writes = setNodeValue$1(store, state, recoilValue.key, newValue);\n        for (const [key, loadable] of writes.entries()){\n            writeLoadableToTreeState(state, key, loadable);\n        }\n    } else if (action.type === \"setLoadable\") {\n        const { recoilValue: { key }, loadable } = action;\n        writeLoadableToTreeState(state, key, loadable);\n    } else if (action.type === \"markModified\") {\n        const { recoilValue: { key } } = action;\n        state.dirtyAtoms.add(key);\n    } else if (action.type === \"setUnvalidated\") {\n        var _node$invalidate;\n        // Write value directly to state bypassing the Node interface as the node\n        // definitions may not have been loaded yet when processing the initial snapshot.\n        const { recoilValue: { key }, unvalidatedValue } = action;\n        const node = getNodeMaybe$2(key);\n        node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);\n        state.atomValues.delete(key);\n        state.nonvalidatedAtoms.set(key, unvalidatedValue);\n        state.dirtyAtoms.add(key);\n    } else {\n        Recoil_recoverableViolation(\"Unknown action \".concat(action.type));\n    }\n}\nfunction writeLoadableToTreeState(state, key, loadable) {\n    if (loadable.state === \"hasValue\" && loadable.contents instanceof DefaultValue$1) {\n        state.atomValues.delete(key);\n    } else {\n        state.atomValues.set(key, loadable);\n    }\n    state.dirtyAtoms.add(key);\n    state.nonvalidatedAtoms.delete(key);\n}\nfunction applyActionsToStore(store, actions) {\n    store.replaceState((state)=>{\n        const newState = copyTreeState(state);\n        for (const action of actions){\n            applyAction(store, newState, action);\n        }\n        invalidateDownstreams(store, newState);\n        invalidateMemoizedSnapshot$1();\n        return newState;\n    });\n}\nfunction queueOrPerformStateUpdate(store, action) {\n    if (batchStack.length) {\n        const actionsByStore = batchStack[batchStack.length - 1];\n        let actions = actionsByStore.get(store);\n        if (!actions) {\n            actionsByStore.set(store, actions = []);\n        }\n        actions.push(action);\n    } else {\n        applyActionsToStore(store, [\n            action\n        ]);\n    }\n}\nconst batchStack = [];\nfunction batchStart() {\n    const actionsByStore = new Map();\n    batchStack.push(actionsByStore);\n    return ()=>{\n        for (const [store, actions] of actionsByStore){\n            applyActionsToStore(store, actions);\n        }\n        const popped = batchStack.pop();\n        if (popped !== actionsByStore) {\n            Recoil_recoverableViolation(\"Incorrect order of batch popping\");\n        }\n    };\n}\nfunction copyTreeState(state) {\n    return {\n        ...state,\n        atomValues: state.atomValues.clone(),\n        nonvalidatedAtoms: state.nonvalidatedAtoms.clone(),\n        dirtyAtoms: new Set(state.dirtyAtoms)\n    };\n}\nfunction invalidateDownstreams(store, state) {\n    // Inform any nodes that were changed or downstream of changes so that they\n    // can clear out any caches as needed due to the update:\n    const downstreams = getDownstreamNodes$1(store, state, state.dirtyAtoms);\n    for (const key of downstreams){\n        var _getNodeMaybe, _getNodeMaybe$invalid;\n        (_getNodeMaybe = getNodeMaybe$2(key)) === null || _getNodeMaybe === void 0 ? void 0 : (_getNodeMaybe$invalid = _getNodeMaybe.invalidate) === null || _getNodeMaybe$invalid === void 0 ? void 0 : _getNodeMaybe$invalid.call(_getNodeMaybe, state);\n    }\n}\nfunction setRecoilValue(store, recoilValue, valueOrUpdater) {\n    queueOrPerformStateUpdate(store, {\n        type: \"set\",\n        recoilValue,\n        valueOrUpdater\n    });\n}\nfunction setRecoilValueLoadable(store, recoilValue, loadable) {\n    if (loadable instanceof DefaultValue$1) {\n        return setRecoilValue(store, recoilValue, loadable);\n    }\n    queueOrPerformStateUpdate(store, {\n        type: \"setLoadable\",\n        recoilValue,\n        loadable: loadable\n    });\n}\nfunction markRecoilValueModified(store, recoilValue) {\n    queueOrPerformStateUpdate(store, {\n        type: \"markModified\",\n        recoilValue\n    });\n}\nfunction setUnvalidatedRecoilValue(store, recoilValue, unvalidatedValue) {\n    queueOrPerformStateUpdate(store, {\n        type: \"setUnvalidated\",\n        recoilValue,\n        unvalidatedValue\n    });\n}\nfunction subscribeToRecoilValue(store, param, callback) {\n    let { key } = param, componentDebugName = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;\n    const subID = getNextComponentID$1();\n    const storeState = store.getState();\n    if (!storeState.nodeToComponentSubscriptions.has(key)) {\n        storeState.nodeToComponentSubscriptions.set(key, new Map());\n    }\n    Recoil_nullthrows(storeState.nodeToComponentSubscriptions.get(key)).set(subID, [\n        componentDebugName !== null && componentDebugName !== void 0 ? componentDebugName : \"<not captured>\",\n        callback\n    ]); // Handle the case that, during the same tick that we are subscribing, an atom\n    // has been updated by some effect handler. Otherwise we will miss the update.\n    const mode = reactMode$1();\n    if (mode.early && (mode.mode === \"LEGACY\" || mode.mode === \"MUTABLE_SOURCE\")) {\n        const nextTree = store.getState().nextTree;\n        if (nextTree && nextTree.dirtyAtoms.has(key)) {\n            callback(nextTree);\n        }\n    }\n    return {\n        release: ()=>{\n            const releaseStoreState = store.getState();\n            const subs = releaseStoreState.nodeToComponentSubscriptions.get(key);\n            if (subs === undefined || !subs.has(subID)) {\n                Recoil_recoverableViolation(\"Subscription missing at release time for atom \".concat(key, \". This is a bug in Recoil.\"));\n                return;\n            }\n            subs.delete(subID);\n            if (subs.size === 0) {\n                releaseStoreState.nodeToComponentSubscriptions.delete(key);\n            }\n        }\n    };\n}\nfunction refreshRecoilValue(store, recoilValue) {\n    var _node$clearCache;\n    const { currentTree } = store.getState();\n    const node = getNode$2(recoilValue.key);\n    (_node$clearCache = node.clearCache) === null || _node$clearCache === void 0 ? void 0 : _node$clearCache.call(node, store, currentTree);\n}\nvar Recoil_RecoilValueInterface = {\n    RecoilValueReadOnly: RecoilValueReadOnly$1,\n    AbstractRecoilValue: AbstractRecoilValue$1,\n    RecoilState: RecoilState$1,\n    getRecoilValueAsLoadable,\n    setRecoilValue,\n    setRecoilValueLoadable,\n    markRecoilValueModified,\n    setUnvalidatedRecoilValue,\n    subscribeToRecoilValue,\n    isRecoilValue: isRecoilValue$1,\n    applyAtomValueWrites,\n    // TODO Remove export when deprecating initialStoreState_DEPRECATED in RecoilRoot\n    batchStart,\n    writeLoadableToTreeState,\n    invalidateDownstreams,\n    copyTreeState,\n    refreshRecoilValue\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * The someSet() method tests whether some elements in the given Set pass the\n * test implemented by the provided function.\n */ function someSet(set, callback, context) {\n    const iterator = set.entries();\n    let current = iterator.next();\n    while(!current.done){\n        const entry = current.value;\n        if (callback.call(context, entry[1], entry[0], set)) {\n            return true;\n        }\n        current = iterator.next();\n    }\n    return false;\n}\nvar Recoil_someSet = someSet;\nconst { cleanUpNode: cleanUpNode$1 } = Recoil_FunctionalCore;\nconst { deleteNodeConfigIfPossible: deleteNodeConfigIfPossible$1, getNode: getNode$3 } = Recoil_Node;\nconst { RetentionZone: RetentionZone$2 } = Recoil_RetentionZone;\n// Components that aren't mounted after suspending for this long will be assumed\n// to be discarded and their resources released.\nconst SUSPENSE_TIMEOUT_MS = 120000;\nconst emptySet$1 = new Set();\nfunction releaseRetainablesNowOnCurrentTree(store, retainables) {\n    const storeState = store.getState();\n    const treeState = storeState.currentTree;\n    if (storeState.nextTree) {\n        Recoil_recoverableViolation(\"releaseNodesNowOnCurrentTree should only be called at the end of a batch\");\n        return; // leak memory rather than erase something that's about to be used.\n    }\n    const nodes = new Set();\n    for (const r of retainables){\n        if (r instanceof RetentionZone$2) {\n            for (const n of nodesRetainedByZone(storeState, r)){\n                nodes.add(n);\n            }\n        } else {\n            nodes.add(r);\n        }\n    }\n    const releasableNodes = findReleasableNodes(store, nodes);\n    for (const node of releasableNodes){\n        releaseNode(store, treeState, node);\n    }\n}\nfunction findReleasableNodes(store, searchFromNodes) {\n    const storeState = store.getState();\n    const treeState = storeState.currentTree;\n    const graph = store.getGraph(treeState.version);\n    const releasableNodes = new Set(); // mutated to collect answer\n    const nonReleasableNodes = new Set();\n    findReleasableNodesInner(searchFromNodes);\n    return releasableNodes;\n    function findReleasableNodesInner(searchFromNodes) {\n        const releasableNodesFoundThisIteration = new Set();\n        const downstreams = getDownstreamNodesInTopologicalOrder(store, treeState, searchFromNodes, releasableNodes, nonReleasableNodes // don't descend into these\n        ); // Find which of the downstream nodes are releasable and which are not:\n        for (const node of downstreams){\n            var _storeState$retention;\n            // Not releasable if configured to be retained forever:\n            if (getNode$3(node).retainedBy === \"recoilRoot\") {\n                nonReleasableNodes.add(node);\n                continue;\n            } // Not releasable if retained directly by a component:\n            if (((_storeState$retention = storeState.retention.referenceCounts.get(node)) !== null && _storeState$retention !== void 0 ? _storeState$retention : 0) > 0) {\n                nonReleasableNodes.add(node);\n                continue;\n            } // Not releasable if retained by a zone:\n            if (zonesThatCouldRetainNode(node).some((z)=>storeState.retention.referenceCounts.get(z))) {\n                nonReleasableNodes.add(node);\n                continue;\n            } // Not releasable if it has a non-releasable child (which will already be in\n            // nonReleasableNodes because we are going in topological order):\n            const nodeChildren = graph.nodeToNodeSubscriptions.get(node);\n            if (nodeChildren && Recoil_someSet(nodeChildren, (child)=>nonReleasableNodes.has(child))) {\n                nonReleasableNodes.add(node);\n                continue;\n            }\n            releasableNodes.add(node);\n            releasableNodesFoundThisIteration.add(node);\n        } // If we found any releasable nodes, we need to walk UP from those nodes to\n        // find whether their parents can now be released as well:\n        const parents = new Set();\n        for (const node of releasableNodesFoundThisIteration){\n            for (const parent of (_graph$nodeDeps$get = graph.nodeDeps.get(node)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : emptySet$1){\n                var _graph$nodeDeps$get;\n                if (!releasableNodes.has(parent)) {\n                    parents.add(parent);\n                }\n            }\n        }\n        if (parents.size) {\n            findReleasableNodesInner(parents);\n        }\n    }\n} // Children before parents\nfunction getDownstreamNodesInTopologicalOrder(store, treeState, nodes, doNotDescendInto1, doNotDescendInto2) {\n    const graph = store.getGraph(treeState.version);\n    const answer = [];\n    const visited = new Set();\n    while(nodes.size > 0){\n        visit(Recoil_nullthrows(nodes.values().next().value));\n    }\n    return answer;\n    function visit(node) {\n        if (doNotDescendInto1.has(node) || doNotDescendInto2.has(node)) {\n            nodes.delete(node);\n            return;\n        }\n        if (visited.has(node)) {\n            return;\n        }\n        const children = graph.nodeToNodeSubscriptions.get(node);\n        if (children) {\n            for (const child of children){\n                visit(child);\n            }\n        }\n        visited.add(node);\n        nodes.delete(node);\n        answer.push(node);\n    }\n}\nfunction releaseNode(store, treeState, node) {\n    if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        return;\n    } // Atom effects, in-closure caches, etc.:\n    cleanUpNode$1(store, node); // Delete from store state:\n    const storeState = store.getState();\n    storeState.knownAtoms.delete(node);\n    storeState.knownSelectors.delete(node);\n    storeState.nodeTransactionSubscriptions.delete(node);\n    storeState.retention.referenceCounts.delete(node);\n    const zones = zonesThatCouldRetainNode(node);\n    for (const zone of zones){\n        var _storeState$retention2;\n        (_storeState$retention2 = storeState.retention.nodesRetainedByZone.get(zone)) === null || _storeState$retention2 === void 0 ? void 0 : _storeState$retention2.delete(node);\n    } // Note that we DO NOT delete from nodeToComponentSubscriptions because this\n    // already happens when the last component that was retaining the node unmounts,\n    // and this could happen either before or after that.\n    // Delete from TreeState and dep graph:\n    treeState.atomValues.delete(node);\n    treeState.dirtyAtoms.delete(node);\n    treeState.nonvalidatedAtoms.delete(node);\n    const graph = storeState.graphsByVersion.get(treeState.version);\n    if (graph) {\n        const deps = graph.nodeDeps.get(node);\n        if (deps !== undefined) {\n            graph.nodeDeps.delete(node);\n            for (const dep of deps){\n                var _graph$nodeToNodeSubs;\n                (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(dep)) === null || _graph$nodeToNodeSubs === void 0 ? void 0 : _graph$nodeToNodeSubs.delete(node);\n            }\n        } // No need to delete sub's deps as there should be no subs at this point.\n        // But an invariant would require deleting nodes in topological order.\n        graph.nodeToNodeSubscriptions.delete(node);\n    } // Node config (for family members only as their configs can be recreated, and\n    // only if they are not retained within any other Stores):\n    deleteNodeConfigIfPossible$1(node);\n}\nfunction nodesRetainedByZone(storeState, zone) {\n    var _storeState$retention3;\n    return (_storeState$retention3 = storeState.retention.nodesRetainedByZone.get(zone)) !== null && _storeState$retention3 !== void 0 ? _storeState$retention3 : emptySet$1;\n}\nfunction zonesThatCouldRetainNode(node) {\n    const retainedBy = getNode$3(node).retainedBy;\n    if (retainedBy === undefined || retainedBy === \"components\" || retainedBy === \"recoilRoot\") {\n        return [];\n    } else if (retainedBy instanceof RetentionZone$2) {\n        return [\n            retainedBy\n        ];\n    } else {\n        return retainedBy; // it's an array of zones\n    }\n}\nfunction scheduleOrPerformPossibleReleaseOfRetainable(store, retainable) {\n    const state = store.getState();\n    if (state.nextTree) {\n        state.retention.retainablesToCheckForRelease.add(retainable);\n    } else {\n        releaseRetainablesNowOnCurrentTree(store, new Set([\n            retainable\n        ]));\n    }\n}\nfunction updateRetainCount(store, retainable, delta) {\n    var _map$get;\n    if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        return;\n    }\n    const map = store.getState().retention.referenceCounts;\n    const newCount = ((_map$get = map.get(retainable)) !== null && _map$get !== void 0 ? _map$get : 0) + delta;\n    if (newCount === 0) {\n        updateRetainCountToZero(store, retainable);\n    } else {\n        map.set(retainable, newCount);\n    }\n}\nfunction updateRetainCountToZero(store, retainable) {\n    if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        return;\n    }\n    const map = store.getState().retention.referenceCounts;\n    map.delete(retainable);\n    scheduleOrPerformPossibleReleaseOfRetainable(store, retainable);\n}\nfunction releaseScheduledRetainablesNow(store) {\n    if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        return;\n    }\n    const state = store.getState();\n    releaseRetainablesNowOnCurrentTree(store, state.retention.retainablesToCheckForRelease);\n    state.retention.retainablesToCheckForRelease.clear();\n}\nfunction retainedByOptionWithDefault(r) {\n    // The default will change from 'recoilRoot' to 'components' in the future.\n    return r === undefined ? \"recoilRoot\" : r;\n}\nvar Recoil_Retention = {\n    SUSPENSE_TIMEOUT_MS,\n    updateRetainCount,\n    updateRetainCountToZero,\n    releaseScheduledRetainablesNow,\n    retainedByOptionWithDefault\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * This is to export esstiential functions from react-dom\n * for our web build\n *\n * \n * @format\n * @oncall recoil\n */ const { unstable_batchedUpdates } = react_dom__WEBPACK_IMPORTED_MODULE_1__;\nvar ReactBatchedUpdates = {\n    unstable_batchedUpdates\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * This is to export esstiential functions from react-dom\n * for our web build\n *\n * \n * @format\n * @oncall recoil\n */ // @fb-only: const {unstable_batchedUpdates} = require('ReactDOMComet');\n// prettier-ignore\nconst { unstable_batchedUpdates: unstable_batchedUpdates$1 } = ReactBatchedUpdates; // @oss-only\nvar Recoil_ReactBatchedUpdates = {\n    unstable_batchedUpdates: unstable_batchedUpdates$1\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ const { batchStart: batchStart$1 } = Recoil_RecoilValueInterface;\nconst { unstable_batchedUpdates: unstable_batchedUpdates$2 } = Recoil_ReactBatchedUpdates; // flowlint-next-line unclear-type:off\n/*\n * During SSR, unstable_batchedUpdates may be undefined so this\n * falls back to a basic function that executes the batch\n */ let batcher = unstable_batchedUpdates$2 || ((batchFn)=>batchFn());\n/**\n * Sets the provided batcher function as the batcher function used by Recoil.\n *\n * Set the batcher to a custom batcher for your renderer,\n * if you use a renderer other than React DOM or React Native.\n */ const setBatcher = (newBatcher)=>{\n    batcher = newBatcher;\n};\n/**\n * Returns the current batcher function.\n */ const getBatcher = ()=>batcher;\n/**\n * Calls the current batcher function and passes the\n * provided callback function.\n */ const batchUpdates = (callback)=>{\n    batcher(()=>{\n        let batchEnd = ()=>undefined;\n        try {\n            batchEnd = batchStart$1();\n            callback();\n        } finally{\n            batchEnd();\n        }\n    });\n};\nvar Recoil_Batching = {\n    getBatcher,\n    setBatcher,\n    batchUpdates\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * Combines multiple Iterables into a single Iterable.\n * Traverses the input Iterables in the order provided and maintains the order\n * of their elements.\n *\n * Example:\n * ```\n * const r = Array.from(concatIterables(['a', 'b'], ['c'], ['d', 'e', 'f']));\n * r == ['a', 'b', 'c', 'd', 'e', 'f'];\n * ```\n */ function* concatIterables(iters) {\n    for (const iter of iters){\n        for (const val of iter){\n            yield val;\n        }\n    }\n}\nvar Recoil_concatIterables = concatIterables;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /* eslint-disable fb-www/typeof-undefined */ const isSSR = typeof Window === \"undefined\" || \"object\" === \"undefined\";\n/* eslint-enable fb-www/typeof-undefined */ const isWindow = (value)=>!isSSR && (value === window || value instanceof Window);\nconst isReactNative = typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\"; // eslint-disable-line fb-www/typeof-undefined\nvar Recoil_Environment = {\n    isSSR,\n    isReactNative,\n    isWindow\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * Caches a function's results based on the key returned by the passed\n * hashFunction.\n */ function memoizeWithArgsHash(fn, hashFunction) {\n    let cache;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!cache) {\n            cache = {};\n        }\n        const key = hashFunction(...args);\n        if (!Object.hasOwnProperty.call(cache, key)) {\n            cache[key] = fn(...args);\n        }\n        return cache[key];\n    };\n}\n/**\n * Caches a function's results based on a comparison of the arguments.\n * Only caches the last return of the function.\n * Defaults to reference equality\n */ function memoizeOneWithArgsHash(fn, hashFunction) {\n    let lastKey;\n    let lastResult; // breaking cache when arguments change\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const key = hashFunction(...args);\n        if (lastKey === key) {\n            return lastResult;\n        }\n        lastKey = key;\n        lastResult = fn(...args);\n        return lastResult;\n    };\n}\n/**\n * Caches a function's results based on a comparison of the arguments.\n * Only caches the last return of the function.\n * Defaults to reference equality\n */ function memoizeOneWithArgsHashAndInvalidation(fn, hashFunction) {\n    let lastKey;\n    let lastResult; // breaking cache when arguments change\n    const memoizedFn = function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const key = hashFunction(...args);\n        if (lastKey === key) {\n            return lastResult;\n        }\n        lastKey = key;\n        lastResult = fn(...args);\n        return lastResult;\n    };\n    const invalidate = ()=>{\n        lastKey = null;\n    };\n    return [\n        memoizedFn,\n        invalidate\n    ];\n}\nvar Recoil_Memoize = {\n    memoizeWithArgsHash,\n    memoizeOneWithArgsHash,\n    memoizeOneWithArgsHashAndInvalidation\n};\nconst { batchUpdates: batchUpdates$1 } = Recoil_Batching;\nconst { initializeNode: initializeNode$1, peekNodeInfo: peekNodeInfo$1 } = Recoil_FunctionalCore;\nconst { graph: graph$1 } = Recoil_Graph;\nconst { getNextStoreID: getNextStoreID$1 } = Recoil_Keys;\nconst { DEFAULT_VALUE: DEFAULT_VALUE$1, recoilValues: recoilValues$1, recoilValuesForKeys: recoilValuesForKeys$2 } = Recoil_Node;\nconst { AbstractRecoilValue: AbstractRecoilValue$2, getRecoilValueAsLoadable: getRecoilValueAsLoadable$1, setRecoilValue: setRecoilValue$1, setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$1 } = Recoil_RecoilValueInterface;\nconst { updateRetainCount: updateRetainCount$1 } = Recoil_Retention;\nconst { setInvalidateMemoizedSnapshot: setInvalidateMemoizedSnapshot$1 } = Recoil_SnapshotCache;\nconst { getNextTreeStateVersion: getNextTreeStateVersion$2, makeEmptyStoreState: makeEmptyStoreState$1 } = Recoil_State;\nconst { isSSR: isSSR$1 } = Recoil_Environment;\nconst { memoizeOneWithArgsHashAndInvalidation: memoizeOneWithArgsHashAndInvalidation$1 } = Recoil_Memoize;\n// Opaque at this surface because it's part of the public API from here.\nconst retainWarning = \"\\nRecoil Snapshots only last for the duration of the callback they are provided to. To keep a Snapshot longer, do this:\\n\\n  const release = snapshot.retain();\\n  try {\\n    await doSomethingWithSnapshot(snapshot);\\n  } finally {\\n    release();\\n  }\\n\\nThis is currently a DEV-only warning but will become a thrown exception in the next release of Recoil.\\n\"; // A \"Snapshot\" is \"read-only\" and captures a specific set of values of atoms.\n// However, the data-flow-graph and selector values may evolve as selector\n// evaluation functions are executed and async selectors resolve.\nclass Snapshot {\n    retain() {\n        if (this._refCount <= 0) {\n            if (true) {\n                throw Recoil_err(\"Snapshot has already been released.\");\n            } else {}\n        }\n        this._refCount++;\n        let released = false;\n        return ()=>{\n            if (!released) {\n                released = true;\n                this._release();\n            }\n        };\n    }\n    /**\n   * Release the snapshot on the next tick.  This means the snapshot is retained\n   * during the execution of the current function using it.\n   */ autoRelease_INTERNAL() {\n        if (!isSSR$1) {\n            // Use timeout of 10 to workaround Firefox issue: https://github.com/facebookexperimental/Recoil/issues/1936\n            window.setTimeout(()=>this._release(), 10);\n        }\n    }\n    _release() {\n        this._refCount--;\n        if (this._refCount === 0) {\n            this._store.getState().nodeCleanupFunctions.forEach((cleanup)=>cleanup());\n            this._store.getState().nodeCleanupFunctions.clear();\n            if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n                return;\n            } // Temporarily nerfing this to allow us to find broken call sites without\n        // actually breaking anybody yet.\n        // for (const k of this._store.getState().knownAtoms) {\n        //   updateRetainCountToZero(this._store, k);\n        // }\n        } else if (this._refCount < 0) {\n            if (true) {\n                Recoil_recoverableViolation(\"Snapshot released an extra time.\");\n            }\n        }\n    }\n    isRetained() {\n        return this._refCount > 0;\n    }\n    checkRefCount_INTERNAL() {\n        if (Recoil_gkx(\"recoil_memory_managament_2020\") && this._refCount <= 0) {\n            if (true) {\n                Recoil_recoverableViolation(retainWarning);\n            } // What we will ship later:\n        // throw err(retainWarning);\n        }\n    }\n    getStore_INTERNAL() {\n        this.checkRefCount_INTERNAL();\n        return this._store;\n    }\n    getID() {\n        this.checkRefCount_INTERNAL();\n        return this._store.getState().currentTree.stateID;\n    }\n    getStoreID() {\n        this.checkRefCount_INTERNAL();\n        return this._store.storeID;\n    }\n    // eslint-disable-next-line fb-www/no-uninitialized-properties\n    constructor(storeState, parentStoreID){\n        _defineProperty(this, \"_store\", void 0);\n        _defineProperty(this, \"_refCount\", 1);\n        _defineProperty(this, \"getLoadable\", (recoilValue)=>{\n            this.checkRefCount_INTERNAL();\n            return getRecoilValueAsLoadable$1(this._store, recoilValue);\n        });\n        _defineProperty(this, \"getPromise\", (recoilValue)=>{\n            this.checkRefCount_INTERNAL();\n            return this.getLoadable(recoilValue).toPromise();\n        });\n        _defineProperty(this, \"getNodes_UNSTABLE\", (opt)=>{\n            this.checkRefCount_INTERNAL(); // TODO Deal with modified selectors\n            if ((opt === null || opt === void 0 ? void 0 : opt.isModified) === true) {\n                if ((opt === null || opt === void 0 ? void 0 : opt.isInitialized) === false) {\n                    return [];\n                }\n                const state = this._store.getState().currentTree;\n                return recoilValuesForKeys$2(state.dirtyAtoms);\n            }\n            const knownAtoms = this._store.getState().knownAtoms;\n            const knownSelectors = this._store.getState().knownSelectors;\n            return (opt === null || opt === void 0 ? void 0 : opt.isInitialized) == null ? recoilValues$1.values() : opt.isInitialized === true ? recoilValuesForKeys$2(Recoil_concatIterables([\n                knownAtoms,\n                knownSelectors\n            ])) : Recoil_filterIterable(recoilValues$1.values(), (param)=>{\n                let { key } = param;\n                return !knownAtoms.has(key) && !knownSelectors.has(key);\n            });\n        });\n        _defineProperty(this, \"getInfo_UNSTABLE\", (param)=>{\n            let { key } = param;\n            this.checkRefCount_INTERNAL();\n            return peekNodeInfo$1(this._store, this._store.getState().currentTree, key);\n        });\n        _defineProperty(this, \"map\", (mapper)=>{\n            this.checkRefCount_INTERNAL();\n            const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);\n            mapper(mutableSnapshot); // if removing batchUpdates from `set` add it here\n            return mutableSnapshot;\n        });\n        _defineProperty(this, \"asyncMap\", async (mapper)=>{\n            this.checkRefCount_INTERNAL();\n            const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);\n            mutableSnapshot.retain(); // Retain new snapshot during async mapper\n            await mapper(mutableSnapshot); // Continue to retain the new snapshot for the user, but auto-release it\n            // after the next tick, the same as a new synchronous snapshot.\n            mutableSnapshot.autoRelease_INTERNAL();\n            return mutableSnapshot;\n        });\n        this._store = {\n            storeID: getNextStoreID$1(),\n            parentStoreID,\n            getState: ()=>storeState,\n            replaceState: (replacer)=>{\n                // no batching, so nextTree is never active\n                storeState.currentTree = replacer(storeState.currentTree);\n            },\n            getGraph: (version)=>{\n                const graphs = storeState.graphsByVersion;\n                if (graphs.has(version)) {\n                    return Recoil_nullthrows(graphs.get(version));\n                }\n                const newGraph = graph$1();\n                graphs.set(version, newGraph);\n                return newGraph;\n            },\n            subscribeToTransactions: ()=>({\n                    release: ()=>{}\n                }),\n            addTransactionMetadata: ()=>{\n                throw Recoil_err(\"Cannot subscribe to Snapshots\");\n            }\n        }; // Initialize any nodes that are live in the parent store (primarily so that\n        // this snapshot gets counted towards the node's live stores count).\n        // TODO Optimize this when cloning snapshots for callbacks\n        for (const nodeKey of this._store.getState().knownAtoms){\n            initializeNode$1(this._store, nodeKey, \"get\");\n            updateRetainCount$1(this._store, nodeKey, 1);\n        }\n        this.autoRelease_INTERNAL();\n    }\n}\nfunction cloneStoreState(store, treeState) {\n    let bumpVersion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    const storeState = store.getState();\n    const version = bumpVersion ? getNextTreeStateVersion$2() : treeState.version;\n    return {\n        // Always clone the TreeState to isolate stores from accidental mutations.\n        // For example, reading a selector from a cloned snapshot shouldn't cache\n        // in the original treestate which may cause the original to skip\n        // initialization of upstream atoms.\n        currentTree: {\n            // TODO snapshots shouldn't really have versions because a new version number\n            // is always assigned when the snapshot is gone to.\n            version: bumpVersion ? version : treeState.version,\n            stateID: bumpVersion ? version : treeState.stateID,\n            transactionMetadata: {\n                ...treeState.transactionMetadata\n            },\n            dirtyAtoms: new Set(treeState.dirtyAtoms),\n            atomValues: treeState.atomValues.clone(),\n            nonvalidatedAtoms: treeState.nonvalidatedAtoms.clone()\n        },\n        commitDepth: 0,\n        nextTree: null,\n        previousTree: null,\n        knownAtoms: new Set(storeState.knownAtoms),\n        // FIXME here's a copy\n        knownSelectors: new Set(storeState.knownSelectors),\n        // FIXME here's a copy\n        transactionSubscriptions: new Map(),\n        nodeTransactionSubscriptions: new Map(),\n        nodeToComponentSubscriptions: new Map(),\n        queuedComponentCallbacks_DEPRECATED: [],\n        suspendedComponentResolvers: new Set(),\n        graphsByVersion: new Map().set(version, store.getGraph(treeState.version)),\n        retention: {\n            referenceCounts: new Map(),\n            nodesRetainedByZone: new Map(),\n            retainablesToCheckForRelease: new Set()\n        },\n        // FIXME here's a copy\n        // Create blank cleanup handlers for atoms so snapshots don't re-run\n        // atom effects.\n        nodeCleanupFunctions: new Map(Recoil_mapIterable(storeState.nodeCleanupFunctions.entries(), (param)=>{\n            let [key] = param;\n            return [\n                key,\n                ()=>{}\n            ];\n        }))\n    };\n} // Factory to build a fresh snapshot\nfunction freshSnapshot(initializeState) {\n    const snapshot = new Snapshot(makeEmptyStoreState$1());\n    return initializeState != null ? snapshot.map(initializeState) : snapshot;\n} // Factory to clone a snapshot state\nconst [memoizedCloneSnapshot, invalidateMemoizedSnapshot$2] = memoizeOneWithArgsHashAndInvalidation$1((store, version)=>{\n    var _storeState$nextTree;\n    const storeState = store.getState();\n    const treeState = version === \"latest\" ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : Recoil_nullthrows(storeState.previousTree);\n    return new Snapshot(cloneStoreState(store, treeState), store.storeID);\n}, (store, version)=>{\n    var _store$getState$nextT, _store$getState$previ;\n    return String(version) + String(store.storeID) + String((_store$getState$nextT = store.getState().nextTree) === null || _store$getState$nextT === void 0 ? void 0 : _store$getState$nextT.version) + String(store.getState().currentTree.version) + String((_store$getState$previ = store.getState().previousTree) === null || _store$getState$previ === void 0 ? void 0 : _store$getState$previ.version);\n}); // Avoid circular dependencies\nsetInvalidateMemoizedSnapshot$1(invalidateMemoizedSnapshot$2);\nfunction cloneSnapshot(store) {\n    let version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"latest\";\n    const snapshot = memoizedCloneSnapshot(store, version);\n    if (!snapshot.isRetained()) {\n        invalidateMemoizedSnapshot$2();\n        return memoizedCloneSnapshot(store, version);\n    }\n    return snapshot;\n}\nclass MutableSnapshot extends Snapshot {\n    constructor(snapshot, batch){\n        super(cloneStoreState(snapshot.getStore_INTERNAL(), snapshot.getStore_INTERNAL().getState().currentTree, true), snapshot.getStoreID());\n        _defineProperty(this, \"_batch\", void 0);\n        _defineProperty(this, \"set\", (recoilState, newValueOrUpdater)=>{\n            this.checkRefCount_INTERNAL();\n            const store = this.getStore_INTERNAL(); // This batchUpdates ensures this `set` is applied immediately and you can\n            // read the written value after calling `set`. I would like to remove this\n            // behavior and only batch in `Snapshot.map`, but this would be a breaking\n            // change potentially.\n            this._batch(()=>{\n                updateRetainCount$1(store, recoilState.key, 1);\n                setRecoilValue$1(this.getStore_INTERNAL(), recoilState, newValueOrUpdater);\n            });\n        });\n        _defineProperty(this, \"reset\", (recoilState)=>{\n            this.checkRefCount_INTERNAL();\n            const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.\n            this._batch(()=>{\n                updateRetainCount$1(store, recoilState.key, 1);\n                setRecoilValue$1(this.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1);\n            });\n        });\n        _defineProperty(this, \"setUnvalidatedAtomValues_DEPRECATED\", (values)=>{\n            this.checkRefCount_INTERNAL();\n            const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.\n            batchUpdates$1(()=>{\n                for (const [k, v] of values.entries()){\n                    updateRetainCount$1(store, k, 1);\n                    setUnvalidatedRecoilValue$1(store, new AbstractRecoilValue$2(k), v);\n                }\n            });\n        });\n        this._batch = batch;\n    }\n}\nvar Recoil_Snapshot = {\n    Snapshot,\n    MutableSnapshot,\n    freshSnapshot,\n    cloneSnapshot\n};\nvar Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;\nvar Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;\nvar Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;\nvar Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;\nvar Recoil_Snapshot$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Snapshot: Recoil_Snapshot_1,\n    MutableSnapshot: Recoil_Snapshot_2,\n    freshSnapshot: Recoil_Snapshot_3,\n    cloneSnapshot: Recoil_Snapshot_4\n});\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ function unionSets() {\n    for(var _len = arguments.length, sets = new Array(_len), _key = 0; _key < _len; _key++){\n        sets[_key] = arguments[_key];\n    }\n    const result = new Set();\n    for (const set of sets){\n        for (const value of set){\n            result.add(value);\n        }\n    }\n    return result;\n}\nvar Recoil_unionSets = unionSets;\nconst { useRef } = (react__WEBPACK_IMPORTED_MODULE_0___default());\n/**\n * The same as `useRef()` except that if a function is specified then it will\n * call that function to get the value to initialize the reference with.\n * This is similar to how `useState()` behaves when given a function.  It allows\n * the user to avoid generating the initial value for subsequent renders.\n * The tradeoff is that to set the reference to a function itself you need to\n * nest it: useRefInitOnce(() => () => {...});\n */ function useRefInitOnce(initialValue) {\n    _s();\n    // $FlowExpectedError[incompatible-call]\n    const ref = useRef(initialValue);\n    if (ref.current === initialValue && typeof initialValue === \"function\") {\n        // $FlowExpectedError[incompatible-use]\n        ref.current = initialValue();\n    }\n    return ref;\n}\n_s(useRefInitOnce, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\nvar Recoil_useRefInitOnce = useRefInitOnce;\n// @fb-only: const RecoilusagelogEvent = require('RecoilusagelogEvent');\n// @fb-only: const RecoilUsageLogFalcoEvent = require('RecoilUsageLogFalcoEvent');\n// @fb-only: const URI = require('URI');\nconst { getNextTreeStateVersion: getNextTreeStateVersion$3, makeEmptyStoreState: makeEmptyStoreState$2 } = Recoil_State;\nconst { cleanUpNode: cleanUpNode$2, getDownstreamNodes: getDownstreamNodes$2, initializeNode: initializeNode$2, setNodeValue: setNodeValue$2, setUnvalidatedAtomValue_DEPRECATED: setUnvalidatedAtomValue_DEPRECATED$1 } = Recoil_FunctionalCore;\nconst { graph: graph$2 } = Recoil_Graph;\nconst { cloneGraph: cloneGraph$1 } = Recoil_Graph;\nconst { getNextStoreID: getNextStoreID$2 } = Recoil_Keys;\nconst { createMutableSource: createMutableSource$1, reactMode: reactMode$2 } = Recoil_ReactMode;\nconst { applyAtomValueWrites: applyAtomValueWrites$1 } = Recoil_RecoilValueInterface;\nconst { releaseScheduledRetainablesNow: releaseScheduledRetainablesNow$1 } = Recoil_Retention;\nconst { freshSnapshot: freshSnapshot$1 } = Recoil_Snapshot$1;\nconst { useCallback, useContext, useEffect, useMemo, useRef: useRef$1, useState } = (react__WEBPACK_IMPORTED_MODULE_0___default());\nfunction notInAContext() {\n    throw Recoil_err(\"This component must be used inside a <RecoilRoot> component.\");\n}\nconst defaultStore = Object.freeze({\n    storeID: getNextStoreID$2(),\n    getState: notInAContext,\n    replaceState: notInAContext,\n    getGraph: notInAContext,\n    subscribeToTransactions: notInAContext,\n    addTransactionMetadata: notInAContext\n});\nlet stateReplacerIsBeingExecuted = false;\nfunction startNextTreeIfNeeded(store) {\n    if (stateReplacerIsBeingExecuted) {\n        throw Recoil_err(\"An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.\");\n    }\n    const storeState = store.getState();\n    if (storeState.nextTree === null) {\n        if (Recoil_gkx(\"recoil_memory_managament_2020\") && Recoil_gkx(\"recoil_release_on_cascading_update_killswitch_2021\")) {\n            // If this is a cascading update (that is, rendering due to one state change\n            // invokes a second state change), we won't have cleaned up retainables yet\n            // because this normally happens after notifying components. Do it before\n            // proceeding with the cascading update so that it remains predictable:\n            if (storeState.commitDepth > 0) {\n                releaseScheduledRetainablesNow$1(store);\n            }\n        }\n        const version = storeState.currentTree.version;\n        const nextVersion = getNextTreeStateVersion$3();\n        storeState.nextTree = {\n            ...storeState.currentTree,\n            version: nextVersion,\n            stateID: nextVersion,\n            dirtyAtoms: new Set(),\n            transactionMetadata: {}\n        };\n        storeState.graphsByVersion.set(nextVersion, cloneGraph$1(Recoil_nullthrows(storeState.graphsByVersion.get(version))));\n    }\n}\nconst AppContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext({\n    current: defaultStore\n});\nconst useStoreRef = ()=>{\n    _s1();\n    return useContext(AppContext);\n}; // $FlowExpectedError[incompatible-call]\n_s1(useStoreRef, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst MutableSourceContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(null);\nfunction useRecoilMutableSource() {\n    _s2();\n    const mutableSource = useContext(MutableSourceContext);\n    if (mutableSource == null) {\n        Recoil_expectationViolation(\"Attempted to use a Recoil hook outside of a <RecoilRoot>. \" + \"<RecoilRoot> must be an ancestor of any component that uses \" + \"Recoil hooks.\");\n    }\n    return mutableSource;\n}\n_s2(useRecoilMutableSource, \"+eZDoBoQNh1WubM+URmxLw5FTJk=\");\nfunction notifyComponents(store, storeState, treeState) {\n    const dependentNodes = getDownstreamNodes$2(store, treeState, treeState.dirtyAtoms);\n    for (const key of dependentNodes){\n        const comps = storeState.nodeToComponentSubscriptions.get(key);\n        if (comps) {\n            for (const [_subID, [_debugName, callback]] of comps){\n                callback(treeState);\n            }\n        }\n    }\n}\nfunction sendEndOfBatchNotifications(store) {\n    const storeState = store.getState();\n    const treeState = storeState.currentTree; // Inform transaction subscribers of the transaction:\n    const dirtyAtoms = treeState.dirtyAtoms;\n    if (dirtyAtoms.size) {\n        // Execute Node-specific subscribers before global subscribers\n        for (const [key, subscriptions] of storeState.nodeTransactionSubscriptions){\n            if (dirtyAtoms.has(key)) {\n                for (const [_, subscription] of subscriptions){\n                    subscription(store);\n                }\n            }\n        }\n        for (const [_, subscription] of storeState.transactionSubscriptions){\n            subscription(store);\n        }\n        if (!reactMode$2().early || storeState.suspendedComponentResolvers.size > 0) {\n            // Notifying components is needed to wake from suspense, even when using\n            // early rendering.\n            notifyComponents(store, storeState, treeState); // Wake all suspended components so the right one(s) can try to re-render.\n            // We need to wake up components not just when some asynchronous selector\n            // resolved, but also when changing synchronous values because this may cause\n            // a selector to change from asynchronous to synchronous, in which case there\n            // would be no follow-up asynchronous resolution to wake us up.\n            // TODO OPTIMIZATION Only wake up related downstream components\n            storeState.suspendedComponentResolvers.forEach((cb)=>cb());\n            storeState.suspendedComponentResolvers.clear();\n        }\n    } // Special behavior ONLY invoked by useInterface.\n    // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.\n    storeState.queuedComponentCallbacks_DEPRECATED.forEach((cb)=>cb(treeState));\n    storeState.queuedComponentCallbacks_DEPRECATED.splice(0, storeState.queuedComponentCallbacks_DEPRECATED.length);\n}\nfunction endBatch(store) {\n    const storeState = store.getState();\n    storeState.commitDepth++;\n    try {\n        const { nextTree } = storeState; // Ignore commits that are not because of Recoil transactions -- namely,\n        // because something above RecoilRoot re-rendered:\n        if (nextTree == null) {\n            return;\n        } // nextTree is now committed -- note that copying and reset occurs when\n        // a transaction begins, in startNextTreeIfNeeded:\n        storeState.previousTree = storeState.currentTree;\n        storeState.currentTree = nextTree;\n        storeState.nextTree = null;\n        sendEndOfBatchNotifications(store);\n        if (storeState.previousTree != null) {\n            storeState.graphsByVersion.delete(storeState.previousTree.version);\n        } else {\n            Recoil_recoverableViolation(\"Ended batch with no previous state, which is unexpected\", \"recoil\");\n        }\n        storeState.previousTree = null;\n        if (Recoil_gkx(\"recoil_memory_managament_2020\")) {\n            // Only release retainables if there were no writes during the end of the\n            // batch.  This avoids releasing something we might be about to use.\n            if (nextTree == null) {\n                releaseScheduledRetainablesNow$1(store);\n            }\n        }\n    } finally{\n        storeState.commitDepth--;\n    }\n}\n/*\n * The purpose of the Batcher is to observe when React batches end so that\n * Recoil state changes can be batched. Whenever Recoil state changes, we call\n * setState on the batcher. Then we wait for that change to be committed, which\n * signifies the end of the batch. That's when we respond to the Recoil change.\n */ function Batcher(param) {\n    let { setNotifyBatcherOfChange } = param;\n    _s3();\n    const storeRef = useStoreRef();\n    const [, setState] = useState([]); // $FlowFixMe[incompatible-call]\n    setNotifyBatcherOfChange(()=>setState({}));\n    useEffect(()=>{\n        // $FlowFixMe[incompatible-call]\n        setNotifyBatcherOfChange(()=>setState({})); // If an asynchronous selector resolves after the Batcher is unmounted,\n        // notifyBatcherOfChange will still be called. An error gets thrown whenever\n        // setState is called after a component is already unmounted, so this sets\n        // notifyBatcherOfChange to be a no-op.\n        return ()=>{\n            setNotifyBatcherOfChange(()=>{});\n        };\n    }, [\n        setNotifyBatcherOfChange\n    ]);\n    useEffect(()=>{\n        // enqueueExecution runs this function immediately; it is only used to\n        // manipulate the order of useEffects during tests, since React seems to\n        // call useEffect in an unpredictable order sometimes.\n        Recoil_Queue.enqueueExecution(\"Batcher\", ()=>{\n            endBatch(storeRef.current);\n        });\n    });\n    return null;\n}\n_s3(Batcher, \"hW1eJitInZrOO0p+97whgnpfou8=\", false, function() {\n    return [\n        useStoreRef\n    ];\n});\n_c1 = Batcher;\nif (true) {\n    if ( true && !window.$recoilDebugStates) {\n        window.$recoilDebugStates = [];\n    }\n} // When removing this deprecated function, remove stateBySettingRecoilValue\n// which will no longer be needed.\nfunction initialStoreState_DEPRECATED(store, initializeState) {\n    const initial = makeEmptyStoreState$2();\n    initializeState({\n        set: (atom, value)=>{\n            const state = initial.currentTree;\n            const writes = setNodeValue$2(store, state, atom.key, value);\n            const writtenNodes = new Set(writes.keys());\n            const nonvalidatedAtoms = state.nonvalidatedAtoms.clone();\n            for (const n of writtenNodes){\n                nonvalidatedAtoms.delete(n);\n            }\n            initial.currentTree = {\n                ...state,\n                dirtyAtoms: Recoil_unionSets(state.dirtyAtoms, writtenNodes),\n                atomValues: applyAtomValueWrites$1(state.atomValues, writes),\n                // NB: PLEASE un-export applyAtomValueWrites when deleting this code\n                nonvalidatedAtoms\n            };\n        },\n        setUnvalidatedAtomValues: (atomValues)=>{\n            // FIXME replace this with a mutative loop\n            atomValues.forEach((v, k)=>{\n                initial.currentTree = setUnvalidatedAtomValue_DEPRECATED$1(initial.currentTree, k, v);\n            });\n        }\n    });\n    return initial;\n} // Initialize state snapshot for <RecoilRoot> for the initializeState prop.\n// Atom effect initialization takes precedence over this prop.\n// Any atom effects will be run before initialization, but then cleaned up,\n// they are then re-run when used as part of rendering.  These semantics are\n// compatible with React StrictMode where effects may be re-run multiple times\n// but state initialization only happens once the first time.\nfunction initialStoreState(initializeState) {\n    // Initialize a snapshot and get its store\n    const snapshot = freshSnapshot$1(initializeState);\n    const storeState = snapshot.getStore_INTERNAL().getState(); // Counteract the snapshot auto-release\n    snapshot.retain(); // Cleanup any effects run during initialization and clear the handlers so\n    // they will re-initialize if used during rendering.  This allows atom effect\n    // initialization to take precedence over initializeState and be compatible\n    // with StrictMode semantics.\n    storeState.nodeCleanupFunctions.forEach((cleanup)=>cleanup());\n    storeState.nodeCleanupFunctions.clear();\n    return storeState;\n}\nlet nextID = 0;\nfunction RecoilRoot_INTERNAL(param) {\n    let { initializeState_DEPRECATED, initializeState, store_INTERNAL: storeProp, // For use with React \"context bridging\"\n    children } = param;\n    _s4();\n    // prettier-ignore\n    // @fb-only: useEffect(() => {\n    // @fb-only: if (gkx('recoil_usage_logging')) {\n    // @fb-only: try {\n    // @fb-only: RecoilUsageLogFalcoEvent.log(() => ({\n    // @fb-only: type: RecoilusagelogEvent.RECOIL_ROOT_MOUNTED,\n    // @fb-only: path: URI.getRequestURI().getPath(),\n    // @fb-only: }));\n    // @fb-only: } catch {\n    // @fb-only: recoverableViolation(\n    // @fb-only: 'Error when logging Recoil Usage event',\n    // @fb-only: 'recoil',\n    // @fb-only: );\n    // @fb-only: }\n    // @fb-only: }\n    // @fb-only: }, []);\n    let storeStateRef; // eslint-disable-line prefer-const\n    const getGraph = (version)=>{\n        const graphs = storeStateRef.current.graphsByVersion;\n        if (graphs.has(version)) {\n            return Recoil_nullthrows(graphs.get(version));\n        }\n        const newGraph = graph$2();\n        graphs.set(version, newGraph);\n        return newGraph;\n    };\n    const subscribeToTransactions = (callback, key)=>{\n        if (key == null) {\n            // Global transaction subscriptions\n            const { transactionSubscriptions } = storeRef.current.getState();\n            const id = nextID++;\n            transactionSubscriptions.set(id, callback);\n            return {\n                release: ()=>{\n                    transactionSubscriptions.delete(id);\n                }\n            };\n        } else {\n            // Node-specific transaction subscriptions:\n            const { nodeTransactionSubscriptions } = storeRef.current.getState();\n            if (!nodeTransactionSubscriptions.has(key)) {\n                nodeTransactionSubscriptions.set(key, new Map());\n            }\n            const id = nextID++;\n            Recoil_nullthrows(nodeTransactionSubscriptions.get(key)).set(id, callback);\n            return {\n                release: ()=>{\n                    const subs = nodeTransactionSubscriptions.get(key);\n                    if (subs) {\n                        subs.delete(id);\n                        if (subs.size === 0) {\n                            nodeTransactionSubscriptions.delete(key);\n                        }\n                    }\n                }\n            };\n        }\n    };\n    const addTransactionMetadata = (metadata)=>{\n        startNextTreeIfNeeded(storeRef.current);\n        for (const k of Object.keys(metadata)){\n            Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k] = metadata[k];\n        }\n    };\n    const replaceState = (replacer)=>{\n        startNextTreeIfNeeded(storeRef.current); // Use replacer to get the next state:\n        const nextTree = Recoil_nullthrows(storeStateRef.current.nextTree);\n        let replaced;\n        try {\n            stateReplacerIsBeingExecuted = true;\n            replaced = replacer(nextTree);\n        } finally{\n            stateReplacerIsBeingExecuted = false;\n        }\n        if (replaced === nextTree) {\n            return;\n        }\n        if (true) {\n            if (true) {\n                window.$recoilDebugStates.push(replaced); // TODO this shouldn't happen here because it's not batched\n            }\n        } // Save changes to nextTree and schedule a React update:\n        storeStateRef.current.nextTree = replaced;\n        if (reactMode$2().early) {\n            notifyComponents(storeRef.current, storeStateRef.current, replaced);\n        }\n        Recoil_nullthrows(notifyBatcherOfChange.current)();\n    };\n    const notifyBatcherOfChange = useRef$1(null);\n    const setNotifyBatcherOfChange = useCallback((x)=>{\n        notifyBatcherOfChange.current = x;\n    }, [\n        notifyBatcherOfChange\n    ]);\n    const storeRef = Recoil_useRefInitOnce(()=>storeProp !== null && storeProp !== void 0 ? storeProp : {\n            storeID: getNextStoreID$2(),\n            getState: ()=>storeStateRef.current,\n            replaceState,\n            getGraph,\n            subscribeToTransactions,\n            addTransactionMetadata\n        });\n    if (storeProp != null) {\n        storeRef.current = storeProp;\n    }\n    storeStateRef = Recoil_useRefInitOnce(()=>initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(storeRef.current, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$2());\n    const mutableSource = useMemo(()=>createMutableSource$1 === null || createMutableSource$1 === void 0 ? void 0 : createMutableSource$1(storeStateRef, ()=>storeStateRef.current.currentTree.version), [\n        storeStateRef\n    ]); // Cleanup when the <RecoilRoot> is unmounted\n    useEffect(()=>{\n        // React is free to call effect cleanup handlers and effects at will, the\n        // deps array is only an optimization.  For example, React strict mode\n        // will execute each effect twice for testing.  Therefore, we need symmetry\n        // to re-initialize all known atoms after they were cleaned up.\n        const store = storeRef.current;\n        for (const atomKey of new Set(store.getState().knownAtoms)){\n            initializeNode$2(store, atomKey, \"get\");\n        }\n        return ()=>{\n            for (const atomKey of store.getState().knownAtoms){\n                cleanUpNode$2(store, atomKey);\n            }\n        };\n    }, [\n        storeRef\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AppContext.Provider, {\n        value: storeRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MutableSourceContext.Provider, {\n        value: mutableSource\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Batcher, {\n        setNotifyBatcherOfChange: setNotifyBatcherOfChange\n    }), children));\n}\n_s4(RecoilRoot_INTERNAL, \"e0ZlGXUUjW0H0/kTLiqIU/2CoS8=\", false, function() {\n    return [\n        useRef$1\n    ];\n});\n_c2 = RecoilRoot_INTERNAL;\nfunction RecoilRoot(props) {\n    _s5();\n    const { override, ...propsExceptOverride } = props;\n    const ancestorStoreRef = useStoreRef();\n    if (override === false && ancestorStoreRef.current !== defaultStore) {\n        // If ancestorStoreRef.current !== defaultStore, it means that this\n        // RecoilRoot is not nested within another.\n        return props.children;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RecoilRoot_INTERNAL, propsExceptOverride);\n}\n_s5(RecoilRoot, \"Qr/5pnRCQzWuDJiEAY1nJBultrE=\", false, function() {\n    return [\n        useStoreRef\n    ];\n});\n_c3 = RecoilRoot;\nfunction useRecoilStoreID() {\n    _s6();\n    return useStoreRef().current.storeID;\n}\n_s6(useRecoilStoreID, \"ndm+r8POnR+w6+MrX9Jl/zqEg6c=\", false, function() {\n    return [\n        useStoreRef\n    ];\n});\nvar Recoil_RecoilRoot = {\n    RecoilRoot,\n    useStoreRef,\n    useRecoilMutableSource,\n    useRecoilStoreID,\n    notifyComponents_FOR_TESTING: notifyComponents,\n    sendEndOfBatchNotifications_FOR_TESTING: sendEndOfBatchNotifications\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ function shallowArrayEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    for(let i = 0, l = a.length; i < l; i++){\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nvar Recoil_shallowArrayEqual = shallowArrayEqual;\nconst { useEffect: useEffect$1, useRef: useRef$2 } = (react__WEBPACK_IMPORTED_MODULE_0___default());\nfunction usePrevious(value) {\n    _s7();\n    const ref = useRef$2();\n    useEffect$1(()=>{\n        // $FlowFixMe[incompatible-type]\n        ref.current = value;\n    });\n    return ref.current;\n}\n_s7(usePrevious, \"kksd3a/iGXmPyr8HY5TVlClP0pY=\", false, function() {\n    return [\n        useRef$2,\n        useEffect$1\n    ];\n});\nvar Recoil_usePrevious = usePrevious;\nconst { useStoreRef: useStoreRef$1 } = Recoil_RecoilRoot;\nconst { SUSPENSE_TIMEOUT_MS: SUSPENSE_TIMEOUT_MS$1 } = Recoil_Retention;\nconst { updateRetainCount: updateRetainCount$2 } = Recoil_Retention;\nconst { RetentionZone: RetentionZone$3 } = Recoil_RetentionZone;\nconst { useEffect: useEffect$2, useRef: useRef$3 } = (react__WEBPACK_IMPORTED_MODULE_0___default());\nconst { isSSR: isSSR$2 } = Recoil_Environment;\n// I don't see a way to avoid the any type here because we want to accept readable\n// and writable values with any type parameter, but normally with writable ones\n// RecoilState<SomeT> is not a subtype of RecoilState<mixed>.\n// flowlint-line unclear-type:off\nfunction useRetain(toRetain) {\n    _s8();\n    if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        return;\n    } // eslint-disable-next-line fb-www/react-hooks\n    return useRetain_ACTUAL(toRetain);\n}\n_s8(useRetain, \"d+YrL5k9FGpC3I5gy/vXF5wbtQM=\", false, function() {\n    return [\n        useRetain_ACTUAL\n    ];\n});\nfunction useRetain_ACTUAL(toRetain) {\n    _s9();\n    const array = Array.isArray(toRetain) ? toRetain : [\n        toRetain\n    ];\n    const retainables = array.map((a)=>a instanceof RetentionZone$3 ? a : a.key);\n    const storeRef = useStoreRef$1();\n    useEffect$2(()=>{\n        if (!Recoil_gkx(\"recoil_memory_managament_2020\")) {\n            return;\n        }\n        const store = storeRef.current;\n        if (timeoutID.current && !isSSR$2) {\n            // Already performed a temporary retain on render, simply cancel the release\n            // of that temporary retain.\n            window.clearTimeout(timeoutID.current);\n            timeoutID.current = null;\n        } else {\n            for (const r of retainables){\n                updateRetainCount$2(store, r, 1);\n            }\n        }\n        return ()=>{\n            for (const r of retainables){\n                updateRetainCount$2(store, r, -1);\n            }\n        }; // eslint-disable-next-line fb-www/react-hooks-deps\n    }, [\n        storeRef,\n        ...retainables\n    ]); // We want to retain if the component suspends. This is terrible but the Suspense\n    // API affords us no better option. If we suspend and never commit after some\n    // seconds, then release. The 'actual' retain/release in the effect above\n    // cancels this.\n    const timeoutID = useRef$3();\n    const previousRetainables = Recoil_usePrevious(retainables);\n    if (!isSSR$2 && (previousRetainables === undefined || !Recoil_shallowArrayEqual(previousRetainables, retainables))) {\n        const store = storeRef.current;\n        for (const r of retainables){\n            updateRetainCount$2(store, r, 1);\n        }\n        if (previousRetainables) {\n            for (const r of previousRetainables){\n                updateRetainCount$2(store, r, -1);\n            }\n        }\n        if (timeoutID.current) {\n            window.clearTimeout(timeoutID.current);\n        }\n        timeoutID.current = window.setTimeout(()=>{\n            timeoutID.current = null;\n            for (const r of retainables){\n                updateRetainCount$2(store, r, -1);\n            }\n        }, SUSPENSE_TIMEOUT_MS$1);\n    }\n}\n_s9(useRetain_ACTUAL, \"aw67vomgzXD807e3fs38765q+VY=\", false, function() {\n    return [\n        useStoreRef$1,\n        useEffect$2,\n        useRef$3\n    ];\n});\nvar Recoil_useRetain = useRetain;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * THIS CODE HAS BEEN COMMENTED OUT INTENTIONALLY\n *\n * This technique of getting the component name is imperfect, since it both only\n * works in a non-minified code base, and more importantly introduces performance\n * problems since it relies in throwing errors which is an expensive operation.\n *\n * At some point we may want to reevaluate this technique hence why we have commented\n * this code out, rather than delete it all together.\n */ // const {useRef} = require('react');\n// const gkx = require('recoil-shared/util/Recoil_gkx');\n// const stackTraceParser = require('recoil-shared/util/Recoil_stackTraceParser');\nfunction useComponentName() {\n    // const nameRef = useRef();\n    // if (__DEV__) {\n    //   if (gkx('recoil_infer_component_names')) {\n    //     if (nameRef.current === undefined) {\n    //       // There is no blessed way to determine the calling React component from\n    //       // within a hook. This hack uses the fact that hooks must start with 'use'\n    //       // and that hooks are either called by React Components or other hooks. It\n    //       // follows therefore, that to find the calling component, you simply need\n    //       // to look down the stack and find the first function which doesn't start\n    //       // with 'use'. We are only enabling this in dev for now, since once the\n    //       // codebase is minified, the naming assumptions no longer hold true.\n    //       // eslint-disable-next-line fb-www/no-new-error\n    //       const frames = stackTraceParser(new Error().stack);\n    //       for (const {methodName} of frames) {\n    //         // I observed cases where the frame was of the form 'Object.useXXX'\n    //         // hence why I'm searching for hooks following a word boundary\n    //         if (!methodName.match(/\\buse[^\\b]+$/)) {\n    //           return (nameRef.current = methodName);\n    //         }\n    //       }\n    //       nameRef.current = null;\n    //     }\n    //     return nameRef.current ?? '<unable to determine component name>';\n    //   }\n    // }\n    // @fb-only: return \"<component name only available when both in dev mode and when passing GK 'recoil_infer_component_names'>\";\n    return \"<component name not available>\"; // @oss-only\n}\nvar Recoil_useComponentName = useComponentName;\nconst { batchUpdates: batchUpdates$2 } = Recoil_Batching;\nconst { DEFAULT_VALUE: DEFAULT_VALUE$2 } = Recoil_Node;\nconst { currentRendererSupportsUseSyncExternalStore: currentRendererSupportsUseSyncExternalStore$1, reactMode: reactMode$3, useMutableSource: useMutableSource$1, useSyncExternalStore: useSyncExternalStore$1 } = Recoil_ReactMode;\nconst { useRecoilMutableSource: useRecoilMutableSource$1, useStoreRef: useStoreRef$2 } = Recoil_RecoilRoot;\nconst { isRecoilValue: isRecoilValue$2 } = Recoil_RecoilValue$1;\nconst { AbstractRecoilValue: AbstractRecoilValue$3, getRecoilValueAsLoadable: getRecoilValueAsLoadable$2, setRecoilValue: setRecoilValue$2, setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$2, subscribeToRecoilValue: subscribeToRecoilValue$1 } = Recoil_RecoilValueInterface;\nconst { useCallback: useCallback$1, useEffect: useEffect$3, useMemo: useMemo$1, useRef: useRef$4, useState: useState$1 } = (react__WEBPACK_IMPORTED_MODULE_0___default());\nconst { setByAddingToSet: setByAddingToSet$2 } = Recoil_CopyOnWrite;\nconst { isSSR: isSSR$3 } = Recoil_Environment;\nfunction handleLoadable(loadable, recoilValue, storeRef) {\n    // We can't just throw the promise we are waiting on to Suspense.  If the\n    // upstream dependencies change it may produce a state in which the component\n    // can render, but it would still be suspended on a Promise that may never resolve.\n    if (loadable.state === \"hasValue\") {\n        return loadable.contents;\n    } else if (loadable.state === \"loading\") {\n        const promise = new Promise((resolve)=>{\n            const suspendedComponentResolvers = storeRef.current.getState().suspendedComponentResolvers;\n            suspendedComponentResolvers.add(resolve); // SSR should clear out the wake-up resolver if the Promise is resolved\n            // to avoid infinite loops.  (See https://github.com/facebookexperimental/Recoil/pull/2073)\n            if (isSSR$3 && Recoil_isPromise(loadable.contents)) {\n                loadable.contents.finally(()=>{\n                    suspendedComponentResolvers.delete(resolve);\n                });\n            }\n        }); // $FlowExpectedError Flow(prop-missing) for integrating with tools that inspect thrown promises @fb-only\n        // @fb-only: promise.displayName = `Recoil State: ${recoilValue.key}`;\n        throw promise;\n    } else if (loadable.state === \"hasError\") {\n        throw loadable.contents;\n    } else {\n        throw Recoil_err('Invalid value of loadable atom \"'.concat(recoilValue.key, '\"'));\n    }\n}\nfunction validateRecoilValue(recoilValue, hookName // $FlowFixMe[missing-local-annot]\n) {\n    if (!isRecoilValue$2(recoilValue)) {\n        throw Recoil_err(\"Invalid argument to \".concat(hookName, \": expected an atom or selector but got \").concat(String(recoilValue)));\n    }\n}\n/**\n * Various things are broken with useRecoilInterface, particularly concurrent\n * mode, React strict mode, and memory management. They will not be fixed.\n * */ function useRecoilInterface_DEPRECATED() {\n    _s10();\n    const componentName = Recoil_useComponentName();\n    const storeRef = useStoreRef$2(); // eslint-disable-next-line fb-www/react-no-unused-state-hook\n    const [, forceUpdate] = useState$1([]);\n    const recoilValuesUsed = useRef$4(new Set());\n    recoilValuesUsed.current = new Set(); // Track the RecoilValues used just during this render\n    const previousSubscriptions = useRef$4(new Set());\n    const subscriptions = useRef$4(new Map());\n    const unsubscribeFrom = useCallback$1((key)=>{\n        const sub = subscriptions.current.get(key);\n        if (sub) {\n            sub.release();\n            subscriptions.current.delete(key);\n        }\n    }, [\n        subscriptions\n    ]);\n    const updateState = useCallback$1((_state, key)=>{\n        if (subscriptions.current.has(key)) {\n            forceUpdate([]);\n        }\n    }, []); // Effect to add/remove subscriptions as nodes are used\n    useEffect$3(()=>{\n        const store = storeRef.current;\n        Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach((key)=>{\n            if (subscriptions.current.has(key)) {\n                Recoil_expectationViolation('Double subscription to RecoilValue \"'.concat(key, '\"'));\n                return;\n            }\n            const sub = subscribeToRecoilValue$1(store, new AbstractRecoilValue$3(key), (state)=>updateState(state, key), componentName);\n            subscriptions.current.set(key, sub);\n            /**\n       * Since we're subscribing in an effect we need to update to the latest\n       * value of the atom since it may have changed since we rendered. We can\n       * go ahead and do that now, unless we're in the middle of a batch --\n       * in which case we should do it at the end of the batch, due to the\n       * following edge case: Suppose an atom is updated in another useEffect\n       * of this same component. Then the following sequence of events occur:\n       * 1. Atom is updated and subs fired (but we may not be subscribed\n       *    yet depending on order of effects, so we miss this) Updated value\n       *    is now in nextTree, but not currentTree.\n       * 2. This effect happens. We subscribe and update.\n       * 3. From the update we re-render and read currentTree, with old value.\n       * 4. Batcher's effect sets currentTree to nextTree.\n       * In this sequence we miss the update. To avoid that, add the update\n       * to queuedComponentCallback if a batch is in progress.\n       */ // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.\n            const state = store.getState();\n            if (state.nextTree) {\n                store.getState().queuedComponentCallbacks_DEPRECATED.push(()=>{\n                    updateState(store.getState(), key);\n                });\n            } else {\n                updateState(store.getState(), key);\n            }\n        });\n        Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach((key)=>{\n            unsubscribeFrom(key);\n        });\n        previousSubscriptions.current = recoilValuesUsed.current;\n    }); // Effect to unsubscribe from all when unmounting\n    useEffect$3(()=>{\n        const currentSubscriptions = subscriptions.current; // Restore subscriptions that were cleared due to StrictMode running this effect twice\n        Recoil_differenceSets(recoilValuesUsed.current, new Set(currentSubscriptions.keys())).forEach((key)=>{\n            const sub = subscribeToRecoilValue$1(storeRef.current, new AbstractRecoilValue$3(key), (state)=>updateState(state, key), componentName);\n            currentSubscriptions.set(key, sub);\n        });\n        return ()=>currentSubscriptions.forEach((_, key)=>unsubscribeFrom(key));\n    }, [\n        componentName,\n        storeRef,\n        unsubscribeFrom,\n        updateState\n    ]);\n    return useMemo$1(()=>{\n        var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n        // eslint-disable-next-line no-shadow\n        function useSetRecoilState(recoilState) {\n            if (true) {\n                validateRecoilValue(recoilState, \"useSetRecoilState\");\n            }\n            return (newValueOrUpdater)=>{\n                setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);\n            };\n        } // eslint-disable-next-line no-shadow\n        function useResetRecoilState(recoilState) {\n            if (true) {\n                validateRecoilValue(recoilState, \"useResetRecoilState\");\n            }\n            return ()=>setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);\n        } // eslint-disable-next-line no-shadow\n        function useRecoilValueLoadable(recoilValue) {\n            var _storeState$nextTree;\n            if (true) {\n                validateRecoilValue(recoilValue, \"useRecoilValueLoadable\");\n            }\n            if (!recoilValuesUsed.current.has(recoilValue.key)) {\n                recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);\n            } // TODO Restore optimization to memoize lookup\n            const storeState = storeRef.current.getState();\n            return getRecoilValueAsLoadable$2(storeRef.current, recoilValue, reactMode$3().early ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : storeState.currentTree);\n        } // eslint-disable-next-line no-shadow\n        function useRecoilValue(recoilValue) {\n            _s();\n            if (true) {\n                validateRecoilValue(recoilValue, \"useRecoilValue\");\n            }\n            const loadable = useRecoilValueLoadable(recoilValue);\n            return handleLoadable(loadable, recoilValue, storeRef);\n        } // eslint-disable-next-line no-shadow\n        _s(useRecoilValue, \"v2T9AUkvC9UCe1jwaYSAtwAdEFU=\", false, function() {\n            return [\n                useRecoilValueLoadable\n            ];\n        });\n        function useRecoilState(recoilState) {\n            _s1();\n            if (true) {\n                validateRecoilValue(recoilState, \"useRecoilState\");\n            }\n            return [\n                useRecoilValue(recoilState),\n                useSetRecoilState(recoilState)\n            ];\n        } // eslint-disable-next-line no-shadow\n        _s1(useRecoilState, \"msEl7ALZc52vkqN6X20sfA7eHpY=\", false, function() {\n            return [\n                useRecoilValue,\n                useSetRecoilState\n            ];\n        });\n        function useRecoilStateLoadable(recoilState) {\n            _s2();\n            if (true) {\n                validateRecoilValue(recoilState, \"useRecoilStateLoadable\");\n            }\n            return [\n                useRecoilValueLoadable(recoilState),\n                useSetRecoilState(recoilState)\n            ];\n        }\n        _s2(useRecoilStateLoadable, \"PDFziEpi0LwwYh1DiWL3VJrLfjI=\", false, function() {\n            return [\n                useRecoilValueLoadable,\n                useSetRecoilState\n            ];\n        });\n        return {\n            getRecoilValue: useRecoilValue,\n            getRecoilValueLoadable: useRecoilValueLoadable,\n            getRecoilState: useRecoilState,\n            getRecoilStateLoadable: useRecoilStateLoadable,\n            getSetRecoilState: useSetRecoilState,\n            getResetRecoilState: useResetRecoilState\n        };\n    }, [\n        recoilValuesUsed,\n        storeRef\n    ]);\n}\n_s10(useRecoilInterface_DEPRECATED, \"q7cUZPIbq7Pi3BsDtUKI7nipngE=\", false, function() {\n    return [\n        useStoreRef$2,\n        useState$1,\n        useRef$4,\n        useRef$4,\n        useRef$4,\n        useCallback$1,\n        useCallback$1,\n        useEffect$3,\n        useEffect$3,\n        useMemo$1\n    ];\n});\nconst recoilComponentGetRecoilValueCount_FOR_TESTING = {\n    current: 0\n};\nfunction useRecoilValueLoadable_SYNC_EXTERNAL_STORE(recoilValue) {\n    _s11();\n    const storeRef = useStoreRef$2();\n    const componentName = Recoil_useComponentName();\n    const getSnapshot = useCallback$1(()=>{\n        var _storeState$nextTree2;\n        if (true) {\n            recoilComponentGetRecoilValueCount_FOR_TESTING.current++;\n        }\n        const store = storeRef.current;\n        const storeState = store.getState();\n        const treeState = reactMode$3().early ? (_storeState$nextTree2 = storeState.nextTree) !== null && _storeState$nextTree2 !== void 0 ? _storeState$nextTree2 : storeState.currentTree : storeState.currentTree;\n        const loadable = getRecoilValueAsLoadable$2(store, recoilValue, treeState);\n        return {\n            loadable,\n            key: recoilValue.key\n        };\n    }, [\n        storeRef,\n        recoilValue\n    ]); // Memoize the state to avoid unnecessary rerenders\n    const memoizePreviousSnapshot = useCallback$1((getState)=>{\n        let prevState;\n        return ()=>{\n            var _prevState, _prevState2;\n            const nextState = getState();\n            if ((_prevState = prevState) !== null && _prevState !== void 0 && _prevState.loadable.is(nextState.loadable) && ((_prevState2 = prevState) === null || _prevState2 === void 0 ? void 0 : _prevState2.key) === nextState.key) {\n                return prevState;\n            }\n            prevState = nextState;\n            return nextState;\n        };\n    }, []);\n    const getMemoizedSnapshot = useMemo$1(()=>memoizePreviousSnapshot(getSnapshot), [\n        getSnapshot,\n        memoizePreviousSnapshot\n    ]);\n    const subscribe = useCallback$1((notify)=>{\n        const store = storeRef.current;\n        const subscription = subscribeToRecoilValue$1(store, recoilValue, notify, componentName);\n        return subscription.release;\n    }, [\n        storeRef,\n        recoilValue,\n        componentName\n    ]);\n    return useSyncExternalStore$1(subscribe, getMemoizedSnapshot, getMemoizedSnapshot // getServerSnapshot() for SSR support\n    ).loadable;\n}\n_s11(useRecoilValueLoadable_SYNC_EXTERNAL_STORE, \"Y/MXIijy+7ucfT02rvrIPKfoKwE=\", false, function() {\n    return [\n        useStoreRef$2,\n        useCallback$1,\n        useCallback$1,\n        useMemo$1,\n        useCallback$1,\n        useSyncExternalStore$1\n    ];\n});\nfunction useRecoilValueLoadable_MUTABLE_SOURCE(recoilValue) {\n    _s12();\n    const storeRef = useStoreRef$2();\n    const getLoadable = useCallback$1(()=>{\n        var _storeState$nextTree3;\n        const store = storeRef.current;\n        const storeState = store.getState();\n        const treeState = reactMode$3().early ? (_storeState$nextTree3 = storeState.nextTree) !== null && _storeState$nextTree3 !== void 0 ? _storeState$nextTree3 : storeState.currentTree : storeState.currentTree;\n        return getRecoilValueAsLoadable$2(store, recoilValue, treeState);\n    }, [\n        storeRef,\n        recoilValue\n    ]);\n    const getLoadableWithTesting = useCallback$1(()=>{\n        if (true) {\n            recoilComponentGetRecoilValueCount_FOR_TESTING.current++;\n        }\n        return getLoadable();\n    }, [\n        getLoadable\n    ]);\n    const componentName = Recoil_useComponentName();\n    const subscribe = useCallback$1((_storeState, notify)=>{\n        const store = storeRef.current;\n        const subscription = subscribeToRecoilValue$1(store, recoilValue, ()=>{\n            if (!Recoil_gkx(\"recoil_suppress_rerender_in_callback\")) {\n                return notify();\n            } // Only re-render if the value has changed.\n            // This will evaluate the atom/selector now as well as when the\n            // component renders, but that may help with prefetching.\n            const newLoadable = getLoadable();\n            if (!prevLoadableRef.current.is(newLoadable)) {\n                notify();\n            } // If the component is suspended then the effect setting prevLoadableRef\n            // will not run.  So, set the previous value here when its subscription\n            // is fired to wake it up.  We can't just rely on this, though, because\n            // this only executes when an atom/selector is dirty and the atom/selector\n            // passed to the hook can dynamically change.\n            prevLoadableRef.current = newLoadable;\n        }, componentName);\n        return subscription.release;\n    }, [\n        storeRef,\n        recoilValue,\n        componentName,\n        getLoadable\n    ]);\n    const source = useRecoilMutableSource$1();\n    if (source == null) {\n        throw Recoil_err(\"Recoil hooks must be used in components contained within a <RecoilRoot> component.\");\n    }\n    const loadable = useMutableSource$1(source, getLoadableWithTesting, subscribe);\n    const prevLoadableRef = useRef$4(loadable);\n    useEffect$3(()=>{\n        prevLoadableRef.current = loadable;\n    });\n    return loadable;\n}\n_s12(useRecoilValueLoadable_MUTABLE_SOURCE, \"OhmUZWiKroEiSad2hu8B5ek3zZA=\", false, function() {\n    return [\n        useStoreRef$2,\n        useCallback$1,\n        useCallback$1,\n        useCallback$1,\n        useRecoilMutableSource$1,\n        useMutableSource$1,\n        useRef$4,\n        useEffect$3\n    ];\n});\nfunction useRecoilValueLoadable_TRANSITION_SUPPORT(recoilValue) {\n    _s13();\n    const storeRef = useStoreRef$2();\n    const componentName = Recoil_useComponentName(); // Accessors to get the current state\n    const getLoadable = useCallback$1(()=>{\n        var _storeState$nextTree4;\n        if (true) {\n            recoilComponentGetRecoilValueCount_FOR_TESTING.current++;\n        }\n        const store = storeRef.current;\n        const storeState = store.getState();\n        const treeState = reactMode$3().early ? (_storeState$nextTree4 = storeState.nextTree) !== null && _storeState$nextTree4 !== void 0 ? _storeState$nextTree4 : storeState.currentTree : storeState.currentTree;\n        return getRecoilValueAsLoadable$2(store, recoilValue, treeState);\n    }, [\n        storeRef,\n        recoilValue\n    ]);\n    const getState = useCallback$1(()=>({\n            loadable: getLoadable(),\n            key: recoilValue.key\n        }), [\n        getLoadable,\n        recoilValue.key\n    ]); // Memoize state snapshots\n    const updateState = useCallback$1((prevState)=>{\n        const nextState = getState();\n        return prevState.loadable.is(nextState.loadable) && prevState.key === nextState.key ? prevState : nextState;\n    }, [\n        getState\n    ]); // Subscribe to Recoil state changes\n    useEffect$3(()=>{\n        const subscription = subscribeToRecoilValue$1(storeRef.current, recoilValue, (_state)=>{\n            setState(updateState);\n        }, componentName); // Update state in case we are using a different key\n        setState(updateState);\n        return subscription.release;\n    }, [\n        componentName,\n        recoilValue,\n        storeRef,\n        updateState\n    ]); // Get the current state\n    const [state, setState] = useState$1(getState); // If we changed keys, then return the state for the new key.\n    // This is important in case the old key would cause the component to suspend.\n    // We don't have to set the new state here since the subscribing effect above\n    // will do that.\n    return state.key !== recoilValue.key ? getState().loadable : state.loadable;\n}\n_s13(useRecoilValueLoadable_TRANSITION_SUPPORT, \"6OBAu30xCV25g/ie0rxhGJeZsl4=\", false, function() {\n    return [\n        useStoreRef$2,\n        useCallback$1,\n        useCallback$1,\n        useCallback$1,\n        useEffect$3,\n        useState$1\n    ];\n});\nfunction useRecoilValueLoadable_LEGACY(recoilValue) {\n    _s14();\n    const storeRef = useStoreRef$2(); // eslint-disable-next-line fb-www/react-no-unused-state-hook\n    const [, forceUpdate] = useState$1([]);\n    const componentName = Recoil_useComponentName();\n    const getLoadable = useCallback$1(()=>{\n        var _storeState$nextTree5;\n        if (true) {\n            recoilComponentGetRecoilValueCount_FOR_TESTING.current++;\n        }\n        const store = storeRef.current;\n        const storeState = store.getState();\n        const treeState = reactMode$3().early ? (_storeState$nextTree5 = storeState.nextTree) !== null && _storeState$nextTree5 !== void 0 ? _storeState$nextTree5 : storeState.currentTree : storeState.currentTree;\n        return getRecoilValueAsLoadable$2(store, recoilValue, treeState);\n    }, [\n        storeRef,\n        recoilValue\n    ]);\n    const loadable = getLoadable();\n    const prevLoadableRef = useRef$4(loadable);\n    useEffect$3(()=>{\n        prevLoadableRef.current = loadable;\n    });\n    useEffect$3(()=>{\n        const store = storeRef.current;\n        const storeState = store.getState();\n        const subscription = subscribeToRecoilValue$1(store, recoilValue, (_state)=>{\n            var _prevLoadableRef$curr;\n            if (!Recoil_gkx(\"recoil_suppress_rerender_in_callback\")) {\n                return forceUpdate([]);\n            }\n            const newLoadable = getLoadable();\n            if (!((_prevLoadableRef$curr = prevLoadableRef.current) !== null && _prevLoadableRef$curr !== void 0 && _prevLoadableRef$curr.is(newLoadable))) {\n                // $FlowFixMe[incompatible-call]\n                forceUpdate(newLoadable);\n            }\n            prevLoadableRef.current = newLoadable;\n        }, componentName);\n        /**\n     * Since we're subscribing in an effect we need to update to the latest\n     * value of the atom since it may have changed since we rendered. We can\n     * go ahead and do that now, unless we're in the middle of a batch --\n     * in which case we should do it at the end of the batch, due to the\n     * following edge case: Suppose an atom is updated in another useEffect\n     * of this same component. Then the following sequence of events occur:\n     * 1. Atom is updated and subs fired (but we may not be subscribed\n     *    yet depending on order of effects, so we miss this) Updated value\n     *    is now in nextTree, but not currentTree.\n     * 2. This effect happens. We subscribe and update.\n     * 3. From the update we re-render and read currentTree, with old value.\n     * 4. Batcher's effect sets currentTree to nextTree.\n     * In this sequence we miss the update. To avoid that, add the update\n     * to queuedComponentCallback if a batch is in progress.\n     */ if (storeState.nextTree) {\n            store.getState().queuedComponentCallbacks_DEPRECATED.push(()=>{\n                // $FlowFixMe[incompatible-type]\n                prevLoadableRef.current = null;\n                forceUpdate([]);\n            });\n        } else {\n            var _prevLoadableRef$curr2;\n            if (!Recoil_gkx(\"recoil_suppress_rerender_in_callback\")) {\n                return forceUpdate([]);\n            }\n            const newLoadable = getLoadable();\n            if (!((_prevLoadableRef$curr2 = prevLoadableRef.current) !== null && _prevLoadableRef$curr2 !== void 0 && _prevLoadableRef$curr2.is(newLoadable))) {\n                // $FlowFixMe[incompatible-call]\n                forceUpdate(newLoadable);\n            }\n            prevLoadableRef.current = newLoadable;\n        }\n        return subscription.release;\n    }, [\n        componentName,\n        getLoadable,\n        recoilValue,\n        storeRef\n    ]);\n    return loadable;\n}\n_s14(useRecoilValueLoadable_LEGACY, \"h1u4jXAsOHm5I5NPI8Z0kUxPPBE=\", false, function() {\n    return [\n        useStoreRef$2,\n        useState$1,\n        useCallback$1,\n        useRef$4,\n        useEffect$3,\n        useEffect$3\n    ];\n});\n/**\n  Like useRecoilValue(), but either returns the value if available or\n  just undefined if not available for any reason, such as pending or error.\n*/ function useRecoilValueLoadable(recoilValue) {\n    if (true) {\n        validateRecoilValue(recoilValue, \"useRecoilValueLoadable\");\n    }\n    if (Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        // eslint-disable-next-line fb-www/react-hooks\n        Recoil_useRetain(recoilValue);\n    }\n    return ({\n        TRANSITION_SUPPORT: useRecoilValueLoadable_TRANSITION_SUPPORT,\n        // Recoil will attemp to detect if `useSyncExternalStore()` is supported with\n        // `reactMode()` before calling it.  However, sometimes the host React\n        // environment supports it but uses additional React renderers (such as with\n        // `react-three-fiber`) which do not.  While this is technically a user issue\n        // by using a renderer with React 18+ that doesn't fully support React 18 we\n        // don't want to break users if it can be avoided. As the current renderer can\n        // change at runtime, we need to dynamically check and fallback if necessary.\n        SYNC_EXTERNAL_STORE: currentRendererSupportsUseSyncExternalStore$1() ? useRecoilValueLoadable_SYNC_EXTERNAL_STORE : useRecoilValueLoadable_TRANSITION_SUPPORT,\n        MUTABLE_SOURCE: useRecoilValueLoadable_MUTABLE_SOURCE,\n        LEGACY: useRecoilValueLoadable_LEGACY\n    })[reactMode$3().mode](recoilValue);\n}\n/**\n  Returns the value represented by the RecoilValue.\n  If the value is pending, it will throw a Promise to suspend the component,\n  if the value is an error it will throw it for the nearest React error boundary.\n  This will also subscribe the component for any updates in the value.\n  */ function useRecoilValue(recoilValue) {\n    _s15();\n    if (true) {\n        validateRecoilValue(recoilValue, \"useRecoilValue\");\n    }\n    const storeRef = useStoreRef$2();\n    const loadable = useRecoilValueLoadable(recoilValue);\n    return handleLoadable(loadable, recoilValue, storeRef);\n}\n_s15(useRecoilValue, \"gPJzoTxaOHcu42Q26alonm1jOcw=\", false, function() {\n    return [\n        useStoreRef$2,\n        useRecoilValueLoadable\n    ];\n});\n/**\n  Returns a function that allows the value of a RecoilState to be updated, but does\n  not subscribe the component to changes to that RecoilState.\n*/ function useSetRecoilState(recoilState) {\n    _s16();\n    if (true) {\n        validateRecoilValue(recoilState, \"useSetRecoilState\");\n    }\n    const storeRef = useStoreRef$2();\n    return useCallback$1((newValueOrUpdater)=>{\n        setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);\n    }, [\n        storeRef,\n        recoilState\n    ]);\n}\n_s16(useSetRecoilState, \"ODzo54Xgf96ah+FaQlIOi5w5BRk=\", false, function() {\n    return [\n        useStoreRef$2,\n        useCallback$1\n    ];\n});\n/**\n  Returns a function that will reset the value of a RecoilState to its default\n*/ function useResetRecoilState(recoilState) {\n    _s17();\n    if (true) {\n        validateRecoilValue(recoilState, \"useResetRecoilState\");\n    }\n    const storeRef = useStoreRef$2();\n    return useCallback$1(()=>{\n        setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);\n    }, [\n        storeRef,\n        recoilState\n    ]);\n}\n_s17(useResetRecoilState, \"ODzo54Xgf96ah+FaQlIOi5w5BRk=\", false, function() {\n    return [\n        useStoreRef$2,\n        useCallback$1\n    ];\n});\n/**\n  Equivalent to useState(). Allows the value of the RecoilState to be read and written.\n  Subsequent updates to the RecoilState will cause the component to re-render. If the\n  RecoilState is pending, this will suspend the component and initiate the\n  retrieval of the value. If evaluating the RecoilState resulted in an error, this will\n  throw the error so that the nearest React error boundary can catch it.\n*/ function useRecoilState(recoilState) {\n    _s18();\n    if (true) {\n        validateRecoilValue(recoilState, \"useRecoilState\");\n    }\n    return [\n        useRecoilValue(recoilState),\n        useSetRecoilState(recoilState)\n    ];\n}\n_s18(useRecoilState, \"msEl7ALZc52vkqN6X20sfA7eHpY=\", false, function() {\n    return [\n        useRecoilValue,\n        useSetRecoilState\n    ];\n});\n/**\n  Like useRecoilState(), but does not cause Suspense or React error handling. Returns\n  an object that indicates whether the RecoilState is available, pending, or\n  unavailable due to an error.\n*/ function useRecoilStateLoadable(recoilState) {\n    _s19();\n    if (true) {\n        validateRecoilValue(recoilState, \"useRecoilStateLoadable\");\n    }\n    return [\n        useRecoilValueLoadable(recoilState),\n        useSetRecoilState(recoilState)\n    ];\n}\n_s19(useRecoilStateLoadable, \"PDFziEpi0LwwYh1DiWL3VJrLfjI=\", false, function() {\n    return [\n        useRecoilValueLoadable,\n        useSetRecoilState\n    ];\n});\nfunction useSetUnvalidatedAtomValues() {\n    _s20();\n    const storeRef = useStoreRef$2();\n    return function(values) {\n        let transactionMetadata = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        batchUpdates$2(()=>{\n            storeRef.current.addTransactionMetadata(transactionMetadata);\n            values.forEach((value, key)=>setUnvalidatedRecoilValue$2(storeRef.current, new AbstractRecoilValue$3(key), value));\n        });\n    };\n}\n_s20(useSetUnvalidatedAtomValues, \"e+u6yYk4FB213A51nMg7OOealbM=\", false, function() {\n    return [\n        useStoreRef$2\n    ];\n});\n/**\n * Experimental variants of hooks with support for useTransition()\n */ function useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE(recoilValue) {\n    _s21();\n    if (true) {\n        validateRecoilValue(recoilValue, \"useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE\");\n        if (!reactMode$3().early) {\n            Recoil_recoverableViolation(\"Attepmt to use a hook with UNSTABLE_TRANSITION_SUPPORT in a rendering mode incompatible with concurrent rendering.  Try enabling the recoil_sync_external_store or recoil_transition_support GKs.\");\n        }\n    }\n    if (Recoil_gkx(\"recoil_memory_managament_2020\")) {\n        // eslint-disable-next-line fb-www/react-hooks\n        Recoil_useRetain(recoilValue);\n    }\n    return useRecoilValueLoadable_TRANSITION_SUPPORT(recoilValue);\n}\n_s21(useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE, \"s6zSXfz3Ez2wPqRpcNyDQ5q2T0Y=\", false, function() {\n    return [\n        useRecoilValueLoadable_TRANSITION_SUPPORT\n    ];\n});\nfunction useRecoilValue_TRANSITION_SUPPORT_UNSTABLE(recoilValue) {\n    _s22();\n    if (true) {\n        validateRecoilValue(recoilValue, \"useRecoilValue_TRANSITION_SUPPORT_UNSTABLE\");\n    }\n    const storeRef = useStoreRef$2();\n    const loadable = useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE(recoilValue);\n    return handleLoadable(loadable, recoilValue, storeRef);\n}\n_s22(useRecoilValue_TRANSITION_SUPPORT_UNSTABLE, \"+tkGdNIuUFExtPr7VDs0W62Hj3s=\", false, function() {\n    return [\n        useStoreRef$2,\n        useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE\n    ];\n});\nfunction useRecoilState_TRANSITION_SUPPORT_UNSTABLE(recoilState) {\n    _s23();\n    if (true) {\n        validateRecoilValue(recoilState, \"useRecoilState_TRANSITION_SUPPORT_UNSTABLE\");\n    }\n    return [\n        useRecoilValue_TRANSITION_SUPPORT_UNSTABLE(recoilState),\n        useSetRecoilState(recoilState)\n    ];\n}\n_s23(useRecoilState_TRANSITION_SUPPORT_UNSTABLE, \"Tpgu26fEAAo64dMksKt7e7OBXu0=\", false, function() {\n    return [\n        useRecoilValue_TRANSITION_SUPPORT_UNSTABLE,\n        useSetRecoilState\n    ];\n});\nvar Recoil_Hooks = {\n    recoilComponentGetRecoilValueCount_FOR_TESTING,\n    useRecoilInterface: useRecoilInterface_DEPRECATED,\n    useRecoilState,\n    useRecoilStateLoadable,\n    useRecoilValue,\n    useRecoilValueLoadable,\n    useResetRecoilState,\n    useSetRecoilState,\n    useSetUnvalidatedAtomValues,\n    useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE,\n    useRecoilValue_TRANSITION_SUPPORT_UNSTABLE,\n    useRecoilState_TRANSITION_SUPPORT_UNSTABLE\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * Returns a map containing all of the keys + values from the original map where\n * the given callback returned true.\n */ function filterMap(map, callback) {\n    const result = new Map();\n    for (const [key, value] of map){\n        if (callback(value, key)) {\n            result.set(key, value);\n        }\n    }\n    return result;\n}\nvar Recoil_filterMap = filterMap;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ /**\n * Returns a set containing all of the values from the original set where\n * the given callback returned true.\n */ function filterSet(set, callback) {\n    const result = new Set();\n    for (const value of set){\n        if (callback(value)) {\n            result.add(value);\n        }\n    }\n    return result;\n}\nvar Recoil_filterSet = filterSet;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ function mergeMaps() {\n    for(var _len = arguments.length, maps = new Array(_len), _key = 0; _key < _len; _key++){\n        maps[_key] = arguments[_key];\n    }\n    const result = new Map();\n    for(let i = 0; i < maps.length; i++){\n        const iterator = maps[i].keys();\n        let nextKey;\n        while(!(nextKey = iterator.next()).done){\n            // $FlowIssue[incompatible-call] - map/iterator knows nothing about flow types\n            result.set(nextKey.value, maps[i].get(nextKey.value));\n        }\n    }\n    return result;\n}\nvar Recoil_mergeMaps = mergeMaps;\nconst { batchUpdates: batchUpdates$3 } = Recoil_Batching;\nconst { DEFAULT_VALUE: DEFAULT_VALUE$3, getNode: getNode$4, nodes: nodes$1 } = Recoil_Node;\nconst { useStoreRef: useStoreRef$3 } = Recoil_RecoilRoot;\nconst { AbstractRecoilValue: AbstractRecoilValue$4, setRecoilValueLoadable: setRecoilValueLoadable$1 } = Recoil_RecoilValueInterface;\nconst { SUSPENSE_TIMEOUT_MS: SUSPENSE_TIMEOUT_MS$2 } = Recoil_Retention;\nconst { cloneSnapshot: cloneSnapshot$1 } = Recoil_Snapshot$1;\nconst { useCallback: useCallback$2, useEffect: useEffect$4, useRef: useRef$5, useState: useState$2 } = (react__WEBPACK_IMPORTED_MODULE_0___default());\nconst { isSSR: isSSR$4 } = Recoil_Environment;\nfunction useTransactionSubscription(callback) {\n    _s24();\n    const storeRef = useStoreRef$3();\n    useEffect$4(()=>{\n        const sub = storeRef.current.subscribeToTransactions(callback);\n        return sub.release;\n    }, [\n        callback,\n        storeRef\n    ]);\n}\n_s24(useTransactionSubscription, \"CDTzWCbrdtpsnTMd+K6uNwqEY6s=\", false, function() {\n    return [\n        useStoreRef$3,\n        useEffect$4\n    ];\n});\nfunction externallyVisibleAtomValuesInState(state) {\n    const atomValues = state.atomValues.toMap();\n    const persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, (v, k)=>{\n        const node = getNode$4(k);\n        const persistence = node.persistence_UNSTABLE;\n        return persistence != null && persistence.type !== \"none\" && v.state === \"hasValue\";\n    }), (v)=>v.contents); // Merge in nonvalidated atoms; we may not have defs for them but they will\n    // all have persistence on or they wouldn't be there in the first place.\n    return Recoil_mergeMaps(state.nonvalidatedAtoms.toMap(), persistedAtomContentsValues);\n}\n/**\n  Calls the given callback after any atoms have been modified and the consequent\n  component re-renders have been committed. This is intended for persisting\n  the values of the atoms to storage. The stored values can then be restored\n  using the useSetUnvalidatedAtomValues hook.\n\n  The callback receives the following info:\n\n  atomValues: The current value of every atom that is both persistable (persistence\n              type not set to 'none') and whose value is available (not in an\n              error or loading state).\n\n  previousAtomValues: The value of every persistable and available atom before\n               the transaction began.\n\n  atomInfo: A map containing the persistence settings for each atom. Every key\n            that exists in atomValues will also exist in atomInfo.\n\n  modifiedAtoms: The set of atoms that were written to during the transaction.\n\n  transactionMetadata: Arbitrary information that was added via the\n          useSetUnvalidatedAtomValues hook. Useful for ignoring the useSetUnvalidatedAtomValues\n          transaction, to avoid loops.\n*/ function useTransactionObservation_DEPRECATED(callback) {\n    _s25();\n    useTransactionSubscription(useCallback$2((store)=>{\n        let previousTree = store.getState().previousTree;\n        const currentTree = store.getState().currentTree;\n        if (!previousTree) {\n            Recoil_recoverableViolation(\"Transaction subscribers notified without a previous tree being present -- this is a bug in Recoil\");\n            previousTree = store.getState().currentTree; // attempt to trundle on\n        }\n        const atomValues = externallyVisibleAtomValuesInState(currentTree);\n        const previousAtomValues = externallyVisibleAtomValuesInState(previousTree);\n        const atomInfo = Recoil_mapMap(nodes$1, (node)=>{\n            var _node$persistence_UNS, _node$persistence_UNS2, _node$persistence_UNS3, _node$persistence_UNS4;\n            return {\n                persistence_UNSTABLE: {\n                    type: (_node$persistence_UNS = (_node$persistence_UNS2 = node.persistence_UNSTABLE) === null || _node$persistence_UNS2 === void 0 ? void 0 : _node$persistence_UNS2.type) !== null && _node$persistence_UNS !== void 0 ? _node$persistence_UNS : \"none\",\n                    backButton: (_node$persistence_UNS3 = (_node$persistence_UNS4 = node.persistence_UNSTABLE) === null || _node$persistence_UNS4 === void 0 ? void 0 : _node$persistence_UNS4.backButton) !== null && _node$persistence_UNS3 !== void 0 ? _node$persistence_UNS3 : false\n                }\n            };\n        }); // Filter on existance in atomValues so that externally-visible rules\n        // are also applied to modified atoms (specifically exclude selectors):\n        const modifiedAtoms = Recoil_filterSet(currentTree.dirtyAtoms, (k)=>atomValues.has(k) || previousAtomValues.has(k));\n        callback({\n            atomValues,\n            previousAtomValues,\n            atomInfo,\n            modifiedAtoms,\n            transactionMetadata: {\n                ...currentTree.transactionMetadata\n            }\n        });\n    }, [\n        callback\n    ]));\n}\n_s25(useTransactionObservation_DEPRECATED, \"QoqPp7uYaRLhZAN5EOK+tmIR6RE=\", false, function() {\n    return [\n        useTransactionSubscription\n    ];\n});\nfunction useRecoilTransactionObserver(callback) {\n    _s26();\n    useTransactionSubscription(useCallback$2((store)=>{\n        const snapshot = cloneSnapshot$1(store, \"latest\");\n        const previousSnapshot = cloneSnapshot$1(store, \"previous\");\n        callback({\n            snapshot,\n            previousSnapshot\n        });\n    }, [\n        callback\n    ]));\n} // Return a snapshot of the current state and subscribe to all state changes\n_s26(useRecoilTransactionObserver, \"QoqPp7uYaRLhZAN5EOK+tmIR6RE=\", false, function() {\n    return [\n        useTransactionSubscription\n    ];\n});\nfunction useRecoilSnapshot() {\n    _s27();\n    const storeRef = useStoreRef$3();\n    const [snapshot, setSnapshot] = useState$2(()=>cloneSnapshot$1(storeRef.current));\n    const previousSnapshot = Recoil_usePrevious(snapshot);\n    const timeoutID = useRef$5();\n    const releaseRef = useRef$5();\n    useTransactionSubscription(useCallback$2((store)=>setSnapshot(cloneSnapshot$1(store)), [])); // Retain snapshot for duration component is mounted\n    useEffect$4(()=>{\n        const release = snapshot.retain(); // Release the retain from the rendering call\n        if (timeoutID.current && !isSSR$4) {\n            var _releaseRef$current;\n            window.clearTimeout(timeoutID.current);\n            timeoutID.current = null;\n            (_releaseRef$current = releaseRef.current) === null || _releaseRef$current === void 0 ? void 0 : _releaseRef$current.call(releaseRef);\n            releaseRef.current = null;\n        }\n        return ()=>{\n            // Defer the release.  If \"Fast Refresh\"\" is used then the component may\n            // re-render with the same state.  The previous cleanup will then run and\n            // then the new effect will run. We don't want the snapshot to be released\n            // by that cleanup before the new effect has a chance to retain it again.\n            // Use timeout of 10 to workaround Firefox issue: https://github.com/facebookexperimental/Recoil/issues/1936\n            window.setTimeout(release, 10);\n        };\n    }, [\n        snapshot\n    ]); // Retain snapshot until above effect is run.\n    // Release after a threshold in case component is suspended.\n    if (previousSnapshot !== snapshot && !isSSR$4) {\n        // Release the previous snapshot\n        if (timeoutID.current) {\n            var _releaseRef$current2;\n            window.clearTimeout(timeoutID.current);\n            timeoutID.current = null;\n            (_releaseRef$current2 = releaseRef.current) === null || _releaseRef$current2 === void 0 ? void 0 : _releaseRef$current2.call(releaseRef);\n            releaseRef.current = null;\n        }\n        releaseRef.current = snapshot.retain();\n        timeoutID.current = window.setTimeout(()=>{\n            var _releaseRef$current3;\n            timeoutID.current = null;\n            (_releaseRef$current3 = releaseRef.current) === null || _releaseRef$current3 === void 0 ? void 0 : _releaseRef$current3.call(releaseRef);\n            releaseRef.current = null;\n        }, SUSPENSE_TIMEOUT_MS$2);\n    }\n    return snapshot;\n}\n_s27(useRecoilSnapshot, \"x1twWOzA2SQLTFWWY7z5dwahJjQ=\", false, function() {\n    return [\n        useStoreRef$3,\n        useState$2,\n        useRef$5,\n        useRef$5,\n        useTransactionSubscription,\n        useEffect$4\n    ];\n});\nfunction gotoSnapshot(store, snapshot) {\n    var _storeState$nextTree;\n    const storeState = store.getState();\n    const prev = (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree;\n    const next = snapshot.getStore_INTERNAL().getState().currentTree;\n    batchUpdates$3(()=>{\n        const keysToUpdate = new Set();\n        for (const keys of [\n            prev.atomValues.keys(),\n            next.atomValues.keys()\n        ]){\n            for (const key of keys){\n                var _prev$atomValues$get, _next$atomValues$get;\n                if (((_prev$atomValues$get = prev.atomValues.get(key)) === null || _prev$atomValues$get === void 0 ? void 0 : _prev$atomValues$get.contents) !== ((_next$atomValues$get = next.atomValues.get(key)) === null || _next$atomValues$get === void 0 ? void 0 : _next$atomValues$get.contents) && getNode$4(key).shouldRestoreFromSnapshots) {\n                    keysToUpdate.add(key);\n                }\n            }\n        }\n        keysToUpdate.forEach((key)=>{\n            setRecoilValueLoadable$1(store, new AbstractRecoilValue$4(key), next.atomValues.has(key) ? Recoil_nullthrows(next.atomValues.get(key)) : DEFAULT_VALUE$3);\n        });\n        store.replaceState((state)=>({\n                ...state,\n                stateID: snapshot.getID()\n            }));\n    });\n}\nfunction useGotoRecoilSnapshot() {\n    _s28();\n    const storeRef = useStoreRef$3();\n    return useCallback$2((snapshot)=>gotoSnapshot(storeRef.current, snapshot), [\n        storeRef\n    ]);\n}\n_s28(useGotoRecoilSnapshot, \"tTPJbbAis+TO3OkHPUmPvHdKJTE=\", false, function() {\n    return [\n        useStoreRef$3,\n        useCallback$2\n    ];\n});\nvar Recoil_SnapshotHooks = {\n    useRecoilSnapshot,\n    gotoSnapshot,\n    useGotoRecoilSnapshot,\n    useRecoilTransactionObserver,\n    useTransactionObservation_DEPRECATED,\n    useTransactionSubscription_DEPRECATED: useTransactionSubscription\n};\nconst { peekNodeInfo: peekNodeInfo$2 } = Recoil_FunctionalCore;\nconst { useStoreRef: useStoreRef$4 } = Recoil_RecoilRoot;\nfunction useGetRecoilValueInfo() {\n    _s29();\n    const storeRef = useStoreRef$4(); // $FlowFixMe[incompatible-return]\n    return (param)=>{\n        let { key } = param;\n        return peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);\n    };\n}\n_s29(useGetRecoilValueInfo, \"i82/IJ2wJWj4h641TXd94KH9DeI=\", false, function() {\n    return [\n        useStoreRef$4\n    ];\n});\nvar Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;\nconst { reactMode: reactMode$4 } = Recoil_ReactMode;\nconst { RecoilRoot: RecoilRoot$1, useStoreRef: useStoreRef$5 } = Recoil_RecoilRoot;\nconst { useMemo: useMemo$2 } = (react__WEBPACK_IMPORTED_MODULE_0___default());\nfunction useRecoilBridgeAcrossReactRoots() {\n    _s30();\n    // The test fails when using useMutableSource(), but only if act() is used\n    // for the nested root.  So, this may only be a testing environment issue.\n    if (reactMode$4().mode === \"MUTABLE_SOURCE\") {\n        // eslint-disable-next-line fb-www/no-console\n        console.warn(\"Warning: There are known issues using useRecoilBridgeAcrossReactRoots() in recoil_mutable_source rendering mode.  Please consider upgrading to recoil_sync_external_store mode.\");\n    }\n    const store = useStoreRef$5().current;\n    return useMemo$2(()=>{\n        // eslint-disable-next-line no-shadow\n        function RecoilBridge(param) {\n            let { children } = param;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RecoilRoot$1, {\n                store_INTERNAL: store\n            }, children);\n        }\n        return RecoilBridge;\n    }, [\n        store\n    ]);\n}\n_s30(useRecoilBridgeAcrossReactRoots, \"zDlwjpEEA/O/fLJ/WfnylytVr98=\", false, function() {\n    return [\n        useStoreRef$5,\n        useMemo$2\n    ];\n});\nvar Recoil_useRecoilBridgeAcrossReactRoots = useRecoilBridgeAcrossReactRoots;\nconst { loadableWithValue: loadableWithValue$1 } = Recoil_Loadable$1;\nconst { initializeNode: initializeNode$3 } = Recoil_FunctionalCore;\nconst { DEFAULT_VALUE: DEFAULT_VALUE$4, getNode: getNode$5 } = Recoil_Node;\nconst { copyTreeState: copyTreeState$1, getRecoilValueAsLoadable: getRecoilValueAsLoadable$3, invalidateDownstreams: invalidateDownstreams$1, writeLoadableToTreeState: writeLoadableToTreeState$1 } = Recoil_RecoilValueInterface;\nfunction isAtom(recoilValue) {\n    return getNode$5(recoilValue.key).nodeType === \"atom\";\n}\nclass TransactionInterfaceImpl {\n    // eslint-disable-next-line fb-www/extra-arrow-initializer\n    newTreeState_INTERNAL() {\n        if (this._changes.size === 0) {\n            return this._treeState;\n        }\n        const newState = copyTreeState$1(this._treeState);\n        for (const [k, v] of this._changes){\n            writeLoadableToTreeState$1(newState, k, loadableWithValue$1(v));\n        }\n        invalidateDownstreams$1(this._store, newState);\n        return newState;\n    }\n    constructor(store, treeState){\n        _defineProperty(this, \"_store\", void 0);\n        _defineProperty(this, \"_treeState\", void 0);\n        _defineProperty(this, \"_changes\", void 0);\n        _defineProperty(this, \"get\", (recoilValue)=>{\n            if (this._changes.has(recoilValue.key)) {\n                // $FlowIssue[incompatible-return]\n                return this._changes.get(recoilValue.key);\n            }\n            if (!isAtom(recoilValue)) {\n                throw Recoil_err(\"Reading selectors within atomicUpdate is not supported\");\n            }\n            const loadable = getRecoilValueAsLoadable$3(this._store, recoilValue, this._treeState);\n            if (loadable.state === \"hasValue\") {\n                return loadable.contents;\n            } else if (loadable.state === \"hasError\") {\n                throw loadable.contents;\n            } else {\n                throw Recoil_err(\"Expected Recoil atom \".concat(recoilValue.key, \" to have a value, but it is in a loading state.\"));\n            }\n        });\n        _defineProperty(this, \"set\", (recoilState, valueOrUpdater)=>{\n            if (!isAtom(recoilState)) {\n                throw Recoil_err(\"Setting selectors within atomicUpdate is not supported\");\n            }\n            if (typeof valueOrUpdater === \"function\") {\n                const current = this.get(recoilState);\n                this._changes.set(recoilState.key, valueOrUpdater(current)); // flowlint-line unclear-type:off\n            } else {\n                // Initialize atom and run effects if not initialized yet\n                initializeNode$3(this._store, recoilState.key, \"set\");\n                this._changes.set(recoilState.key, valueOrUpdater);\n            }\n        });\n        _defineProperty(this, \"reset\", (recoilState)=>{\n            this.set(recoilState, DEFAULT_VALUE$4);\n        });\n        this._store = store;\n        this._treeState = treeState;\n        this._changes = new Map();\n    }\n}\nfunction atomicUpdater(store) {\n    return (fn)=>{\n        store.replaceState((treeState)=>{\n            const changeset = new TransactionInterfaceImpl(store, treeState);\n            fn(changeset);\n            return changeset.newTreeState_INTERNAL();\n        });\n    };\n}\nvar Recoil_AtomicUpdates = {\n    atomicUpdater\n};\nvar Recoil_AtomicUpdates_1 = Recoil_AtomicUpdates.atomicUpdater;\nvar Recoil_AtomicUpdates$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    atomicUpdater: Recoil_AtomicUpdates_1\n});\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ function invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\nvar invariant_1 = invariant;\n// @oss-only\nvar Recoil_invariant = invariant_1;\nconst { atomicUpdater: atomicUpdater$1 } = Recoil_AtomicUpdates$1;\nconst { batchUpdates: batchUpdates$4 } = Recoil_Batching;\nconst { DEFAULT_VALUE: DEFAULT_VALUE$5 } = Recoil_Node;\nconst { useStoreRef: useStoreRef$6 } = Recoil_RecoilRoot;\nconst { refreshRecoilValue: refreshRecoilValue$1, setRecoilValue: setRecoilValue$3 } = Recoil_RecoilValueInterface;\nconst { cloneSnapshot: cloneSnapshot$2 } = Recoil_Snapshot$1;\nconst { gotoSnapshot: gotoSnapshot$1 } = Recoil_SnapshotHooks;\nconst { useCallback: useCallback$3 } = (react__WEBPACK_IMPORTED_MODULE_0___default());\nclass Sentinel {\n}\nconst SENTINEL = new Sentinel();\nfunction recoilCallback(store, fn, args, extraInterface) {\n    let ret = SENTINEL;\n    let releaseSnapshot;\n    batchUpdates$4(()=>{\n        const errMsg = \"useRecoilCallback() expects a function that returns a function: \" + \"it accepts a function of the type (RecoilInterface) => (Args) => ReturnType \" + \"and returns a callback function (Args) => ReturnType, where RecoilInterface is \" + \"an object {snapshot, set, ...} and Args and ReturnType are the argument and return \" + \"types of the callback you want to create.  Please see the docs \" + \"at recoiljs.org for details.\";\n        if (typeof fn !== \"function\") {\n            throw Recoil_err(errMsg);\n        } // Clone the snapshot lazily to avoid overhead if the callback does not use it.\n        // Note that this means the snapshot may represent later state from when\n        // the callback was called if it first accesses the snapshot asynchronously.\n        const callbackInterface = Recoil_lazyProxy({\n            ...extraInterface !== null && extraInterface !== void 0 ? extraInterface : {},\n            // flowlint-line unclear-type:off\n            // $FlowFixMe[missing-local-annot]\n            set: (node, newValue)=>setRecoilValue$3(store, node, newValue),\n            // $FlowFixMe[missing-local-annot]\n            reset: (node)=>setRecoilValue$3(store, node, DEFAULT_VALUE$5),\n            // $FlowFixMe[missing-local-annot]\n            refresh: (node)=>refreshRecoilValue$1(store, node),\n            gotoSnapshot: (snapshot)=>gotoSnapshot$1(store, snapshot),\n            transact_UNSTABLE: (transaction)=>atomicUpdater$1(store)(transaction)\n        }, {\n            snapshot: ()=>{\n                const snapshot = cloneSnapshot$2(store);\n                releaseSnapshot = snapshot.retain();\n                return snapshot;\n            }\n        });\n        const callback = fn(callbackInterface);\n        if (typeof callback !== \"function\") {\n            throw Recoil_err(errMsg);\n        }\n        ret = callback(...args);\n    });\n    !!(ret instanceof Sentinel) ?  true ? Recoil_invariant(false, \"batchUpdates should return immediately\") : 0 : void 0;\n    if (Recoil_isPromise(ret)) {\n        ret = ret.finally(()=>{\n            var _releaseSnapshot;\n            (_releaseSnapshot = releaseSnapshot) === null || _releaseSnapshot === void 0 ? void 0 : _releaseSnapshot();\n        });\n    } else {\n        var _releaseSnapshot2;\n        (_releaseSnapshot2 = releaseSnapshot) === null || _releaseSnapshot2 === void 0 ? void 0 : _releaseSnapshot2();\n    }\n    return ret;\n}\nfunction useRecoilCallback(fn, deps) {\n    _s31();\n    const storeRef = useStoreRef$6();\n    return useCallback$3(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return recoilCallback(storeRef.current, fn, args);\n    }, deps != null ? [\n        ...deps,\n        storeRef\n    ] : undefined // eslint-disable-line fb-www/react-hooks-deps\n    );\n}\n_s31(useRecoilCallback, \"/1NP+cImmnki+shaFBOuCRa8PJg=\", false, function() {\n    return [\n        useStoreRef$6,\n        useCallback$3\n    ];\n});\nvar Recoil_useRecoilCallback = {\n    recoilCallback,\n    useRecoilCallback\n};\nconst { useStoreRef: useStoreRef$7 } = Recoil_RecoilRoot;\nconst { refreshRecoilValue: refreshRecoilValue$2 } = Recoil_RecoilValueInterface;\nconst { useCallback: useCallback$4 } = (react__WEBPACK_IMPORTED_MODULE_0___default());\nfunction useRecoilRefresher(recoilValue) {\n    _s32();\n    const storeRef = useStoreRef$7();\n    return useCallback$4(()=>{\n        const store = storeRef.current;\n        refreshRecoilValue$2(store, recoilValue);\n    }, [\n        recoilValue,\n        storeRef\n    ]);\n}\n_s32(useRecoilRefresher, \"wn0+dsPvuPh1KxH2pc9AJzH4tLI=\", false, function() {\n    return [\n        useStoreRef$7,\n        useCallback$4\n    ];\n});\nvar Recoil_useRecoilRefresher = useRecoilRefresher;\nconst { atomicUpdater: atomicUpdater$2 } = Recoil_AtomicUpdates$1;\nconst { useStoreRef: useStoreRef$8 } = Recoil_RecoilRoot;\nconst { useMemo: useMemo$3 } = (react__WEBPACK_IMPORTED_MODULE_0___default());\nfunction useRecoilTransaction(fn, deps) {\n    _s33();\n    const storeRef = useStoreRef$8();\n    return useMemo$3(()=>function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            const atomicUpdate = atomicUpdater$2(storeRef.current);\n            atomicUpdate((transactionInterface)=>{\n                fn(transactionInterface)(...args);\n            });\n        }, deps != null ? [\n        ...deps,\n        storeRef\n    ] : undefined // eslint-disable-line fb-www/react-hooks-deps\n    );\n}\n_s33(useRecoilTransaction, \"o77TNcJyXZh0+PG3Dr6K7YKlO7s=\", false, function() {\n    return [\n        useStoreRef$8,\n        useMemo$3\n    ];\n});\nvar Recoil_useRecoilTransaction = useRecoilTransaction;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ class WrappedValue {\n    constructor(value){\n        _defineProperty(this, \"value\", void 0);\n        this.value = value;\n    }\n}\nvar Recoil_Wrapper = {\n    WrappedValue\n};\nvar Recoil_Wrapper_1 = Recoil_Wrapper.WrappedValue;\nvar Recoil_Wrapper$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    WrappedValue: Recoil_Wrapper_1\n});\nconst { isFastRefreshEnabled: isFastRefreshEnabled$2 } = Recoil_ReactMode;\nclass ChangedPathError extends Error {\n}\nclass TreeCache {\n    size() {\n        return this._numLeafs;\n    }\n    root() {\n        return this._root;\n    }\n    get(getNodeValue, handlers) {\n        var _this$getLeafNode;\n        return (_this$getLeafNode = this.getLeafNode(getNodeValue, handlers)) === null || _this$getLeafNode === void 0 ? void 0 : _this$getLeafNode.value;\n    }\n    getLeafNode(getNodeValue, handlers) {\n        if (this._root == null) {\n            return undefined;\n        } // Iterate down the tree based on the current node values until we hit a leaf\n        // $FlowIssue[unclear-type]\n        let node = this._root;\n        while(node){\n            handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);\n            if (node.type === \"leaf\") {\n                this._onHit(node);\n                return node;\n            }\n            const nodeValue = this._mapNodeValue(getNodeValue(node.nodeKey));\n            node = node.branches.get(nodeValue);\n        }\n        return undefined;\n    }\n    set(route, value, handlers) {\n        const addLeaf = ()=>{\n            var _node2, _node3, _this$_root2, _handlers$onNodeVisit2;\n            // First, setup the branch nodes for the route:\n            // Iterate down the tree to find or add branch nodes following the route\n            let node;\n            let branchKey;\n            for (const [nodeKey, nodeValue] of route){\n                var _node, _handlers$onNodeVisit, _this$_root;\n                // If the previous root was a leaf, while we not have a get(), it means\n                // the selector has inconsistent values or implementation changed.\n                const root = this._root;\n                if ((root === null || root === void 0 ? void 0 : root.type) === \"leaf\") {\n                    throw this.invalidCacheError();\n                } // node now refers to the next node down in the tree\n                const parent = node; // $FlowFixMe[prop-missing]\n                // $FlowFixMe[incompatible-type]\n                node = parent ? parent.branches.get(branchKey) : root; // $FlowFixMe[prop-missing]\n                // $FlowFixMe[incompatible-type]\n                node = (_node = node) !== null && _node !== void 0 ? _node : {\n                    type: \"branch\",\n                    nodeKey,\n                    parent,\n                    branches: new Map(),\n                    branchKey\n                }; // If we found an existing node, confirm it has a consistent value\n                if (node.type !== \"branch\" || node.nodeKey !== nodeKey) {\n                    throw this.invalidCacheError();\n                } // Add the branch node to the tree\n                parent === null || parent === void 0 ? void 0 : parent.branches.set(branchKey, node);\n                handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit = handlers.onNodeVisit) === null || _handlers$onNodeVisit === void 0 ? void 0 : _handlers$onNodeVisit.call(handlers, node); // Prepare for next iteration and install root if it is new.\n                branchKey = this._mapNodeValue(nodeValue);\n                this._root = (_this$_root = this._root) !== null && _this$_root !== void 0 ? _this$_root : node;\n            } // Second, setup the leaf node:\n            // If there is an existing leaf for this route confirm it is consistent\n            const oldLeaf = node ? (_node2 = node) === null || _node2 === void 0 ? void 0 : _node2.branches.get(branchKey) : this._root;\n            if (oldLeaf != null && (oldLeaf.type !== \"leaf\" || oldLeaf.branchKey !== branchKey)) {\n                throw this.invalidCacheError();\n            } // Create a new or replacement leaf.\n            const leafNode = {\n                type: \"leaf\",\n                value,\n                parent: node,\n                branchKey\n            }; // Install the leaf and call handlers\n            (_node3 = node) === null || _node3 === void 0 ? void 0 : _node3.branches.set(branchKey, leafNode);\n            this._root = (_this$_root2 = this._root) !== null && _this$_root2 !== void 0 ? _this$_root2 : leafNode;\n            this._numLeafs++;\n            this._onSet(leafNode);\n            handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit2 = handlers.onNodeVisit) === null || _handlers$onNodeVisit2 === void 0 ? void 0 : _handlers$onNodeVisit2.call(handlers, leafNode);\n        };\n        try {\n            addLeaf();\n        } catch (error) {\n            // If the cache was stale or observed inconsistent values, such as with\n            // Fast Refresh, then clear it and rebuild with the new values.\n            if (error instanceof ChangedPathError) {\n                this.clear();\n                addLeaf();\n            } else {\n                throw error;\n            }\n        }\n    }\n    delete(leaf) {\n        const root = this.root();\n        if (!root) {\n            return false;\n        }\n        if (leaf === root) {\n            this._root = null;\n            this._numLeafs = 0;\n            return true;\n        } // Iterate up from the leaf deleteing it from it's parent's branches.\n        let node = leaf.parent;\n        let branchKey = leaf.branchKey;\n        while(node){\n            var _node4;\n            node.branches.delete(branchKey); // Stop iterating if we hit the root.\n            if (node === root) {\n                if (node.branches.size === 0) {\n                    this._root = null;\n                    this._numLeafs = 0;\n                } else {\n                    this._numLeafs--;\n                }\n                return true;\n            } // Stop iterating if there are other branches since we don't need to\n            // remove any more nodes.\n            if (node.branches.size > 0) {\n                break;\n            } // Iterate up to our parent\n            branchKey = (_node4 = node) === null || _node4 === void 0 ? void 0 : _node4.branchKey;\n            node = node.parent;\n        } // Confirm that the leaf we are deleting is actually attached to our tree\n        for(; node !== root; node = node.parent){\n            if (node == null) {\n                return false;\n            }\n        }\n        this._numLeafs--;\n        return true;\n    }\n    clear() {\n        this._numLeafs = 0;\n        this._root = null;\n    }\n    invalidCacheError() {\n        const CHANGED_PATH_ERROR_MESSAGE = isFastRefreshEnabled$2() ? \"Possible Fast Refresh module reload detected.  \" + \"This may also be caused by an selector returning inconsistent values. \" + \"Resetting cache.\" : \"Invalid cache values.  This happens when selectors do not return \" + \"consistent values for the same input dependency values.  That may also \" + \"be caused when using Fast Refresh to change a selector implementation.  \" + \"Resetting cache.\";\n        Recoil_recoverableViolation(CHANGED_PATH_ERROR_MESSAGE + (this._name != null ? \" - \".concat(this._name) : \"\"));\n        throw new ChangedPathError();\n    }\n    // $FlowIssue[unclear-type]\n    constructor(options){\n        var _options$onHit, _options$onSet, _options$mapNodeValue;\n        _defineProperty(this, \"_name\", void 0);\n        _defineProperty(this, \"_numLeafs\", void 0);\n        _defineProperty(this, \"_root\", void 0);\n        _defineProperty(this, \"_onHit\", void 0);\n        _defineProperty(this, \"_onSet\", void 0);\n        _defineProperty(this, \"_mapNodeValue\", void 0);\n        this._name = options === null || options === void 0 ? void 0 : options.name;\n        this._numLeafs = 0;\n        this._root = null;\n        this._onHit = (_options$onHit = options === null || options === void 0 ? void 0 : options.onHit) !== null && _options$onHit !== void 0 ? _options$onHit : ()=>{};\n        this._onSet = (_options$onSet = options === null || options === void 0 ? void 0 : options.onSet) !== null && _options$onSet !== void 0 ? _options$onSet : ()=>{};\n        this._mapNodeValue = (_options$mapNodeValue = options === null || options === void 0 ? void 0 : options.mapNodeValue) !== null && _options$mapNodeValue !== void 0 ? _options$mapNodeValue : (val)=>val;\n    }\n}\nvar Recoil_TreeCache = {\n    TreeCache\n};\nvar Recoil_TreeCache_1 = Recoil_TreeCache.TreeCache;\nvar Recoil_TreeCache$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    TreeCache: Recoil_TreeCache_1\n});\nclass LRUCache {\n    head() {\n        return this._head;\n    }\n    tail() {\n        return this._tail;\n    }\n    size() {\n        return this._size;\n    }\n    maxSize() {\n        return this._maxSize;\n    }\n    has(key) {\n        return this._map.has(this._keyMapper(key));\n    }\n    get(key) {\n        const mappedKey = this._keyMapper(key);\n        const node = this._map.get(mappedKey);\n        if (!node) {\n            return undefined;\n        }\n        this.set(key, node.value);\n        return node.value;\n    }\n    set(key, val) {\n        const mappedKey = this._keyMapper(key);\n        const existingNode = this._map.get(mappedKey);\n        if (existingNode) {\n            this.delete(key);\n        }\n        const head = this.head();\n        const node = {\n            key,\n            right: head,\n            left: null,\n            value: val\n        };\n        if (head) {\n            head.left = node;\n        } else {\n            this._tail = node;\n        }\n        this._map.set(mappedKey, node);\n        this._head = node;\n        this._size++;\n        this._maybeDeleteLRU();\n    }\n    _maybeDeleteLRU() {\n        if (this.size() > this.maxSize()) {\n            this.deleteLru();\n        }\n    }\n    deleteLru() {\n        const tail = this.tail();\n        if (tail) {\n            this.delete(tail.key);\n        }\n    }\n    delete(key) {\n        const mappedKey = this._keyMapper(key);\n        if (!this._size || !this._map.has(mappedKey)) {\n            return;\n        }\n        const node = Recoil_nullthrows(this._map.get(mappedKey));\n        const right = node.right;\n        const left = node.left;\n        if (right) {\n            right.left = node.left;\n        }\n        if (left) {\n            left.right = node.right;\n        }\n        if (node === this.head()) {\n            this._head = right;\n        }\n        if (node === this.tail()) {\n            this._tail = left;\n        }\n        this._map.delete(mappedKey);\n        this._size--;\n    }\n    clear() {\n        this._size = 0;\n        this._head = null;\n        this._tail = null;\n        this._map = new Map();\n    }\n    constructor(options){\n        var _options$mapKey;\n        _defineProperty(this, \"_maxSize\", void 0);\n        _defineProperty(this, \"_size\", void 0);\n        _defineProperty(this, \"_head\", void 0);\n        _defineProperty(this, \"_tail\", void 0);\n        _defineProperty(this, \"_map\", void 0);\n        _defineProperty(this, \"_keyMapper\", void 0);\n        this._maxSize = options.maxSize;\n        this._size = 0;\n        this._head = null;\n        this._tail = null;\n        this._map = new Map();\n        this._keyMapper = (_options$mapKey = options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v)=>v;\n    }\n}\nvar Recoil_LRUCache = {\n    LRUCache\n};\nvar Recoil_LRUCache_1 = Recoil_LRUCache.LRUCache;\nvar Recoil_LRUCache$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    LRUCache: Recoil_LRUCache_1\n});\nconst { LRUCache: LRUCache$1 } = Recoil_LRUCache$1;\nconst { TreeCache: TreeCache$1 } = Recoil_TreeCache$1;\nfunction treeCacheLRU(param) {\n    let { name, maxSize, mapNodeValue = (v)=>v } = param;\n    const lruCache = new LRUCache$1({\n        maxSize\n    });\n    const cache = new TreeCache$1({\n        name,\n        mapNodeValue,\n        onHit: (node)=>{\n            lruCache.set(node, true);\n        },\n        onSet: (node)=>{\n            const lruNode = lruCache.tail();\n            lruCache.set(node, true);\n            if (lruNode && cache.size() > maxSize) {\n                // $FlowFixMe[incompatible-call]\n                cache.delete(lruNode.key);\n            }\n        }\n    });\n    return cache;\n}\nvar Recoil_treeCacheLRU = treeCacheLRU;\nconst TIME_WARNING_THRESHOLD_MS = 15;\nfunction stringify(x, opt, key) {\n    // A optimization to avoid the more expensive JSON.stringify() for simple strings\n    // This may lose protection for u2028 and u2029, though.\n    if (typeof x === \"string\" && !x.includes('\"') && !x.includes(\"\\\\\")) {\n        return '\"'.concat(x, '\"');\n    } // Handle primitive types\n    switch(typeof x){\n        case \"undefined\":\n            return \"\";\n        // JSON.stringify(undefined) returns undefined, but we always want to return a string\n        case \"boolean\":\n            return x ? \"true\" : \"false\";\n        case \"number\":\n        case \"symbol\":\n            // case 'bigint': // BigInt is not supported in www\n            return String(x);\n        case \"string\":\n            // Add surrounding quotes and escape internal quotes\n            return JSON.stringify(x);\n        case \"function\":\n            if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {\n                throw Recoil_err(\"Attempt to serialize function in a Recoil cache key\");\n            }\n            return \"__FUNCTION(\".concat(x.name, \")__\");\n    }\n    if (x === null) {\n        return \"null\";\n    } // Fallback case for unknown types\n    if (typeof x !== \"object\") {\n        var _JSON$stringify;\n        return (_JSON$stringify = JSON.stringify(x)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : \"\";\n    } // Deal with all promises as equivalent for now.\n    if (Recoil_isPromise(x)) {\n        return \"__PROMISE__\";\n    } // Arrays handle recursive stringification\n    if (Array.isArray(x)) {\n        // $FlowFixMe[missing-local-annot]\n        return \"[\".concat(x.map((v, i)=>stringify(v, opt, i.toString())), \"]\");\n    } // If an object defines a toJSON() method, then use that to override the\n    // serialization.  This matches the behavior of JSON.stringify().\n    // Pass the key for compatibility.\n    // Immutable.js collections define this method to allow us to serialize them.\n    if (typeof x.toJSON === \"function\") {\n        // flowlint-next-line unclear-type: off\n        return stringify(x.toJSON(key), opt, key);\n    } // For built-in Maps, sort the keys in a stable order instead of the\n    // default insertion order.  Support non-string keys.\n    if (x instanceof Map) {\n        const obj = {};\n        for (const [k, v] of x){\n            // Stringify will escape any nested quotes\n            obj[typeof k === \"string\" ? k : stringify(k, opt)] = v;\n        }\n        return stringify(obj, opt, key);\n    } // For built-in Sets, sort the keys in a stable order instead of the\n    // default insertion order.\n    if (x instanceof Set) {\n        return stringify(Array.from(x).sort((a, b)=>stringify(a, opt).localeCompare(stringify(b, opt))), opt, key);\n    } // Anything else that is iterable serialize as an Array.\n    if (Symbol !== undefined && x[Symbol.iterator] != null && typeof x[Symbol.iterator] === \"function\") {\n        // flowlint-next-line unclear-type: off\n        return stringify(Array.from(x), opt, key);\n    } // For all other Objects, sort the keys in a stable order.\n    return \"{\".concat(Object.keys(x).filter((k)=>x[k] !== undefined).sort() // stringify the key to add quotes and escape any nested slashes or quotes.\n    .map((k)=>\"\".concat(stringify(k, opt), \":\").concat(stringify(x[k], opt, k))).join(\",\"), \"}\");\n} // Utility similar to JSON.stringify() except:\n// * Serialize built-in Sets as an Array\n// * Serialize built-in Maps as an Object.  Supports non-string keys.\n// * Serialize other iterables as arrays\n// * Sort the keys of Objects and Maps to have a stable order based on string conversion.\n//    This overrides their default insertion order.\n// * Still uses toJSON() of any object to override serialization\n// * Support Symbols (though don't guarantee uniqueness)\n// * We could support BigInt, but Flow doesn't seem to like it.\n// See Recoil_stableStringify-test.js for examples\nfunction stableStringify(x) {\n    let opt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n        allowFunctions: false\n    };\n    if (true) {\n        if (true) {\n            const startTime = window.performance ? window.performance.now() : 0;\n            const str = stringify(x, opt);\n            const endTime = window.performance ? window.performance.now() : 0;\n            if (endTime - startTime > TIME_WARNING_THRESHOLD_MS) {\n                /* eslint-disable fb-www/no-console */ console.groupCollapsed(\"Recoil: Spent \".concat(endTime - startTime, \"ms computing a cache key\"));\n                console.warn(x, str);\n                console.groupEnd();\n            /* eslint-enable fb-www/no-console */ }\n            return str;\n        }\n    }\n    return stringify(x, opt);\n}\nvar Recoil_stableStringify = stableStringify;\nconst { TreeCache: TreeCache$2 } = Recoil_TreeCache$1;\nconst defaultPolicy = {\n    equality: \"reference\",\n    eviction: \"keep-all\",\n    maxSize: Infinity\n};\nfunction treeCacheFromPolicy() {\n    let { equality = defaultPolicy.equality, eviction = defaultPolicy.eviction, maxSize = defaultPolicy.maxSize } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultPolicy, name = arguments.length > 1 ? arguments[1] : void 0;\n    const valueMapper = getValueMapper(equality);\n    return getTreeCache(eviction, maxSize, valueMapper, name);\n}\nfunction getValueMapper(equality) {\n    switch(equality){\n        case \"reference\":\n            return (val)=>val;\n        case \"value\":\n            return (val)=>Recoil_stableStringify(val);\n    }\n    throw Recoil_err(\"Unrecognized equality policy \".concat(equality));\n}\nfunction getTreeCache(eviction, maxSize, mapNodeValue, name) {\n    switch(eviction){\n        case \"keep-all\":\n            return new TreeCache$2({\n                name,\n                mapNodeValue\n            });\n        case \"lru\":\n            return Recoil_treeCacheLRU({\n                name,\n                maxSize: Recoil_nullthrows(maxSize),\n                mapNodeValue\n            });\n        case \"most-recent\":\n            return Recoil_treeCacheLRU({\n                name,\n                maxSize: 1,\n                mapNodeValue\n            });\n    }\n    throw Recoil_err(\"Unrecognized eviction policy \".concat(eviction));\n}\nvar Recoil_treeCacheFromPolicy = treeCacheFromPolicy;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ function isNode(object) {\n    var _ownerDocument, _doc$defaultView;\n    if (false) {}\n    const doc = object != null ? (_ownerDocument = object.ownerDocument) !== null && _ownerDocument !== void 0 ? _ownerDocument : object : document;\n    const defaultView = (_doc$defaultView = doc.defaultView) !== null && _doc$defaultView !== void 0 ? _doc$defaultView : window;\n    return !!(object != null && (typeof defaultView.Node === \"function\" ? object instanceof defaultView.Node : typeof object === \"object\" && typeof object.nodeType === \"number\" && typeof object.nodeName === \"string\"));\n}\nvar Recoil_isNode = isNode;\nconst { isReactNative: isReactNative$1, isWindow: isWindow$1 } = Recoil_Environment;\nfunction shouldNotBeFrozen(value) {\n    // Primitives and functions:\n    if (value === null || typeof value !== \"object\") {\n        return true;\n    } // React elements:\n    switch(typeof value.$$typeof){\n        case \"symbol\":\n            return true;\n        case \"number\":\n            return true;\n    } // Immutable structures:\n    if (value[\"@@__IMMUTABLE_ITERABLE__@@\"] != null || value[\"@@__IMMUTABLE_KEYED__@@\"] != null || value[\"@@__IMMUTABLE_INDEXED__@@\"] != null || value[\"@@__IMMUTABLE_ORDERED__@@\"] != null || value[\"@@__IMMUTABLE_RECORD__@@\"] != null) {\n        return true;\n    } // DOM nodes:\n    if (Recoil_isNode(value)) {\n        return true;\n    }\n    if (Recoil_isPromise(value)) {\n        return true;\n    }\n    if (value instanceof Error) {\n        return true;\n    }\n    if (ArrayBuffer.isView(value)) {\n        return true;\n    } // Some environments, just as Jest, don't work with the instanceof check\n    if (!isReactNative$1 && isWindow$1(value)) {\n        return true;\n    }\n    return false;\n} // Recursively freeze a value to enforce it is read-only.\n// This may also have minimal performance improvements for enumerating\n// objects (based on browser implementations, of course)\nfunction deepFreezeValue(value) {\n    if (typeof value !== \"object\" || shouldNotBeFrozen(value)) {\n        return;\n    }\n    Object.freeze(value); // Make all properties read-only\n    for(const key in value){\n        // $FlowIssue[method-unbinding] added when improving typing for this parameters\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n            const prop = value[key]; // Prevent infinite recurssion for circular references.\n            if (typeof prop === \"object\" && prop != null && !Object.isFrozen(prop)) {\n                deepFreezeValue(prop);\n            }\n        }\n    }\n    Object.seal(value); // This also makes existing properties non-configurable.\n}\nvar Recoil_deepFreezeValue = deepFreezeValue;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * This is a stub for some integration into FB internal stuff\n *\n * \n * @format\n * @oncall recoil\n */ function startPerfBlock(_id) {\n    return ()=>null;\n}\nvar Recoil_PerformanceTimings = {\n    startPerfBlock\n};\nconst { isLoadable: isLoadable$1, loadableWithError: loadableWithError$1, loadableWithPromise: loadableWithPromise$1, loadableWithValue: loadableWithValue$2 } = Recoil_Loadable$1;\nconst { WrappedValue: WrappedValue$1 } = Recoil_Wrapper$1;\nconst { getNodeLoadable: getNodeLoadable$2, peekNodeLoadable: peekNodeLoadable$1, setNodeValue: setNodeValue$3 } = Recoil_FunctionalCore;\nconst { saveDepsToStore: saveDepsToStore$1 } = Recoil_Graph;\nconst { DEFAULT_VALUE: DEFAULT_VALUE$6, getConfigDeletionHandler: getConfigDeletionHandler$1, getNode: getNode$6, registerNode: registerNode$1 } = Recoil_Node;\nconst { isRecoilValue: isRecoilValue$3 } = Recoil_RecoilValue$1;\nconst { markRecoilValueModified: markRecoilValueModified$1 } = Recoil_RecoilValueInterface;\nconst { retainedByOptionWithDefault: retainedByOptionWithDefault$1 } = Recoil_Retention;\nconst { recoilCallback: recoilCallback$1 } = Recoil_useRecoilCallback;\nconst { startPerfBlock: startPerfBlock$1 } = Recoil_PerformanceTimings;\nclass Canceled {\n}\nconst CANCELED = new Canceled();\n/**\n * An ExecutionID is an arbitrary ID that lets us distinguish executions from\n * each other. This is necessary as we need a way of solving this problem:\n * \"given 3 async executions, only update state for the 'latest' execution when\n * it finishes running regardless of when the other 2 finish\". ExecutionIDs\n * provide a convenient way of identifying executions so that we can track and\n * manage them over time.\n */ const dependencyStack = []; // for detecting circular dependencies.\nconst waitingStores = new Map();\nconst getNewExecutionID = (()=>{\n    let executionID = 0;\n    return ()=>executionID++;\n})();\n/* eslint-disable no-redeclare */ function selector(options) {\n    let recoilValue = null;\n    const { key, get, cachePolicy_UNSTABLE: cachePolicy } = options;\n    const set = options.set != null ? options.set : undefined; // flow\n    if (true) {\n        if (typeof key !== \"string\") {\n            throw Recoil_err(\"A key option with a unique string value must be provided when creating a selector.\");\n        }\n        if (typeof get !== \"function\") {\n            throw Recoil_err(\"Selectors must specify a get callback option to get the selector value.\");\n        }\n    } // This is every discovered dependency across all executions\n    const discoveredDependencyNodeKeys = new Set();\n    const cache = Recoil_treeCacheFromPolicy(cachePolicy !== null && cachePolicy !== void 0 ? cachePolicy : {\n        equality: \"reference\",\n        eviction: \"keep-all\"\n    }, key);\n    const retainedBy = retainedByOptionWithDefault$1(options.retainedBy_UNSTABLE);\n    const executionInfoMap = new Map();\n    let liveStoresCount = 0;\n    function selectorIsLive() {\n        return !Recoil_gkx(\"recoil_memory_managament_2020\") || liveStoresCount > 0;\n    }\n    function selectorInit(store) {\n        store.getState().knownSelectors.add(key);\n        liveStoresCount++;\n        return ()=>{\n            liveStoresCount--;\n        };\n    }\n    function selectorShouldDeleteConfigOnRelease() {\n        return getConfigDeletionHandler$1(key) !== undefined && !selectorIsLive();\n    }\n    function resolveAsync(store, state, executionID, loadable, depValues) {\n        setCache(state, loadable, depValues);\n        notifyStoresOfResolvedAsync(store, executionID);\n    }\n    function notifyStoresOfResolvedAsync(store, executionID) {\n        if (isLatestExecution(store, executionID)) {\n            clearExecutionInfo(store);\n        }\n        notifyWaitingStores(executionID, true);\n    }\n    /**\n   * Notify stores to pull the selector again if a new async dep was discovered.\n   * 1) Async selector adds a new dep but doesn't resolve yet.\n   *    Note that deps for an async selector are based on the state when the\n   *    evaluation started, in order to provide a consistent picture of state.\n   * 2) But, new value of dep based on the current state might cause the selector\n   *    to resolve or resolve differently.\n   * 3) Therefore, this notification will pull the selector based on the current\n   *    state for the components\n   */ function notifyStoresOfNewAsyncDep(store, executionID) {\n        if (isLatestExecution(store, executionID)) {\n            const executionInfo = Recoil_nullthrows(getExecutionInfo(store));\n            executionInfo.stateVersions.clear();\n            notifyWaitingStores(executionID, false);\n        }\n    }\n    function notifyWaitingStores(executionID, clearWaitlist) {\n        const stores = waitingStores.get(executionID);\n        if (stores != null) {\n            for (const waitingStore of stores){\n                markRecoilValueModified$1(waitingStore, Recoil_nullthrows(recoilValue));\n            }\n            if (clearWaitlist) {\n                waitingStores.delete(executionID);\n            }\n        }\n    }\n    function markStoreWaitingForResolvedAsync(store, executionID) {\n        let stores = waitingStores.get(executionID);\n        if (stores == null) {\n            waitingStores.set(executionID, stores = new Set());\n        }\n        stores.add(store);\n    }\n    /**\n   * This function attaches a then() and a catch() to a promise that was\n   * returned from a selector's get() (either explicitly or implicitly by\n   * running a function that uses the \"async\" keyword). If a selector's get()\n   * returns a promise, we have two possibilities:\n   *\n   * 1. The promise will resolve, in which case it will have completely finished\n   *    executing without any remaining pending dependencies. No more retries\n   *    are needed and we can proceed with updating the cache and notifying\n   *    subscribers (if it is the latest execution, otherwise only the cache\n   *    will be updated and subscriptions will not be fired). This is the case\n   *    handled by the attached then() handler.\n   *\n   * 2. The promise will throw because it either has an error or it came across\n   *    an async dependency that has not yet resolved, in which case we will\n   *    call wrapDepdencyPromise(), whose responsibility is to handle dependency\n   *    promises. This case is handled by the attached catch() handler.\n   *\n   * Both branches will eventually resolve to the final result of the selector\n   * (or an error if a real error occurred).\n   *\n   * The execution will run to completion even if it is stale, and its value\n   * will be cached. But stale executions will not update global state or update\n   * executionInfo as that is the responsibility of the 'latest' execution.\n   *\n   * Note this function should not be passed a promise that was thrown--AKA a\n   * dependency promise. Dependency promises should be passed to\n   * wrapPendingDependencyPromise()).\n   */ function wrapResultPromise(store, promise, state, depValues, executionID, loadingDepsState) {\n        return promise.then((value)=>{\n            if (!selectorIsLive()) {\n                // The selector was released since the request began; ignore the response.\n                clearExecutionInfo(store);\n                throw CANCELED;\n            }\n            const loadable = loadableWithValue$2(value);\n            resolveAsync(store, state, executionID, loadable, depValues);\n            return value;\n        }).catch((errorOrPromise)=>{\n            if (!selectorIsLive()) {\n                // The selector was released since the request began; ignore the response.\n                clearExecutionInfo(store);\n                throw CANCELED;\n            }\n            if (Recoil_isPromise(errorOrPromise)) {\n                return wrapPendingDependencyPromise(store, errorOrPromise, state, depValues, executionID, loadingDepsState);\n            }\n            const loadable = loadableWithError$1(errorOrPromise);\n            resolveAsync(store, state, executionID, loadable, depValues);\n            throw errorOrPromise;\n        });\n    }\n    /**\n   * This function attaches a then() and a catch() to a promise that was\n   * thrown from a selector's get(). If a selector's get() throws a promise,\n   * we have two possibilities:\n   *\n   * 1. The promise will resolve, meaning one of our selector's dependencies is\n   *    now available and we should \"retry\" our get() by running it again. This\n   *    is the case handled by the attached then() handler.\n   *\n   * 2. The promise will throw because something went wrong with the dependency\n   *    promise (in other words a real error occurred). This case is handled by\n   *    the attached catch() handler. If the dependency promise throws, it is\n   *    _always_ a real error and not another dependency promise (any dependency\n   *    promises would have been handled upstream).\n   *\n   * The then() branch will eventually resolve to the final result of the\n   * selector (or an error if a real error occurs), and the catch() will always\n   * resolve to an error because the dependency promise is a promise that was\n   * wrapped upstream, meaning it will only resolve to its real value or to a\n   * real error.\n   *\n   * The execution will run to completion even if it is stale, and its value\n   * will be cached. But stale executions will not update global state or update\n   * executionInfo as that is the responsibility of the 'latest' execution.\n   *\n   * Note this function should not be passed a promise that was returned from\n   * get(). The intention is that this function is only passed promises that\n   * were thrown due to a pending dependency. Promises returned by get() should\n   * be passed to wrapResultPromise() instead.\n   */ function wrapPendingDependencyPromise(store, promise, state, existingDeps, executionID, loadingDepsState) {\n        return promise.then((resolvedDep)=>{\n            if (!selectorIsLive()) {\n                // The selector was released since the request began; ignore the response.\n                clearExecutionInfo(store);\n                throw CANCELED;\n            } // Check if we are handling a pending Recoil dependency or if the user\n            // threw their own Promise to \"suspend\" a selector evaluation.  We need\n            // to check that the loadingDepPromise actually matches the promise that\n            // we caught in case the selector happened to catch the promise we threw\n            // for a pending Recoil dependency from `getRecoilValue()` and threw\n            // their own promise instead.\n            if (loadingDepsState.loadingDepKey != null && loadingDepsState.loadingDepPromise === promise) {\n                /**\n         * Note for async atoms, this means we are changing the atom's value\n         * in the store for the given version. This should be alright because\n         * the version of state is now stale and a new version will have\n         * already been triggered by the atom being resolved (see this logic\n         * in Recoil_atom.js)\n         */ state.atomValues.set(loadingDepsState.loadingDepKey, loadableWithValue$2(resolvedDep));\n            } else {\n                /**\n         * If resolvedDepKey is not defined, the promise was a user-thrown\n         * promise. User-thrown promises are an advanced feature and they\n         * should be avoided in almost all cases. Using `loadable.map()` inside\n         * of selectors for loading loadables and then throwing that mapped\n         * loadable's promise is an example of a user-thrown promise.\n         *\n         * When we hit a user-thrown promise, we have to bail out of an optimization\n         * where we bypass calculating selector cache keys for selectors that\n         * have been previously seen for a given state (these selectors are saved in\n         * state.atomValues) to avoid stale state as we have no way of knowing\n         * what state changes happened (if any) in result to the promise resolving.\n         *\n         * Ideally we would only bail out selectors that are in the chain of\n         * dependencies for this selector, but there's currently no way to get\n         * a full list of a selector's downstream nodes because the state that\n         * is executing may be a discarded tree (so store.getGraph(state.version)\n         * will be empty), and the full dep tree may not be in the selector\n         * caches in the case where the selector's cache was cleared. To solve\n         * for this we would have to keep track of all running selector\n         * executions and their downstream deps. Because this only covers edge\n         * cases, that complexity might not be justifyable.\n         */ store.getState().knownSelectors.forEach((nodeKey)=>{\n                    state.atomValues.delete(nodeKey);\n                });\n            }\n            /**\n       * Optimization: Now that the dependency has resolved, let's try hitting\n       * the cache in case the dep resolved to a value we have previously seen.\n       *\n       * TODO:\n       * Note this optimization is not perfect because it only prevents re-executions\n       * _after_ the point where an async dependency is found. Any code leading\n       * up to the async dependency may have run unnecessarily. The ideal case\n       * would be to wait for the async dependency to resolve first, check the\n       * cache, and prevent _any_ execution of the selector if the resulting\n       * value of the dependency leads to a path that is found in the cache.\n       * The ideal case is more difficult to implement as it would require that\n       * we capture and wait for the the async dependency right after checking\n       * the cache. The current approach takes advantage of the fact that running\n       * the selector already has a code path that lets us exit early when\n       * an async dep resolves.\n       */ const cachedLoadable = getLoadableFromCacheAndUpdateDeps(store, state);\n            if (cachedLoadable && cachedLoadable.state !== \"loading\") {\n                /**\n         * This has to notify stores of a resolved async, even if there is no\n         * current pending execution for the following case:\n         * 1) A component renders with this pending loadable.\n         * 2) The upstream dependency resolves.\n         * 3) While processing some other selector it reads this one, such as\n         *    while traversing its dependencies.  At this point it gets the\n         *    new resolved value synchronously and clears the current\n         *    execution ID.  The component wasn't getting the value itself,\n         *    though, so it still has the pending loadable.\n         * 4) When this code executes the current execution id was cleared\n         *    and it wouldn't notify the component of the new value.\n         *\n         * I think this is only an issue with \"early\" rendering since the\n         * components got their value using the in-progress execution.\n         * We don't have a unit test for this case yet.  I'm not sure it is\n         * necessary with recoil_transition_support mode.\n         */ if (isLatestExecution(store, executionID) || getExecutionInfo(store) == null) {\n                    notifyStoresOfResolvedAsync(store, executionID);\n                }\n                if (cachedLoadable.state === \"hasValue\") {\n                    return cachedLoadable.contents;\n                } else {\n                    throw cachedLoadable.contents;\n                }\n            }\n            /**\n       * If this execution is stale, let's check to see if there is some in\n       * progress execution with a matching state. If we find a match, then\n       * we can take the value from that in-progress execution. Note this may\n       * sound like an edge case, but may be very common in cases where a\n       * loading dependency resolves from loading to having a value (thus\n       * possibly triggering a re-render), and React re-renders before the\n       * chained .then() functions run, thus starting a new execution as the\n       * dep has changed value. Without this check we will run the selector\n       * twice (once in the new execution and once again in this .then(), so\n       * this check is necessary to keep unnecessary re-executions to a\n       * minimum).\n       *\n       * Also note this code does not check across all executions that may be\n       * running. It only optimizes for the _latest_ execution per store as\n       * we currently do not maintain a list of all currently running executions.\n       * This means in some cases we may run selectors more than strictly\n       * necessary when there are multiple executions running for the same\n       * selector. This may be a valid tradeoff as checking for dep changes\n       * across all in-progress executions may take longer than just\n       * re-running the selector. This will be app-dependent, and maybe in the\n       * future we can make the behavior configurable. An ideal fix may be\n       * to extend the tree cache to support caching loading states.\n       */ if (!isLatestExecution(store, executionID)) {\n                const executionInfo = getInProgressExecutionInfo(store, state);\n                if (executionInfo != null) {\n                    /**\n           * Returning promise here without wrapping as the wrapper logic was\n           * already done upstream when this promise was generated.\n           */ return executionInfo.loadingLoadable.contents;\n                }\n            } // Retry the selector evaluation now that the dependency has resolved\n            const [loadable, depValues] = evaluateSelectorGetter(store, state, executionID);\n            if (loadable.state !== \"loading\") {\n                resolveAsync(store, state, executionID, loadable, depValues);\n            }\n            if (loadable.state === \"hasError\") {\n                throw loadable.contents;\n            }\n            return loadable.contents;\n        }).catch((error)=>{\n            // The selector was released since the request began; ignore the response.\n            if (error instanceof Canceled) {\n                throw CANCELED;\n            }\n            if (!selectorIsLive()) {\n                clearExecutionInfo(store);\n                throw CANCELED;\n            }\n            const loadable = loadableWithError$1(error);\n            resolveAsync(store, state, executionID, loadable, existingDeps);\n            throw error;\n        });\n    }\n    function updateDeps(store, state, deps, executionID) {\n        var _store$getState, _store$getState$curre, _store$getState2, _store$getState2$next;\n        if (isLatestExecution(store, executionID) || state.version === ((_store$getState = store.getState()) === null || _store$getState === void 0 ? void 0 : (_store$getState$curre = _store$getState.currentTree) === null || _store$getState$curre === void 0 ? void 0 : _store$getState$curre.version) || state.version === ((_store$getState2 = store.getState()) === null || _store$getState2 === void 0 ? void 0 : (_store$getState2$next = _store$getState2.nextTree) === null || _store$getState2$next === void 0 ? void 0 : _store$getState2$next.version)) {\n            var _store$getState$nextT, _store$getState3, _store$getState3$next;\n            saveDepsToStore$1(key, deps, store, (_store$getState$nextT = (_store$getState3 = store.getState()) === null || _store$getState3 === void 0 ? void 0 : (_store$getState3$next = _store$getState3.nextTree) === null || _store$getState3$next === void 0 ? void 0 : _store$getState3$next.version) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree.version);\n        }\n        for (const nodeKey of deps){\n            discoveredDependencyNodeKeys.add(nodeKey);\n        }\n    }\n    function evaluateSelectorGetter(store, state, executionID) {\n        const endPerfBlock = startPerfBlock$1(key); // TODO T63965866: use execution ID here\n        let duringSynchronousExecution = true;\n        let duringAsynchronousExecution = true;\n        const finishEvaluation = ()=>{\n            endPerfBlock();\n            duringAsynchronousExecution = false;\n        };\n        let result;\n        let resultIsError = false;\n        let loadable;\n        const loadingDepsState = {\n            loadingDepKey: null,\n            loadingDepPromise: null\n        };\n        /**\n     * Starting a fresh set of deps that we'll be using to update state. We're\n     * starting a new set versus adding it in existing state deps because\n     * the version of state that we update deps for may be a more recent version\n     * than the version the selector was called with. This is because the latest\n     * execution will update the deps of the current/latest version of state\n     * (This is safe to do because the fact that the selector is the latest\n     * execution means the deps we discover below are our best guess at the\n     * deps for the current/latest state in the store)\n     */ const depValues = new Map();\n        function getRecoilValue(param) {\n            let { key: depKey } = param;\n            const depLoadable = getNodeLoadable$2(store, state, depKey);\n            depValues.set(depKey, depLoadable); // We need to update asynchronous dependencies as we go so the selector\n            // knows if it has to restart evaluation if one of them is updated before\n            // the asynchronous selector completely resolves.\n            if (!duringSynchronousExecution) {\n                updateDeps(store, state, new Set(depValues.keys()), executionID);\n                notifyStoresOfNewAsyncDep(store, executionID);\n            }\n            switch(depLoadable.state){\n                case \"hasValue\":\n                    return depLoadable.contents;\n                case \"hasError\":\n                    throw depLoadable.contents;\n                case \"loading\":\n                    loadingDepsState.loadingDepKey = depKey;\n                    loadingDepsState.loadingDepPromise = depLoadable.contents;\n                    throw depLoadable.contents;\n            }\n            throw Recoil_err(\"Invalid Loadable state\");\n        }\n        const getCallback = (fn)=>{\n            return function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                if (duringAsynchronousExecution) {\n                    throw Recoil_err(\"Callbacks from getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can work with Recoil state without a subscription.\");\n                }\n                !(recoilValue != null) ?  true ? Recoil_invariant(false, \"Recoil Value can never be null\") : 0 : void 0;\n                return recoilCallback$1(store, fn, args, {\n                    node: recoilValue\n                } // flowlint-line unclear-type:off\n                );\n            };\n        };\n        try {\n            result = get({\n                get: getRecoilValue,\n                getCallback\n            });\n            result = isRecoilValue$3(result) ? getRecoilValue(result) : result;\n            if (isLoadable$1(result)) {\n                if (result.state === \"hasError\") {\n                    resultIsError = true;\n                }\n                result = result.contents;\n            }\n            if (Recoil_isPromise(result)) {\n                result = wrapResultPromise(store, result, state, depValues, executionID, loadingDepsState).finally(finishEvaluation);\n            } else {\n                finishEvaluation();\n            }\n            result = result instanceof WrappedValue$1 ? result.value : result;\n        } catch (errorOrDepPromise) {\n            result = errorOrDepPromise;\n            if (Recoil_isPromise(result)) {\n                result = wrapPendingDependencyPromise(store, result, state, depValues, executionID, loadingDepsState).finally(finishEvaluation);\n            } else {\n                resultIsError = true;\n                finishEvaluation();\n            }\n        }\n        if (resultIsError) {\n            loadable = loadableWithError$1(result);\n        } else if (Recoil_isPromise(result)) {\n            loadable = loadableWithPromise$1(result);\n        } else {\n            loadable = loadableWithValue$2(result);\n        }\n        duringSynchronousExecution = false;\n        updateExecutionInfoDepValues(store, executionID, depValues);\n        updateDeps(store, state, new Set(depValues.keys()), executionID);\n        return [\n            loadable,\n            depValues\n        ];\n    }\n    function getLoadableFromCacheAndUpdateDeps(store, state) {\n        // First, look up in the state cache\n        // If it's here, then the deps in the store should already be valid.\n        let cachedLoadable = state.atomValues.get(key);\n        if (cachedLoadable != null) {\n            return cachedLoadable;\n        } // Second, look up in the selector cache and update the deps in the store\n        const depsAfterCacheLookup = new Set();\n        try {\n            cachedLoadable = cache.get((nodeKey)=>{\n                !(typeof nodeKey === \"string\") ?  true ? Recoil_invariant(false, \"Cache nodeKey is type string\") : 0 : void 0;\n                return getNodeLoadable$2(store, state, nodeKey).contents;\n            }, {\n                onNodeVisit: (node)=>{\n                    if (node.type === \"branch\" && node.nodeKey !== key) {\n                        depsAfterCacheLookup.add(node.nodeKey);\n                    }\n                }\n            });\n        } catch (error) {\n            throw Recoil_err('Problem with cache lookup for selector \"'.concat(key, '\": ').concat(error.message));\n        }\n        if (cachedLoadable) {\n            var _getExecutionInfo;\n            // Cache the results in the state to allow for cheaper lookup than\n            // iterating the tree cache of dependencies.\n            state.atomValues.set(key, cachedLoadable);\n            /**\n       * Ensure store contains correct dependencies if we hit the cache so that\n       * the store deps and cache are in sync for a given state. This is important\n       * because store deps are normally updated when new executions are created,\n       * but cache hits don't trigger new executions but they still _may_ signify\n       * a change in deps in the store if the store deps for this state are empty\n       * or stale.\n       */ updateDeps(store, state, depsAfterCacheLookup, (_getExecutionInfo = getExecutionInfo(store)) === null || _getExecutionInfo === void 0 ? void 0 : _getExecutionInfo.executionID);\n        }\n        return cachedLoadable;\n    }\n    /**\n   * Given a tree state, this function returns a Loadable of the current state.\n   *\n   * The selector's get() function will only be re-evaluated if _both_ of the\n   * following statements are true:\n   *\n   * 1. The current dep values from the given state produced a cache key that\n   *    was not found in the cache.\n   * 2. There is no currently running async execution OR there is an\n   *    async execution that is running, but after comparing the dep values in\n   *    the given state with the dep values that the execution has discovered so\n   *    far we find that at least one dep value has changed, in which case we\n   *    start a new execution (the previously running execution will continue to\n   *    run to completion, but only the new execution will be deemed the\n   *    'latest' execution, meaning it will be the only execution that will\n   *    update global state when it is finished. Any non-latest executions will\n   *    run to completion and update the selector cache but not global state).\n   */ function getSelectorLoadableAndUpdateDeps(store, state) {\n        // First, see if our current state is cached\n        const cachedVal = getLoadableFromCacheAndUpdateDeps(store, state);\n        if (cachedVal != null) {\n            clearExecutionInfo(store);\n            return cachedVal;\n        } // Second, check if there is already an ongoing execution based on the current state\n        const inProgressExecutionInfo = getInProgressExecutionInfo(store, state);\n        if (inProgressExecutionInfo != null) {\n            var _inProgressExecutionI;\n            if (((_inProgressExecutionI = inProgressExecutionInfo.loadingLoadable) === null || _inProgressExecutionI === void 0 ? void 0 : _inProgressExecutionI.state) === \"loading\") {\n                markStoreWaitingForResolvedAsync(store, inProgressExecutionInfo.executionID);\n            } // FIXME: check after the fact to see if we made the right choice by waiting\n            return inProgressExecutionInfo.loadingLoadable;\n        } // Third, start a new evaluation of the selector\n        const newExecutionID = getNewExecutionID();\n        const [loadable, newDepValues] = evaluateSelectorGetter(store, state, newExecutionID);\n        /**\n     * Conditionally updates the cache with a given loadable.\n     *\n     * We only cache loadables that are not loading because our cache keys are\n     * based on dep values, which are in an unfinished state for loadables that\n     * have a 'loading' state (new deps may be discovered while the selector\n     * runs its async code). We never want to cache partial dependencies b/c it\n     * could lead to errors, such as prematurely returning the result based on a\n     * partial list of deps-- we need the full list of deps to ensure that we\n     * are returning the correct result from cache.\n     */ if (loadable.state === \"loading\") {\n            setExecutionInfo(store, newExecutionID, loadable, newDepValues, state);\n            markStoreWaitingForResolvedAsync(store, newExecutionID);\n        } else {\n            clearExecutionInfo(store);\n            setCache(state, loadable, newDepValues);\n        }\n        return loadable;\n    }\n    /**\n   * Searches execution info across all stores to see if there is an in-progress\n   * execution whose dependency values match the values of the requesting store.\n   */ function getInProgressExecutionInfo(store, state) {\n        // Sort the pending executions so that our current store is checked first.\n        const pendingExecutions = Recoil_concatIterables([\n            executionInfoMap.has(store) ? [\n                Recoil_nullthrows(executionInfoMap.get(store))\n            ] : [],\n            Recoil_mapIterable(Recoil_filterIterable(executionInfoMap, (param)=>{\n                let [s] = param;\n                return s !== store;\n            }), (param)=>{\n                let [, execInfo] = param;\n                return execInfo;\n            })\n        ]);\n        function anyDepChanged(execDepValues) {\n            for (const [depKey, execLoadable] of execDepValues){\n                if (!getNodeLoadable$2(store, state, depKey).is(execLoadable)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        for (const execInfo of pendingExecutions){\n            if (// of state, then let's use it!\n            execInfo.stateVersions.get(state.version) || // If the deps for the execution match our current state, then it's valid\n            !anyDepChanged(execInfo.depValuesDiscoveredSoFarDuringAsyncWork)) {\n                execInfo.stateVersions.set(state.version, true);\n                return execInfo;\n            } else {\n                execInfo.stateVersions.set(state.version, false);\n            }\n        }\n        return undefined;\n    }\n    function getExecutionInfo(store) {\n        return executionInfoMap.get(store);\n    }\n    /**\n   * This function will update the selector's execution info when the selector\n   * has either finished running an execution or has started a new execution. If\n   * the given loadable is in a 'loading' state, the intention is that a new\n   * execution has started. Otherwise, the intention is that an execution has\n   * just finished.\n   */ function setExecutionInfo(store, newExecutionID, loadable, depValues, state) {\n        executionInfoMap.set(store, {\n            depValuesDiscoveredSoFarDuringAsyncWork: depValues,\n            executionID: newExecutionID,\n            loadingLoadable: loadable,\n            stateVersions: new Map([\n                [\n                    state.version,\n                    true\n                ]\n            ])\n        });\n    }\n    function updateExecutionInfoDepValues(store, executionID, depValues) {\n        // We only need to bother updating the deps for the latest execution because\n        // that's all getInProgressExecutionInfo() will be looking for.\n        if (isLatestExecution(store, executionID)) {\n            const executionInfo = getExecutionInfo(store);\n            if (executionInfo != null) {\n                executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;\n            }\n        }\n    }\n    function clearExecutionInfo(store) {\n        executionInfoMap.delete(store);\n    }\n    function isLatestExecution(store, executionID) {\n        var _getExecutionInfo2;\n        return executionID === ((_getExecutionInfo2 = getExecutionInfo(store)) === null || _getExecutionInfo2 === void 0 ? void 0 : _getExecutionInfo2.executionID);\n    }\n    /**\n   * FIXME: dep keys should take into account the state of the loadable to\n   * prevent the edge case where a loadable with an error and a loadable with\n   * an error as a value are treated as the same thing incorrectly. For example\n   * these two should be treated differently:\n   *\n   * selector({key: '', get: () => new Error('hi')});\n   * selector({key: '', get () => {throw new Error('hi')}});\n   *\n   * With current implementation they are treated the same\n   */ function depValuesToDepRoute(depValues) {\n        return Array.from(depValues.entries()).map((param)=>{\n            let [depKey, valLoadable] = param;\n            return [\n                depKey,\n                valLoadable.contents\n            ];\n        });\n    }\n    function setCache(state, loadable, depValues) {\n        if (true) {\n            if (loadable.state !== \"loading\" && Boolean(options.dangerouslyAllowMutability) === false) {\n                Recoil_deepFreezeValue(loadable.contents);\n            }\n        }\n        state.atomValues.set(key, loadable);\n        try {\n            cache.set(depValuesToDepRoute(depValues), loadable);\n        } catch (error) {\n            throw Recoil_err('Problem with setting cache for selector \"'.concat(key, '\": ').concat(error.message));\n        }\n    }\n    function detectCircularDependencies(fn) {\n        if (dependencyStack.includes(key)) {\n            const message = \"Recoil selector has circular dependencies: \".concat(dependencyStack.slice(dependencyStack.indexOf(key)).join(\" → \"));\n            return loadableWithError$1(Recoil_err(message));\n        }\n        dependencyStack.push(key);\n        try {\n            return fn();\n        } finally{\n            dependencyStack.pop();\n        }\n    }\n    function selectorPeek(store, state) {\n        const cachedLoadable = state.atomValues.get(key);\n        if (cachedLoadable != null) {\n            return cachedLoadable;\n        }\n        return cache.get((nodeKey)=>{\n            var _peekNodeLoadable;\n            !(typeof nodeKey === \"string\") ?  true ? Recoil_invariant(false, \"Cache nodeKey is type string\") : 0 : void 0;\n            return (_peekNodeLoadable = peekNodeLoadable$1(store, state, nodeKey)) === null || _peekNodeLoadable === void 0 ? void 0 : _peekNodeLoadable.contents;\n        });\n    }\n    function selectorGet(store, state) {\n        return detectCircularDependencies(()=>getSelectorLoadableAndUpdateDeps(store, state));\n    }\n    function invalidateSelector(state) {\n        state.atomValues.delete(key);\n    }\n    function clearSelectorCache(store, treeState) {\n        !(recoilValue != null) ?  true ? Recoil_invariant(false, \"Recoil Value can never be null\") : 0 : void 0;\n        for (const nodeKey of discoveredDependencyNodeKeys){\n            var _node$clearCache;\n            const node = getNode$6(nodeKey);\n            (_node$clearCache = node.clearCache) === null || _node$clearCache === void 0 ? void 0 : _node$clearCache.call(node, store, treeState);\n        }\n        discoveredDependencyNodeKeys.clear();\n        invalidateSelector(treeState);\n        cache.clear();\n        markRecoilValueModified$1(store, recoilValue);\n    }\n    if (set != null) {\n        /**\n     * ES5 strict mode prohibits defining non-top-level function declarations,\n     * so don't use function declaration syntax here\n     */ const selectorSet = (store, state, newValue)=>{\n            let syncSelectorSetFinished = false;\n            const writes = new Map();\n            function getRecoilValue(param) {\n                let { key: depKey } = param;\n                if (syncSelectorSetFinished) {\n                    throw Recoil_err(\"Recoil: Async selector sets are not currently supported.\");\n                }\n                const loadable = getNodeLoadable$2(store, state, depKey);\n                if (loadable.state === \"hasValue\") {\n                    return loadable.contents;\n                } else if (loadable.state === \"loading\") {\n                    const msg = 'Getting value of asynchronous atom or selector \"'.concat(depKey, '\" in a pending state while setting selector \"').concat(key, '\" is not yet supported.');\n                    Recoil_recoverableViolation(msg);\n                    throw Recoil_err(msg);\n                } else {\n                    throw loadable.contents;\n                }\n            }\n            function setRecoilState(recoilState, valueOrUpdater // $FlowFixMe[missing-local-annot]\n            ) {\n                if (syncSelectorSetFinished) {\n                    const msg = \"Recoil: Async selector sets are not currently supported.\";\n                    Recoil_recoverableViolation(msg);\n                    throw Recoil_err(msg);\n                }\n                const setValue = typeof valueOrUpdater === \"function\" ? // flowlint-next-line unclear-type:off\n                valueOrUpdater(getRecoilValue(recoilState)) : valueOrUpdater;\n                const upstreamWrites = setNodeValue$3(store, state, recoilState.key, setValue);\n                upstreamWrites.forEach((v, k)=>writes.set(k, v));\n            }\n            function resetRecoilState(recoilState) {\n                setRecoilState(recoilState, DEFAULT_VALUE$6);\n            }\n            const ret = set({\n                set: setRecoilState,\n                get: getRecoilValue,\n                reset: resetRecoilState\n            }, newValue); // set should be a void method, but if the user makes it `async`, then it\n            // will return a Promise, which we don't currently support.\n            if (ret !== undefined) {\n                throw Recoil_isPromise(ret) ? Recoil_err(\"Recoil: Async selector sets are not currently supported.\") : Recoil_err(\"Recoil: selector set should be a void function.\");\n            }\n            syncSelectorSetFinished = true;\n            return writes;\n        };\n        return recoilValue = registerNode$1({\n            key,\n            nodeType: \"selector\",\n            peek: selectorPeek,\n            get: selectorGet,\n            set: selectorSet,\n            init: selectorInit,\n            invalidate: invalidateSelector,\n            clearCache: clearSelectorCache,\n            shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,\n            dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n            shouldRestoreFromSnapshots: false,\n            retainedBy\n        });\n    } else {\n        return recoilValue = registerNode$1({\n            key,\n            nodeType: \"selector\",\n            peek: selectorPeek,\n            get: selectorGet,\n            init: selectorInit,\n            invalidate: invalidateSelector,\n            clearCache: clearSelectorCache,\n            shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,\n            dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n            shouldRestoreFromSnapshots: false,\n            retainedBy\n        });\n    }\n}\n/* eslint-enable no-redeclare */ // $FlowIssue[incompatible-use]\n// $FlowFixMe[missing-local-annot]\nselector.value = (value)=>new WrappedValue$1(value);\nvar Recoil_selector = selector;\n// @fb-only: import type {ScopeRules} from 'Recoil_ScopedAtom';\n// @fb-only: const {scopedAtom} = require('Recoil_ScopedAtom');\nconst { isLoadable: isLoadable$2, loadableWithError: loadableWithError$2, loadableWithPromise: loadableWithPromise$2, loadableWithValue: loadableWithValue$3 } = Recoil_Loadable$1;\nconst { WrappedValue: WrappedValue$2 } = Recoil_Wrapper$1;\nconst { peekNodeInfo: peekNodeInfo$3 } = Recoil_FunctionalCore;\nconst { DEFAULT_VALUE: DEFAULT_VALUE$7, DefaultValue: DefaultValue$2, getConfigDeletionHandler: getConfigDeletionHandler$2, registerNode: registerNode$2, setConfigDeletionHandler: setConfigDeletionHandler$1 } = Recoil_Node;\nconst { isRecoilValue: isRecoilValue$4 } = Recoil_RecoilValue$1;\nconst { getRecoilValueAsLoadable: getRecoilValueAsLoadable$4, markRecoilValueModified: markRecoilValueModified$2, setRecoilValue: setRecoilValue$4, setRecoilValueLoadable: setRecoilValueLoadable$2 } = Recoil_RecoilValueInterface;\nconst { retainedByOptionWithDefault: retainedByOptionWithDefault$2 } = Recoil_Retention;\nconst unwrap = (x)=>x instanceof WrappedValue$2 ? x.value : x;\nfunction baseAtom(options) {\n    const { key, persistence_UNSTABLE: persistence } = options;\n    const retainedBy = retainedByOptionWithDefault$2(options.retainedBy_UNSTABLE);\n    let liveStoresCount = 0;\n    function unwrapPromise(promise) {\n        return loadableWithPromise$2(promise.then((value)=>{\n            defaultLoadable = loadableWithValue$3(value);\n            return value;\n        }).catch((error)=>{\n            defaultLoadable = loadableWithError$2(error);\n            throw error;\n        }));\n    }\n    let defaultLoadable = Recoil_isPromise(options.default) ? unwrapPromise(options.default) : isLoadable$2(options.default) ? options.default.state === \"loading\" ? unwrapPromise(options.default.contents) : options.default : loadableWithValue$3(unwrap(options.default));\n    maybeFreezeValueOrPromise(defaultLoadable.contents);\n    let cachedAnswerForUnvalidatedValue = undefined; // Cleanup handlers for this atom\n    // Rely on stable reference equality of the store to use it as a key per <RecoilRoot>\n    const cleanupEffectsByStore = new Map();\n    function maybeFreezeValueOrPromise(valueOrPromise) {\n        if (true) {\n            if (options.dangerouslyAllowMutability !== true) {\n                if (Recoil_isPromise(valueOrPromise)) {\n                    return valueOrPromise.then((value)=>{\n                        Recoil_deepFreezeValue(value);\n                        return value;\n                    });\n                } else {\n                    Recoil_deepFreezeValue(valueOrPromise);\n                    return valueOrPromise;\n                }\n            }\n        }\n        return valueOrPromise;\n    }\n    function wrapPendingPromise(store, promise) {\n        const wrappedPromise = promise.then((value)=>{\n            var _store$getState$nextT, _state$atomValues$get;\n            const state = (_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree;\n            if (((_state$atomValues$get = state.atomValues.get(key)) === null || _state$atomValues$get === void 0 ? void 0 : _state$atomValues$get.contents) === wrappedPromise) {\n                setRecoilValue$4(store, node, value);\n            }\n            return value;\n        }).catch((error)=>{\n            var _store$getState$nextT2, _state$atomValues$get2;\n            const state = (_store$getState$nextT2 = store.getState().nextTree) !== null && _store$getState$nextT2 !== void 0 ? _store$getState$nextT2 : store.getState().currentTree;\n            if (((_state$atomValues$get2 = state.atomValues.get(key)) === null || _state$atomValues$get2 === void 0 ? void 0 : _state$atomValues$get2.contents) === wrappedPromise) {\n                setRecoilValueLoadable$2(store, node, loadableWithError$2(error));\n            }\n            throw error;\n        });\n        return wrappedPromise;\n    }\n    function initAtom(store, initState, trigger) {\n        var _options$effects;\n        liveStoresCount++;\n        const cleanupAtom = ()=>{\n            var _cleanupEffectsByStor;\n            liveStoresCount--;\n            (_cleanupEffectsByStor = cleanupEffectsByStore.get(store)) === null || _cleanupEffectsByStor === void 0 ? void 0 : _cleanupEffectsByStor.forEach((cleanup)=>cleanup());\n            cleanupEffectsByStore.delete(store);\n        };\n        store.getState().knownAtoms.add(key); // Setup async defaults to notify subscribers when they resolve\n        if (defaultLoadable.state === \"loading\") {\n            const notifyDefaultSubscribers = ()=>{\n                var _store$getState$nextT3;\n                const state = (_store$getState$nextT3 = store.getState().nextTree) !== null && _store$getState$nextT3 !== void 0 ? _store$getState$nextT3 : store.getState().currentTree;\n                if (!state.atomValues.has(key)) {\n                    markRecoilValueModified$2(store, node);\n                }\n            };\n            defaultLoadable.contents.finally(notifyDefaultSubscribers);\n        } ///////////////////\n        // Run Atom Effects\n        ///////////////////\n        const effects = (_options$effects = options.effects) !== null && _options$effects !== void 0 ? _options$effects : options.effects_UNSTABLE;\n        if (effects != null) {\n            // This state is scoped by Store, since this is in the initAtom() closure\n            let initValue = DEFAULT_VALUE$7;\n            let isDuringInit = true;\n            let isInitError = false;\n            let pendingSetSelf = null;\n            function getLoadable(recoilValue) {\n                // Normally we can just get the current value of another atom.\n                // But for our own value we need to check if there is a pending\n                // initialized value or get the fallback default value.\n                if (isDuringInit && recoilValue.key === key) {\n                    // Cast T to S\n                    const retValue = initValue; // flowlint-line unclear-type:off\n                    return retValue instanceof DefaultValue$2 ? peekAtom(store, initState) // flowlint-line unclear-type:off\n                     : Recoil_isPromise(retValue) ? loadableWithPromise$2(retValue.then((v)=>v instanceof DefaultValue$2 ? defaultLoadable.toPromise() // flowlint-line unclear-type:off\n                         : v)) : loadableWithValue$3(retValue);\n                }\n                return getRecoilValueAsLoadable$4(store, recoilValue);\n            }\n            function getPromise(recoilValue) {\n                return getLoadable(recoilValue).toPromise();\n            }\n            function getInfo_UNSTABLE(recoilValue) {\n                var _store$getState$nextT4;\n                const info = peekNodeInfo$3(store, (_store$getState$nextT4 = store.getState().nextTree) !== null && _store$getState$nextT4 !== void 0 ? _store$getState$nextT4 : store.getState().currentTree, recoilValue.key);\n                return isDuringInit && recoilValue.key === key && !(initValue instanceof DefaultValue$2) ? {\n                    ...info,\n                    isSet: true,\n                    loadable: getLoadable(recoilValue)\n                } : info;\n            }\n            const setSelf = (effect)=>(valueOrUpdater)=>{\n                    if (isDuringInit) {\n                        const currentLoadable = getLoadable(node);\n                        const currentValue = currentLoadable.state === \"hasValue\" ? currentLoadable.contents : DEFAULT_VALUE$7;\n                        initValue = typeof valueOrUpdater === \"function\" ? valueOrUpdater(currentValue) // flowlint-line unclear-type:off\n                         : valueOrUpdater;\n                        if (Recoil_isPromise(initValue)) {\n                            initValue = initValue.then((value)=>{\n                                // Avoid calling onSet() when setSelf() initializes with a Promise\n                                pendingSetSelf = {\n                                    effect,\n                                    value\n                                };\n                                return value;\n                            });\n                        }\n                    } else {\n                        if (Recoil_isPromise(valueOrUpdater)) {\n                            throw Recoil_err(\"Setting atoms to async values is not implemented.\");\n                        }\n                        if (typeof valueOrUpdater !== \"function\") {\n                            pendingSetSelf = {\n                                effect,\n                                value: unwrap(valueOrUpdater)\n                            };\n                        }\n                        setRecoilValue$4(store, node, typeof valueOrUpdater === \"function\" ? (currentValue)=>{\n                            const newValue = unwrap(valueOrUpdater(currentValue) // flowlint-line unclear-type:off\n                            ); // $FlowFixMe[incompatible-type]\n                            pendingSetSelf = {\n                                effect,\n                                value: newValue\n                            };\n                            return newValue;\n                        } : unwrap(valueOrUpdater));\n                    }\n                };\n            const resetSelf = (effect)=>()=>setSelf(effect)(DEFAULT_VALUE$7);\n            const onSet = (effect)=>(handler)=>{\n                    var _cleanupEffectsByStor2;\n                    const { release } = store.subscribeToTransactions((currentStore)=>{\n                        var _currentTree$atomValu;\n                        // eslint-disable-next-line prefer-const\n                        let { currentTree, previousTree } = currentStore.getState();\n                        if (!previousTree) {\n                            Recoil_recoverableViolation(\"Transaction subscribers notified without a next tree being present -- this is a bug in Recoil\");\n                            previousTree = currentTree; // attempt to trundle on\n                        }\n                        const newLoadable = (_currentTree$atomValu = currentTree.atomValues.get(key)) !== null && _currentTree$atomValu !== void 0 ? _currentTree$atomValu : defaultLoadable;\n                        if (newLoadable.state === \"hasValue\") {\n                            var _previousTree$atomVal, _pendingSetSelf, _pendingSetSelf2, _pendingSetSelf3;\n                            const newValue = newLoadable.contents;\n                            const oldLoadable = (_previousTree$atomVal = previousTree.atomValues.get(key)) !== null && _previousTree$atomVal !== void 0 ? _previousTree$atomVal : defaultLoadable;\n                            const oldValue = oldLoadable.state === \"hasValue\" ? oldLoadable.contents : DEFAULT_VALUE$7; // TODO This isn't actually valid, use as a placeholder for now.\n                            // Ignore atom value changes that were set via setSelf() in the same effect.\n                            // We will still properly call the handler if there was a subsequent\n                            // set from something other than an atom effect which was batched\n                            // with the `setSelf()` call.  However, we may incorrectly ignore\n                            // the handler if the subsequent batched call happens to set the\n                            // atom to the exact same value as the `setSelf()`.   But, in that\n                            // case, it was kind of a noop, so the semantics are debatable..\n                            if (((_pendingSetSelf = pendingSetSelf) === null || _pendingSetSelf === void 0 ? void 0 : _pendingSetSelf.effect) !== effect || ((_pendingSetSelf2 = pendingSetSelf) === null || _pendingSetSelf2 === void 0 ? void 0 : _pendingSetSelf2.value) !== newValue) {\n                                handler(newValue, oldValue, !currentTree.atomValues.has(key));\n                            } else if (((_pendingSetSelf3 = pendingSetSelf) === null || _pendingSetSelf3 === void 0 ? void 0 : _pendingSetSelf3.effect) === effect) {\n                                pendingSetSelf = null;\n                            }\n                        }\n                    }, key);\n                    cleanupEffectsByStore.set(store, [\n                        ...(_cleanupEffectsByStor2 = cleanupEffectsByStore.get(store)) !== null && _cleanupEffectsByStor2 !== void 0 ? _cleanupEffectsByStor2 : [],\n                        release\n                    ]);\n                };\n            for (const effect of effects){\n                try {\n                    const cleanup = effect({\n                        node,\n                        storeID: store.storeID,\n                        parentStoreID_UNSTABLE: store.parentStoreID,\n                        trigger,\n                        setSelf: setSelf(effect),\n                        resetSelf: resetSelf(effect),\n                        onSet: onSet(effect),\n                        getPromise,\n                        getLoadable,\n                        getInfo_UNSTABLE\n                    });\n                    if (cleanup != null) {\n                        var _cleanupEffectsByStor3;\n                        cleanupEffectsByStore.set(store, [\n                            ...(_cleanupEffectsByStor3 = cleanupEffectsByStore.get(store)) !== null && _cleanupEffectsByStor3 !== void 0 ? _cleanupEffectsByStor3 : [],\n                            cleanup\n                        ]);\n                    }\n                } catch (error) {\n                    initValue = error;\n                    isInitError = true;\n                }\n            }\n            isDuringInit = false; // Mutate initial state in place since we know there are no other subscribers\n            // since we are the ones initializing on first use.\n            if (!(initValue instanceof DefaultValue$2)) {\n                var _store$getState$nextT5;\n                const initLoadable = isInitError ? loadableWithError$2(initValue) : Recoil_isPromise(initValue) ? loadableWithPromise$2(wrapPendingPromise(store, initValue)) : loadableWithValue$3(unwrap(initValue));\n                maybeFreezeValueOrPromise(initLoadable.contents);\n                initState.atomValues.set(key, initLoadable); // If there is a pending transaction, then also mutate the next state tree.\n                // This could happen if the atom was first initialized in an action that\n                // also updated some other atom's state.\n                (_store$getState$nextT5 = store.getState().nextTree) === null || _store$getState$nextT5 === void 0 ? void 0 : _store$getState$nextT5.atomValues.set(key, initLoadable);\n            }\n        }\n        return cleanupAtom;\n    }\n    function peekAtom(_store, state) {\n        var _ref, _state$atomValues$get3;\n        return (_ref = (_state$atomValues$get3 = state.atomValues.get(key)) !== null && _state$atomValues$get3 !== void 0 ? _state$atomValues$get3 : cachedAnswerForUnvalidatedValue) !== null && _ref !== void 0 ? _ref : defaultLoadable;\n    }\n    function getAtom(_store, state) {\n        if (state.atomValues.has(key)) {\n            // Atom value is stored in state:\n            return Recoil_nullthrows(state.atomValues.get(key));\n        } else if (state.nonvalidatedAtoms.has(key)) {\n            // Atom value is stored but needs validation before use.\n            // We might have already validated it and have a cached validated value:\n            if (cachedAnswerForUnvalidatedValue != null) {\n                return cachedAnswerForUnvalidatedValue;\n            }\n            if (persistence == null) {\n                Recoil_expectationViolation(\"Tried to restore a persisted value for atom \".concat(key, \" but it has no persistence settings.\"));\n                return defaultLoadable;\n            }\n            const nonvalidatedValue = state.nonvalidatedAtoms.get(key);\n            const validatorResult = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$7);\n            const validatedValueLoadable = validatorResult instanceof DefaultValue$2 ? defaultLoadable : loadableWithValue$3(validatorResult);\n            cachedAnswerForUnvalidatedValue = validatedValueLoadable;\n            return cachedAnswerForUnvalidatedValue;\n        } else {\n            return defaultLoadable;\n        }\n    }\n    function invalidateAtom() {\n        cachedAnswerForUnvalidatedValue = undefined;\n    }\n    function setAtom(_store, state, newValue) {\n        // Bail out if we're being set to the existing value, or if we're being\n        // reset but have no stored value (validated or unvalidated) to reset from:\n        if (state.atomValues.has(key)) {\n            const existing = Recoil_nullthrows(state.atomValues.get(key));\n            if (existing.state === \"hasValue\" && newValue === existing.contents) {\n                return new Map();\n            }\n        } else if (!state.nonvalidatedAtoms.has(key) && newValue instanceof DefaultValue$2) {\n            return new Map();\n        }\n        maybeFreezeValueOrPromise(newValue);\n        cachedAnswerForUnvalidatedValue = undefined; // can be released now if it was previously in use\n        return new Map().set(key, loadableWithValue$3(newValue));\n    }\n    function shouldDeleteConfigOnReleaseAtom() {\n        return getConfigDeletionHandler$2(key) !== undefined && liveStoresCount <= 0;\n    }\n    const node = registerNode$2({\n        key,\n        nodeType: \"atom\",\n        peek: peekAtom,\n        get: getAtom,\n        set: setAtom,\n        init: initAtom,\n        invalidate: invalidateAtom,\n        shouldDeleteConfigOnRelease: shouldDeleteConfigOnReleaseAtom,\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n        persistence_UNSTABLE: options.persistence_UNSTABLE ? {\n            type: options.persistence_UNSTABLE.type,\n            backButton: options.persistence_UNSTABLE.backButton\n        } : undefined,\n        shouldRestoreFromSnapshots: true,\n        retainedBy\n    });\n    return node;\n} // prettier-ignore\nfunction atom(options) {\n    if (true) {\n        if (typeof options.key !== \"string\") {\n            throw Recoil_err(\"A key option with a unique string value must be provided when creating an atom.\");\n        }\n    }\n    const { ...restOptions } = options;\n    const optionsDefault = \"default\" in options ? options.default : new Promise(()=>{});\n    if (isRecoilValue$4(optionsDefault) // Continue to use atomWithFallback for promise defaults for scoped atoms\n    ) {\n        return atomWithFallback({\n            ...restOptions,\n            default: optionsDefault // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n        }); // @fb-only: } else if (scopeRules_APPEND_ONLY_READ_THE_DOCS\n    // @fb-only: && !isPromise(optionsDefault)\n    // @fb-only: && !isLoadable(optionsDefault)\n    // @fb-only: ) {\n    // @fb-only: return scopedAtom<T>({\n    // @fb-only: ...restOptions,\n    // @fb-only: default: unwrap<T>(optionsDefault),\n    // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n    // @fb-only: });\n    } else {\n        return baseAtom({\n            ...restOptions,\n            default: optionsDefault\n        });\n    }\n}\nfunction atomWithFallback(options) {\n    const base = atom({\n        ...options,\n        default: DEFAULT_VALUE$7,\n        persistence_UNSTABLE: options.persistence_UNSTABLE === undefined ? undefined : {\n            ...options.persistence_UNSTABLE,\n            validator: (storedValue)=>storedValue instanceof DefaultValue$2 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$7)\n        },\n        // TODO Hack for now.\n        effects: options.effects,\n        // flowlint-line unclear-type: off\n        effects_UNSTABLE: options.effects_UNSTABLE // flowlint-line unclear-type: off\n    }); // $FlowFixMe[incompatible-call]\n    const sel = Recoil_selector({\n        key: \"\".concat(options.key, \"__withFallback\"),\n        get: (param)=>{\n            let { get } = param;\n            const baseValue = get(base);\n            return baseValue instanceof DefaultValue$2 ? options.default : baseValue;\n        },\n        // $FlowFixMe[incompatible-call]\n        set: (param, newValue)=>{\n            let { set } = param;\n            return set(base, newValue);\n        },\n        // This selector does not need to cache as it is a wrapper selector\n        // and the selector within the wrapper selector will have a cache\n        // option by default\n        cachePolicy_UNSTABLE: {\n            eviction: \"most-recent\"\n        },\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability\n    });\n    setConfigDeletionHandler$1(sel.key, getConfigDeletionHandler$2(options.key));\n    return sel;\n} // $FlowFixMe[missing-local-annot]\natom.value = (value)=>new WrappedValue$2(value);\nvar Recoil_atom = atom;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall recoil\n */ class MapCache {\n    size() {\n        return this._map.size;\n    }\n    has(key) {\n        return this._map.has(this._keyMapper(key));\n    }\n    get(key) {\n        return this._map.get(this._keyMapper(key));\n    }\n    set(key, val) {\n        this._map.set(this._keyMapper(key), val);\n    }\n    delete(key) {\n        this._map.delete(this._keyMapper(key));\n    }\n    clear() {\n        this._map.clear();\n    }\n    constructor(options){\n        var _options$mapKey;\n        _defineProperty(this, \"_map\", void 0);\n        _defineProperty(this, \"_keyMapper\", void 0);\n        this._map = new Map();\n        this._keyMapper = (_options$mapKey = options === null || options === void 0 ? void 0 : options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v)=>v;\n    }\n}\nvar Recoil_MapCache = {\n    MapCache\n};\nvar Recoil_MapCache_1 = Recoil_MapCache.MapCache;\nvar Recoil_MapCache$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    MapCache: Recoil_MapCache_1\n});\nconst { LRUCache: LRUCache$2 } = Recoil_LRUCache$1;\nconst { MapCache: MapCache$1 } = Recoil_MapCache$1;\nconst defaultPolicy$1 = {\n    equality: \"reference\",\n    eviction: \"none\",\n    maxSize: Infinity\n};\nfunction cacheFromPolicy() {\n    let { equality = defaultPolicy$1.equality, eviction = defaultPolicy$1.eviction, maxSize = defaultPolicy$1.maxSize } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultPolicy$1;\n    const valueMapper = getValueMapper$1(equality);\n    const cache = getCache(eviction, maxSize, valueMapper);\n    return cache;\n}\nfunction getValueMapper$1(equality) {\n    switch(equality){\n        case \"reference\":\n            return (val)=>val;\n        case \"value\":\n            return (val)=>Recoil_stableStringify(val);\n    }\n    throw Recoil_err(\"Unrecognized equality policy \".concat(equality));\n}\nfunction getCache(eviction, maxSize, mapKey) {\n    switch(eviction){\n        case \"keep-all\":\n            return new MapCache$1({\n                mapKey\n            });\n        case \"lru\":\n            return new LRUCache$2({\n                mapKey,\n                maxSize: Recoil_nullthrows(maxSize)\n            });\n        case \"most-recent\":\n            return new LRUCache$2({\n                mapKey,\n                maxSize: 1\n            });\n    }\n    throw Recoil_err(\"Unrecognized eviction policy \".concat(eviction));\n}\nvar Recoil_cacheFromPolicy = cacheFromPolicy;\n// @fb-only: import type {ScopeRules} from 'Recoil_ScopedAtom';\nconst { setConfigDeletionHandler: setConfigDeletionHandler$2 } = Recoil_Node;\n// Process scopeRules to handle any entries which are functions taking parameters\n// prettier-ignore\n// @fb-only: function mapScopeRules<P>(\n// @fb-only: scopeRules?: ParameterizedScopeRules<P>,\n// @fb-only: param: P,\n// @fb-only: ): ScopeRules | void {\n// @fb-only: return scopeRules?.map(rule =>\n// @fb-only: Array.isArray(rule)\n// @fb-only: ? rule.map(entry => (typeof entry === 'function' ? entry(param) : entry))\n// @fb-only: : rule,\n// @fb-only: );\n// @fb-only: }\n/*\nA function which returns an atom based on the input parameter.\n\nEach unique parameter returns a unique atom. E.g.,\n\n  const f = atomFamily(...);\n  f({a: 1}) => an atom\n  f({a: 2}) => a different atom\n\nThis allows components to persist local, private state using atoms.  Each\ninstance of the component may have a different key, which it uses as the\nparameter for a family of atoms; in this way, each component will have\nits own atom not shared by other instances.  These state keys may be composed\ninto children's state keys as well.\n*/ function atomFamily(options) {\n    var _options$cachePolicyF, _options$cachePolicyF2;\n    const atomCache = Recoil_cacheFromPolicy({\n        equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : \"value\",\n        eviction: \"keep-all\"\n    }); // Simple atomFamily implementation to cache individual atoms based\n    // on the parameter value equality.\n    return (params)=>{\n        var _stableStringify, _options$effects;\n        const cachedAtom = atomCache.get(params);\n        if (cachedAtom != null) {\n            return cachedAtom;\n        }\n        const { cachePolicyForParams_UNSTABLE, ...atomOptions } = options;\n        const optionsDefault = \"default\" in options ? options.default : new Promise(()=>{});\n        const newAtom = Recoil_atom({\n            ...atomOptions,\n            key: \"\".concat(options.key, \"__\").concat((_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : \"void\"),\n            default: typeof optionsDefault === \"function\" ? // Flow doesn't know that T isn't a function, so we need to case to any\n            // $FlowIssue[incompatible-use]\n            optionsDefault(params) : optionsDefault,\n            retainedBy_UNSTABLE: typeof options.retainedBy_UNSTABLE === \"function\" ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE,\n            effects: typeof options.effects === \"function\" ? options.effects(params) : typeof options.effects_UNSTABLE === \"function\" ? options.effects_UNSTABLE(params) : (_options$effects = options.effects) !== null && _options$effects !== void 0 ? _options$effects : options.effects_UNSTABLE // prettier-ignore\n        });\n        atomCache.set(params, newAtom);\n        setConfigDeletionHandler$2(newAtom.key, ()=>{\n            atomCache.delete(params);\n        });\n        return newAtom;\n    };\n}\nvar Recoil_atomFamily = atomFamily;\nconst { setConfigDeletionHandler: setConfigDeletionHandler$3 } = Recoil_Node;\n// Keep in mind the parameter needs to be serializable as a cahche key\n// using Recoil_stableStringify\n// Add a unique index to each selector in case the cache implementation allows\n// duplicate keys based on equivalent stringified parameters\nlet nextIndex = 0;\n/* eslint-disable no-redeclare */ // Return a function that returns members of a family of selectors of the same type\n// E.g.,\n//\n// const s = selectorFamily(...);\n// s({a: 1}) => a selector\n// s({a: 2}) => a different selector\n//\n// By default, the selectors are distinguished by distinct values of the\n// parameter based on value equality, not reference equality.  This allows using\n// object literals or other equivalent objects at callsites to not create\n// duplicate cache entries.  This behavior may be overridden with the\n// cacheImplementationForParams option.\nfunction selectorFamily(options) {\n    var _options$cachePolicyF, _options$cachePolicyF2;\n    const selectorCache = Recoil_cacheFromPolicy({\n        equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : \"value\",\n        eviction: \"keep-all\"\n    });\n    return (params)=>{\n        var _stableStringify;\n        // Throw an error with selector key so that it is clear which\n        // selector is causing an error\n        let cachedSelector;\n        try {\n            cachedSelector = selectorCache.get(params);\n        } catch (error) {\n            throw Recoil_err(\"Problem with cache lookup for selector \".concat(options.key, \": \").concat(error.message));\n        }\n        if (cachedSelector != null) {\n            return cachedSelector;\n        }\n        const myKey = \"\".concat(options.key, \"__selectorFamily/\").concat((_stableStringify = Recoil_stableStringify(params, {\n            // It is possible to use functions in parameters if the user uses\n            // a cache with reference equality thanks to the incrementing index.\n            allowFunctions: true\n        })) !== null && _stableStringify !== void 0 ? _stableStringify : \"void\", \"/\").concat(nextIndex++); // Append index in case values serialize to the same key string\n        const myGet = (callbacks)=>options.get(params)(callbacks);\n        const myCachePolicy = options.cachePolicy_UNSTABLE;\n        const retainedBy = typeof options.retainedBy_UNSTABLE === \"function\" ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE;\n        let newSelector;\n        if (options.set != null) {\n            const set = options.set;\n            const mySet = (callbacks, newValue)=>set(params)(callbacks, newValue);\n            newSelector = Recoil_selector({\n                key: myKey,\n                get: myGet,\n                set: mySet,\n                cachePolicy_UNSTABLE: myCachePolicy,\n                dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n                retainedBy_UNSTABLE: retainedBy\n            });\n        } else {\n            newSelector = Recoil_selector({\n                key: myKey,\n                get: myGet,\n                cachePolicy_UNSTABLE: myCachePolicy,\n                dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n                retainedBy_UNSTABLE: retainedBy\n            });\n        }\n        selectorCache.set(params, newSelector);\n        setConfigDeletionHandler$3(newSelector.key, ()=>{\n            selectorCache.delete(params);\n        });\n        return newSelector;\n    };\n}\n/* eslint-enable no-redeclare */ var Recoil_selectorFamily = selectorFamily;\n// flowlint-next-line unclear-type:off\nconst constantSelector = Recoil_selectorFamily({\n    key: \"__constant\",\n    get: (constant)=>()=>constant,\n    cachePolicyForParams_UNSTABLE: {\n        equality: \"reference\"\n    }\n}); // Function that returns a selector which always produces the\n// same constant value.  It may be called multiple times with the\n// same value, based on reference equality, and will provide the\n// same selector.\nfunction constSelector(constant) {\n    return constantSelector(constant);\n}\nvar Recoil_constSelector = constSelector;\n// flowlint-next-line unclear-type:off\nconst throwingSelector = Recoil_selectorFamily({\n    key: \"__error\",\n    get: (message)=>()=>{\n            throw Recoil_err(message);\n        },\n    // TODO Why?\n    cachePolicyForParams_UNSTABLE: {\n        equality: \"reference\"\n    }\n}); // Function that returns a selector which always throws an error\n// with the provided message.\nfunction errorSelector(message) {\n    return throwingSelector(message);\n}\nvar Recoil_errorSelector = errorSelector;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Wraps another recoil value and prevents writing to it.\n *\n * \n * @format\n * @oncall recoil\n */ function readOnlySelector(atom) {\n    // flowlint-next-line unclear-type: off\n    return atom;\n}\nvar Recoil_readOnlySelector = readOnlySelector;\nconst { loadableWithError: loadableWithError$3, loadableWithPromise: loadableWithPromise$3, loadableWithValue: loadableWithValue$4 } = Recoil_Loadable$1;\n/////////////////\n//  TRUTH TABLE\n/////////////////\n// Dependencies        waitForNone         waitForAny        waitForAll       waitForAllSettled\n//  [loading, loading]  [Promise, Promise]  Promise           Promise         Promise\n//  [value, loading]    [value, Promise]    [value, Promise]  Promise         Promise\n//  [value, value]      [value, value]      [value, value]    [value, value]  [value, value]\n//\n//  [error, loading]    [Error, Promise]    [Error, Promise]  Error           Promise\n//  [error, error]      [Error, Error]      [Error, Error]    Error           [error, error]\n//  [value, error]      [value, Error]      [value, Error]    Error           [value, error]\n// Issue parallel requests for all dependencies and return the current\n// status if they have results, have some error, or are still pending.\nfunction concurrentRequests(getRecoilValue, deps) {\n    const results = Array(deps.length).fill(undefined);\n    const exceptions = Array(deps.length).fill(undefined);\n    for (const [i, dep] of deps.entries()){\n        try {\n            results[i] = getRecoilValue(dep);\n        } catch (e) {\n            // exceptions can either be Promises of pending results or real errors\n            exceptions[i] = e;\n        }\n    }\n    return [\n        results,\n        exceptions\n    ];\n}\nfunction isError(exp) {\n    return exp != null && !Recoil_isPromise(exp);\n}\nfunction unwrapDependencies(dependencies) {\n    return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map((key)=>dependencies[key]);\n}\nfunction wrapResults(dependencies, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */ results) {\n    return Array.isArray(dependencies) ? results : Object.getOwnPropertyNames(dependencies).reduce((out, key, idx)=>({\n            ...out,\n            [key]: results[idx]\n        }), {});\n}\nfunction wrapLoadables(dependencies, results, exceptions) {\n    const output = exceptions.map((exception, idx)=>exception == null ? loadableWithValue$4(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));\n    return wrapResults(dependencies, output);\n}\nfunction combineAsyncResultsWithSyncResults(syncResults, asyncResults) {\n    return asyncResults.map((result, idx)=>/**\n   * it's important we use === undefined as opposed to == null, because the\n   * resolved value of the async promise could be `null`, in which case we\n   * don't want to use syncResults[idx], which would be undefined. If async\n   * promise resolves to `undefined`, that's ok because `syncResults[idx]`\n   * will also be `undefined`. That's a little hacky, but it works.\n   */ result === undefined ? syncResults[idx] : result);\n} // Selector that requests all dependencies in parallel and immediately returns\n// current results without waiting.\nconst waitForNone = Recoil_selectorFamily({\n    key: \"__waitForNone\",\n    get: (dependencies)=>(param)=>{\n            let { get } = param;\n            // Issue requests for all dependencies in parallel.\n            const deps = unwrapDependencies(dependencies);\n            const [results, exceptions] = concurrentRequests(get, deps); // Always return the current status of the results; never block.\n            return wrapLoadables(dependencies, results, exceptions);\n        },\n    dangerouslyAllowMutability: true\n}); // Selector that requests all dependencies in parallel and waits for at least\n// one to be available before returning results.  It will only error if all\n// dependencies have errors.\nconst waitForAny = Recoil_selectorFamily({\n    key: \"__waitForAny\",\n    get: (dependencies)=>(param)=>{\n            let { get } = param;\n            // Issue requests for all dependencies in parallel.\n            // Exceptions can either be Promises of pending results or real errors\n            const deps = unwrapDependencies(dependencies);\n            const [results, exceptions] = concurrentRequests(get, deps); // If any results are available, value or error, return the current status\n            if (exceptions.some((exp)=>!Recoil_isPromise(exp))) {\n                return wrapLoadables(dependencies, results, exceptions);\n            } // Otherwise, return a promise that will resolve when the next result is\n            // available, whichever one happens to be next.  But, if all pending\n            // dependencies end up with errors, then reject the promise.\n            return new Promise((resolve)=>{\n                for (const [i, exp] of exceptions.entries()){\n                    if (Recoil_isPromise(exp)) {\n                        exp.then((result)=>{\n                            results[i] = result;\n                            exceptions[i] = undefined;\n                            resolve(wrapLoadables(dependencies, results, exceptions));\n                        }).catch((error)=>{\n                            exceptions[i] = error;\n                            resolve(wrapLoadables(dependencies, results, exceptions));\n                        });\n                    }\n                }\n            });\n        },\n    dangerouslyAllowMutability: true\n}); // Selector that requests all dependencies in parallel and waits for all to be\n// available before returning a value.  It will error if any dependencies error.\nconst waitForAll = Recoil_selectorFamily({\n    key: \"__waitForAll\",\n    get: (dependencies)=>(param)=>{\n            let { get } = param;\n            // Issue requests for all dependencies in parallel.\n            // Exceptions can either be Promises of pending results or real errors\n            const deps = unwrapDependencies(dependencies);\n            const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results\n            if (exceptions.every((exp)=>exp == null)) {\n                return wrapResults(dependencies, results);\n            } // If we have any errors, throw the first error\n            const error = exceptions.find(isError);\n            if (error != null) {\n                throw error;\n            } // Otherwise, return a promise that will resolve when all results are available\n            return Promise.all(exceptions).then((exceptionResults)=>wrapResults(dependencies, combineAsyncResultsWithSyncResults(results, exceptionResults)));\n        },\n    dangerouslyAllowMutability: true\n});\nconst waitForAllSettled = Recoil_selectorFamily({\n    key: \"__waitForAllSettled\",\n    get: (dependencies)=>(param)=>{\n            let { get } = param;\n            // Issue requests for all dependencies in parallel.\n            // Exceptions can either be Promises of pending results or real errors\n            const deps = unwrapDependencies(dependencies);\n            const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results\n            if (exceptions.every((exp)=>!Recoil_isPromise(exp))) {\n                return wrapLoadables(dependencies, results, exceptions);\n            } // Wait for all results to settle\n            return Promise.all(exceptions.map((exp, i)=>Recoil_isPromise(exp) ? exp.then((result)=>{\n                    results[i] = result;\n                    exceptions[i] = undefined;\n                }).catch((error)=>{\n                    results[i] = undefined;\n                    exceptions[i] = error;\n                }) : null)) // Then wrap them as loadables\n            .then(()=>wrapLoadables(dependencies, results, exceptions));\n        },\n    dangerouslyAllowMutability: true\n});\nconst noWait = Recoil_selectorFamily({\n    key: \"__noWait\",\n    get: (dependency)=>(param)=>{\n            let { get } = param;\n            try {\n                return Recoil_selector.value(loadableWithValue$4(get(dependency)));\n            } catch (exception) {\n                return Recoil_selector.value(Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));\n            }\n        },\n    dangerouslyAllowMutability: true\n});\nvar Recoil_WaitFor = {\n    waitForNone,\n    waitForAny,\n    waitForAll,\n    waitForAllSettled,\n    noWait\n};\nconst { RecoilLoadable } = Recoil_Loadable$1;\nconst { DefaultValue: DefaultValue$3 } = Recoil_Node;\nconst { RecoilRoot: RecoilRoot$2, useRecoilStoreID: useRecoilStoreID$1 } = Recoil_RecoilRoot;\nconst { isRecoilValue: isRecoilValue$5 } = Recoil_RecoilValue$1;\nconst { retentionZone: retentionZone$1 } = Recoil_RetentionZone;\nconst { freshSnapshot: freshSnapshot$2 } = Recoil_Snapshot$1;\nconst { useRecoilState: useRecoilState$1, useRecoilState_TRANSITION_SUPPORT_UNSTABLE: useRecoilState_TRANSITION_SUPPORT_UNSTABLE$1, useRecoilStateLoadable: useRecoilStateLoadable$1, useRecoilValue: useRecoilValue$1, useRecoilValue_TRANSITION_SUPPORT_UNSTABLE: useRecoilValue_TRANSITION_SUPPORT_UNSTABLE$1, useRecoilValueLoadable: useRecoilValueLoadable$1, useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE: useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE$1, useResetRecoilState: useResetRecoilState$1, useSetRecoilState: useSetRecoilState$1 } = Recoil_Hooks;\nconst { useGotoRecoilSnapshot: useGotoRecoilSnapshot$1, useRecoilSnapshot: useRecoilSnapshot$1, useRecoilTransactionObserver: useRecoilTransactionObserver$1 } = Recoil_SnapshotHooks;\nconst { useRecoilCallback: useRecoilCallback$1 } = Recoil_useRecoilCallback;\nconst { noWait: noWait$1, waitForAll: waitForAll$1, waitForAllSettled: waitForAllSettled$1, waitForAny: waitForAny$1, waitForNone: waitForNone$1 } = Recoil_WaitFor;\nvar Recoil_index = {\n    // Types\n    DefaultValue: DefaultValue$3,\n    isRecoilValue: isRecoilValue$5,\n    RecoilLoadable,\n    // Global Recoil environment settiongs\n    RecoilEnv: Recoil_RecoilEnv,\n    // Recoil Root\n    RecoilRoot: RecoilRoot$2,\n    useRecoilStoreID: useRecoilStoreID$1,\n    useRecoilBridgeAcrossReactRoots_UNSTABLE: Recoil_useRecoilBridgeAcrossReactRoots,\n    // Atoms/Selectors\n    atom: Recoil_atom,\n    selector: Recoil_selector,\n    // Convenience Atoms/Selectors\n    atomFamily: Recoil_atomFamily,\n    selectorFamily: Recoil_selectorFamily,\n    constSelector: Recoil_constSelector,\n    errorSelector: Recoil_errorSelector,\n    readOnlySelector: Recoil_readOnlySelector,\n    // Concurrency Helpers for Atoms/Selectors\n    noWait: noWait$1,\n    waitForNone: waitForNone$1,\n    waitForAny: waitForAny$1,\n    waitForAll: waitForAll$1,\n    waitForAllSettled: waitForAllSettled$1,\n    // Hooks for Atoms/Selectors\n    useRecoilValue: useRecoilValue$1,\n    useRecoilValueLoadable: useRecoilValueLoadable$1,\n    useRecoilState: useRecoilState$1,\n    useRecoilStateLoadable: useRecoilStateLoadable$1,\n    useSetRecoilState: useSetRecoilState$1,\n    useResetRecoilState: useResetRecoilState$1,\n    useGetRecoilValueInfo_UNSTABLE: Recoil_useGetRecoilValueInfo,\n    useRecoilRefresher_UNSTABLE: Recoil_useRecoilRefresher,\n    useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE: useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE$1,\n    useRecoilValue_TRANSITION_SUPPORT_UNSTABLE: useRecoilValue_TRANSITION_SUPPORT_UNSTABLE$1,\n    useRecoilState_TRANSITION_SUPPORT_UNSTABLE: useRecoilState_TRANSITION_SUPPORT_UNSTABLE$1,\n    // Hooks for complex operations\n    useRecoilCallback: useRecoilCallback$1,\n    useRecoilTransaction_UNSTABLE: Recoil_useRecoilTransaction,\n    // Snapshots\n    useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,\n    useRecoilSnapshot: useRecoilSnapshot$1,\n    useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,\n    snapshot_UNSTABLE: freshSnapshot$2,\n    // Memory Management\n    useRetain: Recoil_useRetain,\n    retentionZone: retentionZone$1\n};\nvar Recoil_index_1 = Recoil_index.DefaultValue;\nvar Recoil_index_2 = Recoil_index.isRecoilValue;\nvar Recoil_index_3 = Recoil_index.RecoilLoadable;\nvar Recoil_index_4 = Recoil_index.RecoilEnv;\nvar Recoil_index_5 = Recoil_index.RecoilRoot;\nvar Recoil_index_6 = Recoil_index.useRecoilStoreID;\nvar Recoil_index_7 = Recoil_index.useRecoilBridgeAcrossReactRoots_UNSTABLE;\nvar Recoil_index_8 = Recoil_index.atom;\nvar Recoil_index_9 = Recoil_index.selector;\nvar Recoil_index_10 = Recoil_index.atomFamily;\nvar Recoil_index_11 = Recoil_index.selectorFamily;\nvar Recoil_index_12 = Recoil_index.constSelector;\nvar Recoil_index_13 = Recoil_index.errorSelector;\nvar Recoil_index_14 = Recoil_index.readOnlySelector;\nvar Recoil_index_15 = Recoil_index.noWait;\nvar Recoil_index_16 = Recoil_index.waitForNone;\nvar Recoil_index_17 = Recoil_index.waitForAny;\nvar Recoil_index_18 = Recoil_index.waitForAll;\nvar Recoil_index_19 = Recoil_index.waitForAllSettled;\nvar Recoil_index_20 = Recoil_index.useRecoilValue;\nvar Recoil_index_21 = Recoil_index.useRecoilValueLoadable;\nvar Recoil_index_22 = Recoil_index.useRecoilState;\nvar Recoil_index_23 = Recoil_index.useRecoilStateLoadable;\nvar Recoil_index_24 = Recoil_index.useSetRecoilState;\nvar Recoil_index_25 = Recoil_index.useResetRecoilState;\nvar Recoil_index_26 = Recoil_index.useGetRecoilValueInfo_UNSTABLE;\nvar Recoil_index_27 = Recoil_index.useRecoilRefresher_UNSTABLE;\nvar Recoil_index_28 = Recoil_index.useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE;\nvar Recoil_index_29 = Recoil_index.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE;\nvar Recoil_index_30 = Recoil_index.useRecoilState_TRANSITION_SUPPORT_UNSTABLE;\nvar Recoil_index_31 = Recoil_index.useRecoilCallback;\nvar Recoil_index_32 = Recoil_index.useRecoilTransaction_UNSTABLE;\nvar Recoil_index_33 = Recoil_index.useGotoRecoilSnapshot;\nvar Recoil_index_34 = Recoil_index.useRecoilSnapshot;\nvar Recoil_index_35 = Recoil_index.useRecoilTransactionObserver_UNSTABLE;\nvar Recoil_index_36 = Recoil_index.snapshot_UNSTABLE;\nvar Recoil_index_37 = Recoil_index.useRetain;\nvar Recoil_index_38 = Recoil_index.retentionZone;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Recoil_index);\n\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Recoil_gkx_OSS\");\n$RefreshReg$(_c1, \"Batcher\");\n$RefreshReg$(_c2, \"RecoilRoot_INTERNAL\");\n$RefreshReg$(_c3, \"RecoilRoot\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/recoil/es/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/contact/page.tsx":
/*!******************************!*\
  !*** ./app/contact/page.tsx ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ContactPage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _hooks_useObserver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/hooks/useObserver */ \"(app-pages-browser)/./hooks/useObserver.ts\");\n/* harmony import */ var _utils_enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/enums */ \"(app-pages-browser)/./utils/enums.ts\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @chakra-ui/react */ \"(app-pages-browser)/./node_modules/@chakra-ui/layout/dist/chunk-JARCRF6W.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nfunction ContactPage() {\n    _s();\n    const { ref } = (0,_hooks_useObserver__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_utils_enums__WEBPACK_IMPORTED_MODULE_2__.NavLinks.contact);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_3__.Grid, {\n        h: \"100vh\",\n        placeContent: \"center\",\n        ref: ref,\n        children: \"Under Constuction\"\n    }, void 0, false, {\n        fileName: \"E:\\\\Next\\\\portfolio\\\\app\\\\contact\\\\page.tsx\",\n        lineNumber: 11,\n        columnNumber: 5\n    }, this);\n}\n_s(ContactPage, \"Iv+WBkedzmVMFMSPGR/3GCpS0tw=\", false, function() {\n    return [\n        _hooks_useObserver__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n    ];\n});\n_c = ContactPage;\nvar _c;\n$RefreshReg$(_c, \"ContactPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb250YWN0L3BhZ2UudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFOEM7QUFDTDtBQUNEO0FBRXpCLFNBQVNHOztJQUN0QixNQUFNLEVBQUVDLEdBQUcsRUFBRSxHQUFHSiw4REFBV0EsQ0FBQ0Msa0RBQVFBLENBQUNJLE9BQU87SUFFNUMscUJBQ0UsOERBQUNILGtEQUFJQTtRQUFDSSxHQUFFO1FBQVFDLGNBQWE7UUFBU0gsS0FBS0E7a0JBQUs7Ozs7OztBQUlwRDtHQVJ3QkQ7O1FBQ05ILDBEQUFXQTs7O0tBRExHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9jb250YWN0L3BhZ2UudHN4P2RhOTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XHJcblxyXG5pbXBvcnQgdXNlT2JzZXJ2ZXIgZnJvbSBcIkAvaG9va3MvdXNlT2JzZXJ2ZXJcIjtcclxuaW1wb3J0IHsgTmF2TGlua3MgfSBmcm9tIFwiQC91dGlscy9lbnVtc1wiO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSBcIkBjaGFrcmEtdWkvcmVhY3RcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbnRhY3RQYWdlKCkge1xyXG4gIGNvbnN0IHsgcmVmIH0gPSB1c2VPYnNlcnZlcihOYXZMaW5rcy5jb250YWN0KTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxHcmlkIGg9XCIxMDB2aFwiIHBsYWNlQ29udGVudD1cImNlbnRlclwiIHJlZj17cmVmfT5cclxuICAgICAgVW5kZXIgQ29uc3R1Y3Rpb25cclxuICAgIDwvR3JpZD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJ1c2VPYnNlcnZlciIsIk5hdkxpbmtzIiwiR3JpZCIsIkNvbnRhY3RQYWdlIiwicmVmIiwiY29udGFjdCIsImgiLCJwbGFjZUNvbnRlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/contact/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./hooks/useObserver.ts":
/*!******************************!*\
  !*** ./hooks/useObserver.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _state_activeNav__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/state/activeNav */ \"(app-pages-browser)/./state/activeNav.ts\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/use-in-view.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var recoil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! recoil */ \"(app-pages-browser)/./node_modules/recoil/es/index.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\nfunction useObserver(link) {\n    const setActiveNav = (0,recoil__WEBPACK_IMPORTED_MODULE_2__.useSetRecoilState)(_state_activeNav__WEBPACK_IMPORTED_MODULE_0__.activeNavState);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isInView = (0,framer_motion__WEBPACK_IMPORTED_MODULE_3__.useInView)(ref);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isInView) {\n            setActiveNav(link);\n        }\n    }, [\n        ref,\n        isInView,\n        setActiveNav,\n        link\n    ]);\n    return {\n        ref\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (useObserver);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZU9ic2VydmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs2REFFbUQ7QUFFVDtBQUNBO0FBQ0M7QUFFM0MsU0FBU0ssWUFBWUMsSUFBYztJQUNqQyxNQUFNQyxlQUFlSCx5REFBaUJBLENBQUNKLDREQUFjQTtJQUVyRCxNQUFNUSxNQUFNTCw2Q0FBTUEsQ0FBQztJQUNuQixNQUFNTSxXQUFXUix3REFBU0EsQ0FBQ087SUFFM0JOLGdEQUFTQSxDQUFDO1FBQ1IsSUFBSU8sVUFBVTtZQUNaRixhQUFhRDtRQUNmO0lBQ0YsR0FBRztRQUFDRTtRQUFLQztRQUFVRjtRQUFjRDtLQUFLO0lBRXRDLE9BQU87UUFBRUU7SUFBSTtBQUNmO0FBRUEsK0RBQWVILFdBQVdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vaG9va3MvdXNlT2JzZXJ2ZXIudHM/MzNhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcclxuXHJcbmltcG9ydCB7IGFjdGl2ZU5hdlN0YXRlIH0gZnJvbSBcIkAvc3RhdGUvYWN0aXZlTmF2XCI7XHJcbmltcG9ydCB7IE5hdkxpbmtzIH0gZnJvbSBcIkAvdXRpbHMvZW51bXNcIjtcclxuaW1wb3J0IHsgdXNlSW5WaWV3IH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlU2V0UmVjb2lsU3RhdGUgfSBmcm9tIFwicmVjb2lsXCI7XHJcblxyXG5mdW5jdGlvbiB1c2VPYnNlcnZlcihsaW5rOiBOYXZMaW5rcykge1xyXG4gIGNvbnN0IHNldEFjdGl2ZU5hdiA9IHVzZVNldFJlY29pbFN0YXRlKGFjdGl2ZU5hdlN0YXRlKTtcclxuXHJcbiAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpO1xyXG4gIGNvbnN0IGlzSW5WaWV3ID0gdXNlSW5WaWV3KHJlZik7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoaXNJblZpZXcpIHtcclxuICAgICAgc2V0QWN0aXZlTmF2KGxpbmspO1xyXG4gICAgfVxyXG4gIH0sIFtyZWYsIGlzSW5WaWV3LCBzZXRBY3RpdmVOYXYsIGxpbmtdKTtcclxuXHJcbiAgcmV0dXJuIHsgcmVmIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZU9ic2VydmVyO1xyXG4iXSwibmFtZXMiOlsiYWN0aXZlTmF2U3RhdGUiLCJ1c2VJblZpZXciLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJ1c2VTZXRSZWNvaWxTdGF0ZSIsInVzZU9ic2VydmVyIiwibGluayIsInNldEFjdGl2ZU5hdiIsInJlZiIsImlzSW5WaWV3Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useObserver.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./state/activeNav.ts":
/*!****************************!*\
  !*** ./state/activeNav.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   activeNavState: function() { return /* binding */ activeNavState; }\n/* harmony export */ });\n/* harmony import */ var _utils_enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/enums */ \"(app-pages-browser)/./utils/enums.ts\");\n/* harmony import */ var recoil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! recoil */ \"(app-pages-browser)/./node_modules/recoil/es/index.js\");\n\n\nconst activeNavState = (0,recoil__WEBPACK_IMPORTED_MODULE_1__.atom)({\n    key: \"active-nav-state\",\n    default: _utils_enums__WEBPACK_IMPORTED_MODULE_0__.NavLinks.home\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3N0YXRlL2FjdGl2ZU5hdi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUM7QUFDWDtBQUV2QixNQUFNRSxpQkFBaUJELDRDQUFJQSxDQUFXO0lBQzNDRSxLQUFLO0lBQ0xDLFNBQVNKLGtEQUFRQSxDQUFDSyxJQUFJO0FBQ3hCLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3RhdGUvYWN0aXZlTmF2LnRzPzlkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmF2TGlua3MgfSBmcm9tIFwiQC91dGlscy9lbnVtc1wiO1xyXG5pbXBvcnQgeyBhdG9tIH0gZnJvbSBcInJlY29pbFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFjdGl2ZU5hdlN0YXRlID0gYXRvbTxOYXZMaW5rcz4oe1xyXG4gIGtleTogXCJhY3RpdmUtbmF2LXN0YXRlXCIsXHJcbiAgZGVmYXVsdDogTmF2TGlua3MuaG9tZSxcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJOYXZMaW5rcyIsImF0b20iLCJhY3RpdmVOYXZTdGF0ZSIsImtleSIsImRlZmF1bHQiLCJob21lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./state/activeNav.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./utils/enums.ts":
/*!************************!*\
  !*** ./utils/enums.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavLinks: function() { return /* binding */ NavLinks; }\n/* harmony export */ });\nvar NavLinks;\n(function(NavLinks) {\n    NavLinks[\"home\"] = \"Home\";\n    NavLinks[\"about\"] = \"About\";\n    NavLinks[\"caseStudies\"] = \"Case Studies\";\n    NavLinks[\"services\"] = \"Services\";\n    NavLinks[\"contact\"] = \"Contact\";\n})(NavLinks || (NavLinks = {}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL2VudW1zLnRzIiwibWFwcGluZ3MiOiI7Ozs7O1VBQVlBOzs7Ozs7R0FBQUEsYUFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvZW51bXMudHM/M2JkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBOYXZMaW5rcyB7XHJcbiAgaG9tZSA9IFwiSG9tZVwiLFxyXG4gIGFib3V0ID0gXCJBYm91dFwiLFxyXG4gIGNhc2VTdHVkaWVzID0gXCJDYXNlIFN0dWRpZXNcIixcclxuICBzZXJ2aWNlcyA9IFwiU2VydmljZXNcIixcclxuICBjb250YWN0ID0gXCJDb250YWN0XCIsXHJcbn1cclxuIl0sIm5hbWVzIjpbIk5hdkxpbmtzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/enums.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/extends.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _extends; }\n/* harmony export */ });\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxTQUFTQTtJQUN0QkEsV0FBV0MsT0FBT0MsTUFBTSxHQUFHRCxPQUFPQyxNQUFNLENBQUNDLElBQUksS0FBSyxTQUFVQyxNQUFNO1FBQ2hFLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7WUFDekMsSUFBSUcsU0FBU0YsU0FBUyxDQUFDRCxFQUFFO1lBQ3pCLElBQUssSUFBSUksT0FBT0QsT0FBUTtnQkFDdEIsSUFBSVAsT0FBT1MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osUUFBUUMsTUFBTTtvQkFDckRMLE1BQU0sQ0FBQ0ssSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7Z0JBQzNCO1lBQ0Y7UUFDRjtRQUNBLE9BQU9MO0lBQ1Q7SUFDQSxPQUFPSixTQUFTYSxLQUFLLENBQUMsSUFBSSxFQUFFUDtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcz84ZWMyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSJdLCJuYW1lcyI6WyJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/extends.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/color-mode/dist/chunk-UQDW7KKV.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@chakra-ui/color-mode/dist/chunk-UQDW7KKV.mjs ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColorModeContext: function() { return /* binding */ ColorModeContext; },\n/* harmony export */   useColorMode: function() { return /* binding */ useColorMode; },\n/* harmony export */   useColorModeValue: function() { return /* binding */ useColorModeValue; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ ColorModeContext,useColorMode,useColorModeValue auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$();\n// src/color-mode-context.ts\n\nvar ColorModeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nColorModeContext.displayName = \"ColorModeContext\";\nfunction useColorMode() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ColorModeContext);\n    if (context === void 0) {\n        throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n    }\n    return context;\n}\n_s(useColorMode, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction useColorModeValue(light, dark) {\n    _s1();\n    const { colorMode } = useColorMode();\n    return colorMode === \"dark\" ? dark : light;\n}\n_s1(useColorModeValue, \"2Uu86IH3do63pkN3s1ysdRMmJuc=\", false, function() {\n    return [\n        useColorMode\n    ];\n});\n //# sourceMappingURL=chunk-UQDW7KKV.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL2NvbG9yLW1vZGUvZGlzdC9jaHVuay1VUURXN0tLVi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFQSw0QkFBNEI7QUFDc0I7QUFDbEQsSUFBSUUsaUNBQW1CRixvREFBYUEsQ0FBQyxDQUFDO0FBQ3RDRSxpQkFBaUJDLFdBQVcsR0FBRztBQUMvQixTQUFTQzs7SUFDUCxNQUFNQyxVQUFVSixpREFBVUEsQ0FBQ0M7SUFDM0IsSUFBSUcsWUFBWSxLQUFLLEdBQUc7UUFDdEIsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVDtHQU5TRDtBQU9ULFNBQVNHLGtCQUFrQkMsS0FBSyxFQUFFQyxJQUFJOztJQUNwQyxNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHTjtJQUN0QixPQUFPTSxjQUFjLFNBQVNELE9BQU9EO0FBQ3ZDO0lBSFNEOztRQUNlSDs7O0FBUXRCLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL2NvbG9yLW1vZGUvZGlzdC9jaHVuay1VUURXN0tLVi5tanM/MzQ3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuLy8gc3JjL2NvbG9yLW1vZGUtY29udGV4dC50c1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xudmFyIENvbG9yTW9kZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcbkNvbG9yTW9kZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkNvbG9yTW9kZUNvbnRleHRcIjtcbmZ1bmN0aW9uIHVzZUNvbG9yTW9kZSgpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoQ29sb3JNb2RlQ29udGV4dCk7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1c2VDb2xvck1vZGUgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIENvbG9yTW9kZVByb3ZpZGVyXCIpO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gdXNlQ29sb3JNb2RlVmFsdWUobGlnaHQsIGRhcmspIHtcbiAgY29uc3QgeyBjb2xvck1vZGUgfSA9IHVzZUNvbG9yTW9kZSgpO1xuICByZXR1cm4gY29sb3JNb2RlID09PSBcImRhcmtcIiA/IGRhcmsgOiBsaWdodDtcbn1cblxuZXhwb3J0IHtcbiAgQ29sb3JNb2RlQ29udGV4dCxcbiAgdXNlQ29sb3JNb2RlLFxuICB1c2VDb2xvck1vZGVWYWx1ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVVRRFc3S0tWLm1qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJDb2xvck1vZGVDb250ZXh0IiwiZGlzcGxheU5hbWUiLCJ1c2VDb2xvck1vZGUiLCJjb250ZXh0IiwiRXJyb3IiLCJ1c2VDb2xvck1vZGVWYWx1ZSIsImxpZ2h0IiwiZGFyayIsImNvbG9yTW9kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/color-mode/dist/chunk-UQDW7KKV.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/layout/dist/chunk-JARCRF6W.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@chakra-ui/layout/dist/chunk-JARCRF6W.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Grid: function() { return /* binding */ Grid; }\n/* harmony export */ });\n/* harmony import */ var _chakra_ui_system__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chakra-ui/system */ \"(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-ZJJGQIVY.mjs\");\n/* harmony import */ var _chakra_ui_system__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chakra-ui/system */ \"(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-ZHQNHOQS.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ Grid auto */ // src/grid.tsx\n\n\nvar Grid = (0,_chakra_ui_system__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(_c = function Grid2(props, ref) {\n    const { templateAreas, gap, rowGap, columnGap, column, row, autoFlow, autoRows, templateRows, autoColumns, templateColumns, ...rest } = props;\n    const styles = {\n        display: \"grid\",\n        gridTemplateAreas: templateAreas,\n        gridGap: gap,\n        gridRowGap: rowGap,\n        gridColumnGap: columnGap,\n        gridAutoColumns: autoColumns,\n        gridColumn: column,\n        gridRow: row,\n        gridAutoFlow: autoFlow,\n        gridAutoRows: autoRows,\n        gridTemplateRows: templateRows,\n        gridTemplateColumns: templateColumns\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_chakra_ui_system__WEBPACK_IMPORTED_MODULE_2__.chakra.div, {\n        ref,\n        __css: styles,\n        ...rest\n    });\n});\n_c1 = Grid;\nGrid.displayName = \"Grid\";\n //# sourceMappingURL=chunk-JARCRF6W.mjs.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Grid$forwardRef\");\n$RefreshReg$(_c1, \"Grid\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL2xheW91dC9kaXN0L2NodW5rLUpBUkNSRjZXLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OzBEQUVBLGVBQWU7QUFJWTtBQUNhO0FBQ3hDLElBQUlHLE9BQU9GLDZEQUFVQSxNQUFDLFNBQVNHLE1BQU1DLEtBQUssRUFBRUMsR0FBRztJQUM3QyxNQUFNLEVBQ0pDLGFBQWEsRUFDYkMsR0FBRyxFQUNIQyxNQUFNLEVBQ05DLFNBQVMsRUFDVEMsTUFBTSxFQUNOQyxHQUFHLEVBQ0hDLFFBQVEsRUFDUkMsUUFBUSxFQUNSQyxZQUFZLEVBQ1pDLFdBQVcsRUFDWEMsZUFBZSxFQUNmLEdBQUdDLE1BQ0osR0FBR2I7SUFDSixNQUFNYyxTQUFTO1FBQ2JDLFNBQVM7UUFDVEMsbUJBQW1CZDtRQUNuQmUsU0FBU2Q7UUFDVGUsWUFBWWQ7UUFDWmUsZUFBZWQ7UUFDZmUsaUJBQWlCVDtRQUNqQlUsWUFBWWY7UUFDWmdCLFNBQVNmO1FBQ1RnQixjQUFjZjtRQUNkZ0IsY0FBY2Y7UUFDZGdCLGtCQUFrQmY7UUFDbEJnQixxQkFBcUJkO0lBQ3ZCO0lBQ0EsT0FBTyxhQUFhLEdBQUdmLHNEQUFHQSxDQUFDRixxREFBTUEsQ0FBQ2dDLEdBQUcsRUFBRTtRQUFFMUI7UUFBSzJCLE9BQU9kO1FBQVEsR0FBR0QsSUFBSTtJQUFDO0FBQ3ZFOztBQUNBZixLQUFLK0IsV0FBVyxHQUFHO0FBSWpCLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL2xheW91dC9kaXN0L2NodW5rLUpBUkNSRjZXLm1qcz8xOGQ4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG4vLyBzcmMvZ3JpZC50c3hcbmltcG9ydCB7XG4gIGNoYWtyYSxcbiAgZm9yd2FyZFJlZlxufSBmcm9tIFwiQGNoYWtyYS11aS9zeXN0ZW1cIjtcbmltcG9ydCB7IGpzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xudmFyIEdyaWQgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIEdyaWQyKHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIHRlbXBsYXRlQXJlYXMsXG4gICAgZ2FwLFxuICAgIHJvd0dhcCxcbiAgICBjb2x1bW5HYXAsXG4gICAgY29sdW1uLFxuICAgIHJvdyxcbiAgICBhdXRvRmxvdyxcbiAgICBhdXRvUm93cyxcbiAgICB0ZW1wbGF0ZVJvd3MsXG4gICAgYXV0b0NvbHVtbnMsXG4gICAgdGVtcGxhdGVDb2x1bW5zLFxuICAgIC4uLnJlc3RcbiAgfSA9IHByb3BzO1xuICBjb25zdCBzdHlsZXMgPSB7XG4gICAgZGlzcGxheTogXCJncmlkXCIsXG4gICAgZ3JpZFRlbXBsYXRlQXJlYXM6IHRlbXBsYXRlQXJlYXMsXG4gICAgZ3JpZEdhcDogZ2FwLFxuICAgIGdyaWRSb3dHYXA6IHJvd0dhcCxcbiAgICBncmlkQ29sdW1uR2FwOiBjb2x1bW5HYXAsXG4gICAgZ3JpZEF1dG9Db2x1bW5zOiBhdXRvQ29sdW1ucyxcbiAgICBncmlkQ29sdW1uOiBjb2x1bW4sXG4gICAgZ3JpZFJvdzogcm93LFxuICAgIGdyaWRBdXRvRmxvdzogYXV0b0Zsb3csXG4gICAgZ3JpZEF1dG9Sb3dzOiBhdXRvUm93cyxcbiAgICBncmlkVGVtcGxhdGVSb3dzOiB0ZW1wbGF0ZVJvd3MsXG4gICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogdGVtcGxhdGVDb2x1bW5zXG4gIH07XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KGNoYWtyYS5kaXYsIHsgcmVmLCBfX2Nzczogc3R5bGVzLCAuLi5yZXN0IH0pO1xufSk7XG5HcmlkLmRpc3BsYXlOYW1lID0gXCJHcmlkXCI7XG5cbmV4cG9ydCB7XG4gIEdyaWRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1KQVJDUkY2Vy5tanMubWFwIl0sIm5hbWVzIjpbImNoYWtyYSIsImZvcndhcmRSZWYiLCJqc3giLCJHcmlkIiwiR3JpZDIiLCJwcm9wcyIsInJlZiIsInRlbXBsYXRlQXJlYXMiLCJnYXAiLCJyb3dHYXAiLCJjb2x1bW5HYXAiLCJjb2x1bW4iLCJyb3ciLCJhdXRvRmxvdyIsImF1dG9Sb3dzIiwidGVtcGxhdGVSb3dzIiwiYXV0b0NvbHVtbnMiLCJ0ZW1wbGF0ZUNvbHVtbnMiLCJyZXN0Iiwic3R5bGVzIiwiZGlzcGxheSIsImdyaWRUZW1wbGF0ZUFyZWFzIiwiZ3JpZEdhcCIsImdyaWRSb3dHYXAiLCJncmlkQ29sdW1uR2FwIiwiZ3JpZEF1dG9Db2x1bW5zIiwiZ3JpZENvbHVtbiIsImdyaWRSb3ciLCJncmlkQXV0b0Zsb3ciLCJncmlkQXV0b1Jvd3MiLCJncmlkVGVtcGxhdGVSb3dzIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImRpdiIsIl9fY3NzIiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/layout/dist/chunk-JARCRF6W.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/object-utils/dist/chunk-OLTBUDV5.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@chakra-ui/object-utils/dist/chunk-OLTBUDV5.mjs ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignAfter: function() { return /* binding */ assignAfter; }\n/* harmony export */ });\n// src/assign-after.ts\nfunction assignAfter(target) {\n    for(var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        sources[_key - 1] = arguments[_key];\n    }\n    if (target == null) {\n        throw new TypeError(\"Cannot convert undefined or null to object\");\n    }\n    const result = {\n        ...target\n    };\n    for (const nextSource of sources){\n        if (nextSource == null) continue;\n        for(const nextKey in nextSource){\n            if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey)) continue;\n            if (nextKey in result) delete result[nextKey];\n            result[nextKey] = nextSource[nextKey];\n        }\n    }\n    return result;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL29iamVjdC11dGlscy9kaXN0L2NodW5rLU9MVEJVRFY1Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsc0JBQXNCO0FBQ3RCLFNBQVNBLFlBQVlDLE1BQU07SUFBRTtRQUFHQyxRQUFILDJCQUFVOztJQUNyQyxJQUFJRCxVQUFVLE1BQU07UUFDbEIsTUFBTSxJQUFJRSxVQUFVO0lBQ3RCO0lBQ0EsTUFBTUMsU0FBUztRQUFFLEdBQUdILE1BQU07SUFBQztJQUMzQixLQUFLLE1BQU1JLGNBQWNILFFBQVM7UUFDaEMsSUFBSUcsY0FBYyxNQUNoQjtRQUNGLElBQUssTUFBTUMsV0FBV0QsV0FBWTtZQUNoQyxJQUFJLENBQUNFLE9BQU9DLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNMLFlBQVlDLFVBQ3BEO1lBQ0YsSUFBSUEsV0FBV0YsUUFDYixPQUFPQSxNQUFNLENBQUNFLFFBQVE7WUFDeEJGLE1BQU0sQ0FBQ0UsUUFBUSxHQUFHRCxVQUFVLENBQUNDLFFBQVE7UUFDdkM7SUFDRjtJQUNBLE9BQU9GO0FBQ1Q7QUFJRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNoYWtyYS11aS9vYmplY3QtdXRpbHMvZGlzdC9jaHVuay1PTFRCVURWNS5tanM/MzZiMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvYXNzaWduLWFmdGVyLnRzXG5mdW5jdGlvbiBhc3NpZ25BZnRlcih0YXJnZXQsIC4uLnNvdXJjZXMpIHtcbiAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdFwiKTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSB7IC4uLnRhcmdldCB9O1xuICBmb3IgKGNvbnN0IG5leHRTb3VyY2Ugb2Ygc291cmNlcykge1xuICAgIGlmIChuZXh0U291cmNlID09IG51bGwpXG4gICAgICBjb250aW51ZTtcbiAgICBmb3IgKGNvbnN0IG5leHRLZXkgaW4gbmV4dFNvdXJjZSkge1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV4dFNvdXJjZSwgbmV4dEtleSkpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgaWYgKG5leHRLZXkgaW4gcmVzdWx0KVxuICAgICAgICBkZWxldGUgcmVzdWx0W25leHRLZXldO1xuICAgICAgcmVzdWx0W25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IHtcbiAgYXNzaWduQWZ0ZXJcbn07XG4iXSwibmFtZXMiOlsiYXNzaWduQWZ0ZXIiLCJ0YXJnZXQiLCJzb3VyY2VzIiwiVHlwZUVycm9yIiwicmVzdWx0IiwibmV4dFNvdXJjZSIsIm5leHRLZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/object-utils/dist/chunk-OLTBUDV5.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/shared-utils/dist/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@chakra-ui/shared-utils/dist/index.mjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ariaAttr: function() { return /* binding */ ariaAttr; },\n/* harmony export */   callAll: function() { return /* binding */ callAll; },\n/* harmony export */   callAllHandlers: function() { return /* binding */ callAllHandlers; },\n/* harmony export */   cx: function() { return /* binding */ cx; },\n/* harmony export */   dataAttr: function() { return /* binding */ dataAttr; },\n/* harmony export */   isObject: function() { return /* binding */ isObject; },\n/* harmony export */   runIfFn: function() { return /* binding */ runIfFn; },\n/* harmony export */   warn: function() { return /* binding */ warn; }\n/* harmony export */ });\n// src/index.ts\nvar cx = function() {\n    for(var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++){\n        classNames[_key] = arguments[_key];\n    }\n    return classNames.filter(Boolean).join(\" \");\n};\nfunction isDev() {\n    return \"development\" !== \"production\";\n}\nfunction isObject(value) {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n}\nvar warn = (options)=>{\n    const { condition, message } = options;\n    if (condition && isDev()) {\n        console.warn(message);\n    }\n};\nfunction runIfFn(valueOrFn) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;\n}\nvar isFunction = (value)=>typeof value === \"function\";\nvar dataAttr = (condition)=>condition ? \"\" : void 0;\nvar ariaAttr = (condition)=>condition ? true : void 0;\nfunction callAllHandlers() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return function func(event) {\n        fns.some((fn)=>{\n            fn == null ? void 0 : fn(event);\n            return event == null ? void 0 : event.defaultPrevented;\n        });\n    };\n}\nfunction callAll() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return function mergedFn(arg) {\n        fns.forEach((fn)=>{\n            fn == null ? void 0 : fn(arg);\n        });\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3NoYXJlZC11dGlscy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLGVBQWU7QUFDZixJQUFJQSxLQUFLO3FDQUFJQztRQUFBQTs7V0FBZUEsV0FBV0MsTUFBTSxDQUFDQyxTQUFTQyxJQUFJLENBQUM7O0FBQzVELFNBQVNDO0lBQ1AsT0FBT0Msa0JBQXlCO0FBQ2xDO0FBQ0EsU0FBU0MsU0FBU0MsS0FBSztJQUNyQixNQUFNQyxPQUFPLE9BQU9EO0lBQ3BCLE9BQU9BLFNBQVMsUUFBU0MsQ0FBQUEsU0FBUyxZQUFZQSxTQUFTLFVBQVMsS0FBTSxDQUFDQyxNQUFNQyxPQUFPLENBQUNIO0FBQ3ZGO0FBQ0EsSUFBSUksT0FBTyxDQUFDQztJQUNWLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUUsR0FBR0Y7SUFDL0IsSUFBSUMsYUFBYVQsU0FBUztRQUN4QlcsUUFBUUosSUFBSSxDQUFDRztJQUNmO0FBQ0Y7QUFDQSxTQUFTRSxRQUFRQyxTQUFTO0lBQUU7UUFBR0MsS0FBSCwyQkFBTzs7SUFDakMsT0FBT0MsV0FBV0YsYUFBYUEsYUFBYUMsUUFBUUQ7QUFDdEQ7QUFDQSxJQUFJRSxhQUFhLENBQUNaLFFBQVUsT0FBT0EsVUFBVTtBQUM3QyxJQUFJYSxXQUFXLENBQUNQLFlBQWNBLFlBQVksS0FBSyxLQUFLO0FBQ3BELElBQUlRLFdBQVcsQ0FBQ1IsWUFBY0EsWUFBWSxPQUFPLEtBQUs7QUFDdEQsU0FBU1M7SUFBZ0I7UUFBR0MsSUFBSCx1QkFBTTs7SUFDN0IsT0FBTyxTQUFTQyxLQUFLQyxLQUFLO1FBQ3hCRixJQUFJRyxJQUFJLENBQUMsQ0FBQ0M7WUFDUkEsTUFBTSxPQUFPLEtBQUssSUFBSUEsR0FBR0Y7WUFDekIsT0FBT0EsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTUcsZ0JBQWdCO1FBQ3hEO0lBQ0Y7QUFDRjtBQUNBLFNBQVNDO0lBQVE7UUFBR04sSUFBSCx1QkFBTTs7SUFDckIsT0FBTyxTQUFTTyxTQUFTQyxHQUFHO1FBQzFCUixJQUFJUyxPQUFPLENBQUMsQ0FBQ0w7WUFDWEEsTUFBTSxPQUFPLEtBQUssSUFBSUEsR0FBR0k7UUFDM0I7SUFDRjtBQUNGO0FBVUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjaGFrcmEtdWkvc2hhcmVkLXV0aWxzL2Rpc3QvaW5kZXgubWpzPzE5MTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2luZGV4LnRzXG52YXIgY3ggPSAoLi4uY2xhc3NOYW1lcykgPT4gY2xhc3NOYW1lcy5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG5mdW5jdGlvbiBpc0RldigpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09PSBcIm9iamVjdFwiIHx8IHR5cGUgPT09IFwiZnVuY3Rpb25cIikgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxudmFyIHdhcm4gPSAob3B0aW9ucykgPT4ge1xuICBjb25zdCB7IGNvbmRpdGlvbiwgbWVzc2FnZSB9ID0gb3B0aW9ucztcbiAgaWYgKGNvbmRpdGlvbiAmJiBpc0RldigpKSB7XG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICB9XG59O1xuZnVuY3Rpb24gcnVuSWZGbih2YWx1ZU9yRm4sIC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWVPckZuKSA/IHZhbHVlT3JGbiguLi5hcmdzKSA6IHZhbHVlT3JGbjtcbn1cbnZhciBpc0Z1bmN0aW9uID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbnZhciBkYXRhQXR0ciA9IChjb25kaXRpb24pID0+IGNvbmRpdGlvbiA/IFwiXCIgOiB2b2lkIDA7XG52YXIgYXJpYUF0dHIgPSAoY29uZGl0aW9uKSA9PiBjb25kaXRpb24gPyB0cnVlIDogdm9pZCAwO1xuZnVuY3Rpb24gY2FsbEFsbEhhbmRsZXJzKC4uLmZucykge1xuICByZXR1cm4gZnVuY3Rpb24gZnVuYyhldmVudCkge1xuICAgIGZucy5zb21lKChmbikgPT4ge1xuICAgICAgZm4gPT0gbnVsbCA/IHZvaWQgMCA6IGZuKGV2ZW50KTtcbiAgICAgIHJldHVybiBldmVudCA9PSBudWxsID8gdm9pZCAwIDogZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNhbGxBbGwoLi4uZm5zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBtZXJnZWRGbihhcmcpIHtcbiAgICBmbnMuZm9yRWFjaCgoZm4pID0+IHtcbiAgICAgIGZuID09IG51bGwgPyB2b2lkIDAgOiBmbihhcmcpO1xuICAgIH0pO1xuICB9O1xufVxuZXhwb3J0IHtcbiAgYXJpYUF0dHIsXG4gIGNhbGxBbGwsXG4gIGNhbGxBbGxIYW5kbGVycyxcbiAgY3gsXG4gIGRhdGFBdHRyLFxuICBpc09iamVjdCxcbiAgcnVuSWZGbixcbiAgd2FyblxufTtcbiJdLCJuYW1lcyI6WyJjeCIsImNsYXNzTmFtZXMiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImlzRGV2IiwicHJvY2VzcyIsImlzT2JqZWN0IiwidmFsdWUiLCJ0eXBlIiwiQXJyYXkiLCJpc0FycmF5Iiwid2FybiIsIm9wdGlvbnMiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiY29uc29sZSIsInJ1bklmRm4iLCJ2YWx1ZU9yRm4iLCJhcmdzIiwiaXNGdW5jdGlvbiIsImRhdGFBdHRyIiwiYXJpYUF0dHIiLCJjYWxsQWxsSGFuZGxlcnMiLCJmbnMiLCJmdW5jIiwiZXZlbnQiLCJzb21lIiwiZm4iLCJkZWZhdWx0UHJldmVudGVkIiwiY2FsbEFsbCIsIm1lcmdlZEZuIiwiYXJnIiwiZm9yRWFjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/shared-utils/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/styled-system/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@chakra-ui/styled-system/dist/index.mjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPrefix: function() { return /* binding */ addPrefix; },\n/* harmony export */   background: function() { return /* binding */ background; },\n/* harmony export */   border: function() { return /* binding */ border; },\n/* harmony export */   calc: function() { return /* binding */ calc; },\n/* harmony export */   color: function() { return /* binding */ color; },\n/* harmony export */   createMultiStyleConfigHelpers: function() { return /* binding */ createMultiStyleConfigHelpers; },\n/* harmony export */   css: function() { return /* binding */ css; },\n/* harmony export */   cssVar: function() { return /* binding */ cssVar; },\n/* harmony export */   defineCssVars: function() { return /* binding */ defineCssVars; },\n/* harmony export */   defineStyle: function() { return /* binding */ defineStyle; },\n/* harmony export */   defineStyleConfig: function() { return /* binding */ defineStyleConfig; },\n/* harmony export */   effect: function() { return /* binding */ effect; },\n/* harmony export */   filter: function() { return /* binding */ filter; },\n/* harmony export */   flattenTokens: function() { return /* binding */ flattenTokens; },\n/* harmony export */   flexbox: function() { return /* binding */ flexbox; },\n/* harmony export */   getCSSVar: function() { return /* binding */ getCSSVar; },\n/* harmony export */   getCss: function() { return /* binding */ getCss; },\n/* harmony export */   grid: function() { return /* binding */ grid; },\n/* harmony export */   interactivity: function() { return /* binding */ interactivity; },\n/* harmony export */   isStyleProp: function() { return /* binding */ isStyleProp; },\n/* harmony export */   layout: function() { return /* binding */ layout; },\n/* harmony export */   layoutPropNames: function() { return /* binding */ layoutPropNames; },\n/* harmony export */   list: function() { return /* binding */ list; },\n/* harmony export */   omitThemingProps: function() { return /* binding */ omitThemingProps; },\n/* harmony export */   others: function() { return /* binding */ others; },\n/* harmony export */   position: function() { return /* binding */ position; },\n/* harmony export */   propNames: function() { return /* binding */ propNames; },\n/* harmony export */   pseudoPropNames: function() { return /* binding */ pseudoPropNames; },\n/* harmony export */   pseudoSelectors: function() { return /* binding */ pseudoSelectors; },\n/* harmony export */   resolveStyleConfig: function() { return /* binding */ resolveStyleConfig; },\n/* harmony export */   ring: function() { return /* binding */ ring; },\n/* harmony export */   scroll: function() { return /* binding */ scroll; },\n/* harmony export */   space: function() { return /* binding */ space; },\n/* harmony export */   systemProps: function() { return /* binding */ systemProps; },\n/* harmony export */   textDecoration: function() { return /* binding */ textDecoration; },\n/* harmony export */   toCSSVar: function() { return /* binding */ toCSSVar; },\n/* harmony export */   toVarDefinition: function() { return /* binding */ toVarDefinition; },\n/* harmony export */   toVarReference: function() { return /* binding */ toVarReference; },\n/* harmony export */   tokenToCSSVar: function() { return /* binding */ tokenToCSSVar; },\n/* harmony export */   transform: function() { return /* binding */ transform; },\n/* harmony export */   transition: function() { return /* binding */ transition; },\n/* harmony export */   typography: function() { return /* binding */ typography; }\n/* harmony export */ });\n/* harmony import */ var _chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chakra-ui/shared-utils */ \"(app-pages-browser)/./node_modules/@chakra-ui/shared-utils/dist/index.mjs\");\n/* harmony import */ var lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.mergewith */ \"(app-pages-browser)/./node_modules/lodash.mergewith/index.js\");\n// src/utils/create-transform.ts\n\nvar isImportant = (value)=>/!(important)?$/.test(value);\nvar withoutImportant = (value)=>typeof value === \"string\" ? value.replace(/!(important)?$/, \"\").trim() : value;\nvar tokenToCSSVar = (scale, value)=>(theme)=>{\n        const valueStr = String(value);\n        const important = isImportant(valueStr);\n        const valueWithoutImportant = withoutImportant(valueStr);\n        const key = scale ? \"\".concat(scale, \".\").concat(valueWithoutImportant) : valueWithoutImportant;\n        let transformed = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(theme.__cssMap) && key in theme.__cssMap ? theme.__cssMap[key].varRef : value;\n        transformed = withoutImportant(transformed);\n        return important ? \"\".concat(transformed, \" !important\") : transformed;\n    };\nfunction createTransform(options) {\n    const { scale, transform: transform2, compose } = options;\n    const fn = (value, theme)=>{\n        var _a;\n        const _value = tokenToCSSVar(scale, value)(theme);\n        let result = (_a = transform2 == null ? void 0 : transform2(_value, theme)) != null ? _a : _value;\n        if (compose) {\n            result = compose(result, theme);\n        }\n        return result;\n    };\n    return fn;\n}\n// src/utils/pipe.ts\nvar pipe = function() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return (v)=>fns.reduce((a, b)=>b(a), v);\n};\n// src/utils/prop-config.ts\nfunction toConfig(scale, transform2) {\n    return (property)=>{\n        const result = {\n            property,\n            scale\n        };\n        result.transform = createTransform({\n            scale,\n            transform: transform2\n        });\n        return result;\n    };\n}\nvar getRtl = (param)=>{\n    let { rtl, ltr } = param;\n    return (theme)=>theme.direction === \"rtl\" ? rtl : ltr;\n};\nfunction logical(options) {\n    const { property, scale, transform: transform2 } = options;\n    return {\n        scale,\n        property: getRtl(property),\n        transform: scale ? createTransform({\n            scale,\n            compose: transform2\n        }) : transform2\n    };\n}\n// src/utils/templates.ts\nvar transformTemplate = [\n    \"rotate(var(--chakra-rotate, 0))\",\n    \"scaleX(var(--chakra-scale-x, 1))\",\n    \"scaleY(var(--chakra-scale-y, 1))\",\n    \"skewX(var(--chakra-skew-x, 0))\",\n    \"skewY(var(--chakra-skew-y, 0))\"\n];\nfunction getTransformTemplate() {\n    return [\n        \"translateX(var(--chakra-translate-x, 0))\",\n        \"translateY(var(--chakra-translate-y, 0))\",\n        ...transformTemplate\n    ].join(\" \");\n}\nfunction getTransformGpuTemplate() {\n    return [\n        \"translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)\",\n        ...transformTemplate\n    ].join(\" \");\n}\nvar filterTemplate = {\n    \"--chakra-blur\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-brightness\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-contrast\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-grayscale\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-hue-rotate\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-invert\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-saturate\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-sepia\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-drop-shadow\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    filter: [\n        \"var(--chakra-blur)\",\n        \"var(--chakra-brightness)\",\n        \"var(--chakra-contrast)\",\n        \"var(--chakra-grayscale)\",\n        \"var(--chakra-hue-rotate)\",\n        \"var(--chakra-invert)\",\n        \"var(--chakra-saturate)\",\n        \"var(--chakra-sepia)\",\n        \"var(--chakra-drop-shadow)\"\n    ].join(\" \")\n};\nvar backdropFilterTemplate = {\n    backdropFilter: [\n        \"var(--chakra-backdrop-blur)\",\n        \"var(--chakra-backdrop-brightness)\",\n        \"var(--chakra-backdrop-contrast)\",\n        \"var(--chakra-backdrop-grayscale)\",\n        \"var(--chakra-backdrop-hue-rotate)\",\n        \"var(--chakra-backdrop-invert)\",\n        \"var(--chakra-backdrop-opacity)\",\n        \"var(--chakra-backdrop-saturate)\",\n        \"var(--chakra-backdrop-sepia)\"\n    ].join(\" \"),\n    \"--chakra-backdrop-blur\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-brightness\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-contrast\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-grayscale\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-hue-rotate\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-invert\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-opacity\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-saturate\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-sepia\": \"var(--chakra-empty,/*!*/ /*!*/)\"\n};\nfunction getRingTemplate(value) {\n    return {\n        \"--chakra-ring-offset-shadow\": \"var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)\",\n        \"--chakra-ring-shadow\": \"var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)\",\n        \"--chakra-ring-width\": value,\n        boxShadow: [\n            \"var(--chakra-ring-offset-shadow)\",\n            \"var(--chakra-ring-shadow)\",\n            \"var(--chakra-shadow, 0 0 #0000)\"\n        ].join(\", \")\n    };\n}\nvar flexDirectionTemplate = {\n    \"row-reverse\": {\n        space: \"--chakra-space-x-reverse\",\n        divide: \"--chakra-divide-x-reverse\"\n    },\n    \"column-reverse\": {\n        space: \"--chakra-space-y-reverse\",\n        divide: \"--chakra-divide-y-reverse\"\n    }\n};\n// src/utils/parse-gradient.ts\nvar directionMap = {\n    \"to-t\": \"to top\",\n    \"to-tr\": \"to top right\",\n    \"to-r\": \"to right\",\n    \"to-br\": \"to bottom right\",\n    \"to-b\": \"to bottom\",\n    \"to-bl\": \"to bottom left\",\n    \"to-l\": \"to left\",\n    \"to-tl\": \"to top left\"\n};\nvar valueSet = new Set(Object.values(directionMap));\nvar globalSet = /* @__PURE__ */ new Set([\n    \"none\",\n    \"-moz-initial\",\n    \"inherit\",\n    \"initial\",\n    \"revert\",\n    \"unset\"\n]);\nvar trimSpace = (str)=>str.trim();\nfunction parseGradient(value, theme) {\n    if (value == null || globalSet.has(value)) return value;\n    const prevent = isCSSFunction(value) || globalSet.has(value);\n    if (!prevent) return \"url('\".concat(value, \"')\");\n    const regex = /(^[a-z-A-Z]+)\\((.*)\\)/g;\n    const results = regex.exec(value);\n    const type = results == null ? void 0 : results[1];\n    const values = results == null ? void 0 : results[2];\n    if (!type || !values) return value;\n    const _type = type.includes(\"-gradient\") ? type : \"\".concat(type, \"-gradient\");\n    const [maybeDirection, ...stops] = values.split(\",\").map(trimSpace).filter(Boolean);\n    if ((stops == null ? void 0 : stops.length) === 0) return value;\n    const direction = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;\n    stops.unshift(direction);\n    const _values = stops.map((stop)=>{\n        if (valueSet.has(stop)) return stop;\n        const firstStop = stop.indexOf(\" \");\n        const [_color, _stop] = firstStop !== -1 ? [\n            stop.substr(0, firstStop),\n            stop.substr(firstStop + 1)\n        ] : [\n            stop\n        ];\n        const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(\" \");\n        const key = \"colors.\".concat(_color);\n        const color2 = key in theme.__cssMap ? theme.__cssMap[key].varRef : _color;\n        return _stopOrFunc ? [\n            color2,\n            ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [\n                _stopOrFunc\n            ]\n        ].join(\" \") : color2;\n    });\n    return \"\".concat(_type, \"(\").concat(_values.join(\", \"), \")\");\n}\nvar isCSSFunction = (value)=>{\n    return typeof value === \"string\" && value.includes(\"(\") && value.includes(\")\");\n};\nvar gradientTransform = (value, theme)=>parseGradient(value, theme != null ? theme : {});\n// src/utils/transform-functions.ts\nfunction isCssVar(value) {\n    return /^var\\(--.+\\)$/.test(value);\n}\nvar analyzeCSSValue = (value)=>{\n    const num = parseFloat(value.toString());\n    const unit = value.toString().replace(String(num), \"\");\n    return {\n        unitless: !unit,\n        value: num,\n        unit\n    };\n};\nvar wrap = (str)=>(value)=>\"\".concat(str, \"(\").concat(value, \")\");\nvar transformFunctions = {\n    filter (value) {\n        return value !== \"auto\" ? value : filterTemplate;\n    },\n    backdropFilter (value) {\n        return value !== \"auto\" ? value : backdropFilterTemplate;\n    },\n    ring (value) {\n        return getRingTemplate(transformFunctions.px(value));\n    },\n    bgClip (value) {\n        return value === \"text\" ? {\n            color: \"transparent\",\n            backgroundClip: \"text\"\n        } : {\n            backgroundClip: value\n        };\n    },\n    transform (value) {\n        if (value === \"auto\") return getTransformTemplate();\n        if (value === \"auto-gpu\") return getTransformGpuTemplate();\n        return value;\n    },\n    vh (value) {\n        return value === \"$100vh\" ? \"var(--chakra-vh)\" : value;\n    },\n    px (value) {\n        if (value == null) return value;\n        const { unitless } = analyzeCSSValue(value);\n        return unitless || typeof value === \"number\" ? \"\".concat(value, \"px\") : value;\n    },\n    fraction (value) {\n        return !(typeof value === \"number\") || value > 1 ? value : \"\".concat(value * 100, \"%\");\n    },\n    float (value, theme) {\n        const map = {\n            left: \"right\",\n            right: \"left\"\n        };\n        return theme.direction === \"rtl\" ? map[value] : value;\n    },\n    degree (value) {\n        if (isCssVar(value) || value == null) return value;\n        const unitless = typeof value === \"string\" && !value.endsWith(\"deg\");\n        return typeof value === \"number\" || unitless ? \"\".concat(value, \"deg\") : value;\n    },\n    gradient: gradientTransform,\n    blur: wrap(\"blur\"),\n    opacity: wrap(\"opacity\"),\n    brightness: wrap(\"brightness\"),\n    contrast: wrap(\"contrast\"),\n    dropShadow: wrap(\"drop-shadow\"),\n    grayscale: wrap(\"grayscale\"),\n    hueRotate: (value)=>wrap(\"hue-rotate\")(transformFunctions.degree(value)),\n    invert: wrap(\"invert\"),\n    saturate: wrap(\"saturate\"),\n    sepia: wrap(\"sepia\"),\n    bgImage (value) {\n        if (value == null) return value;\n        const prevent = isCSSFunction(value) || globalSet.has(value);\n        return !prevent ? \"url(\".concat(value, \")\") : value;\n    },\n    outline (value) {\n        const isNoneOrZero = String(value) === \"0\" || String(value) === \"none\";\n        return value !== null && isNoneOrZero ? {\n            outline: \"2px solid transparent\",\n            outlineOffset: \"2px\"\n        } : {\n            outline: value\n        };\n    },\n    flexDirection (value) {\n        var _a;\n        const { space: space2, divide: divide2 } = (_a = flexDirectionTemplate[value]) != null ? _a : {};\n        const result = {\n            flexDirection: value\n        };\n        if (space2) result[space2] = 1;\n        if (divide2) result[divide2] = 1;\n        return result;\n    }\n};\n// src/utils/index.ts\nvar t = {\n    borderWidths: toConfig(\"borderWidths\"),\n    borderStyles: toConfig(\"borderStyles\"),\n    colors: toConfig(\"colors\"),\n    borders: toConfig(\"borders\"),\n    gradients: toConfig(\"gradients\", transformFunctions.gradient),\n    radii: toConfig(\"radii\", transformFunctions.px),\n    space: toConfig(\"space\", pipe(transformFunctions.vh, transformFunctions.px)),\n    spaceT: toConfig(\"space\", pipe(transformFunctions.vh, transformFunctions.px)),\n    degreeT (property) {\n        return {\n            property,\n            transform: transformFunctions.degree\n        };\n    },\n    prop (property, scale, transform2) {\n        return {\n            property,\n            scale,\n            ...scale && {\n                transform: createTransform({\n                    scale,\n                    transform: transform2\n                })\n            }\n        };\n    },\n    propT (property, transform2) {\n        return {\n            property,\n            transform: transform2\n        };\n    },\n    sizes: toConfig(\"sizes\", pipe(transformFunctions.vh, transformFunctions.px)),\n    sizesT: toConfig(\"sizes\", pipe(transformFunctions.vh, transformFunctions.fraction)),\n    shadows: toConfig(\"shadows\"),\n    logical,\n    blur: toConfig(\"blur\", transformFunctions.blur)\n};\n// src/config/background.ts\nvar background = {\n    background: t.colors(\"background\"),\n    backgroundColor: t.colors(\"backgroundColor\"),\n    backgroundImage: t.gradients(\"backgroundImage\"),\n    backgroundSize: true,\n    backgroundPosition: true,\n    backgroundRepeat: true,\n    backgroundAttachment: true,\n    backgroundClip: {\n        transform: transformFunctions.bgClip\n    },\n    bgSize: t.prop(\"backgroundSize\"),\n    bgPosition: t.prop(\"backgroundPosition\"),\n    bg: t.colors(\"background\"),\n    bgColor: t.colors(\"backgroundColor\"),\n    bgPos: t.prop(\"backgroundPosition\"),\n    bgRepeat: t.prop(\"backgroundRepeat\"),\n    bgAttachment: t.prop(\"backgroundAttachment\"),\n    bgGradient: t.gradients(\"backgroundImage\"),\n    bgClip: {\n        transform: transformFunctions.bgClip\n    }\n};\nObject.assign(background, {\n    bgImage: background.backgroundImage,\n    bgImg: background.backgroundImage\n});\n// src/config/border.ts\nvar border = {\n    border: t.borders(\"border\"),\n    borderWidth: t.borderWidths(\"borderWidth\"),\n    borderStyle: t.borderStyles(\"borderStyle\"),\n    borderColor: t.colors(\"borderColor\"),\n    borderRadius: t.radii(\"borderRadius\"),\n    borderTop: t.borders(\"borderTop\"),\n    borderBlockStart: t.borders(\"borderBlockStart\"),\n    borderTopLeftRadius: t.radii(\"borderTopLeftRadius\"),\n    borderStartStartRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: \"borderTopLeftRadius\",\n            rtl: \"borderTopRightRadius\"\n        }\n    }),\n    borderEndStartRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: \"borderBottomLeftRadius\",\n            rtl: \"borderBottomRightRadius\"\n        }\n    }),\n    borderTopRightRadius: t.radii(\"borderTopRightRadius\"),\n    borderStartEndRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: \"borderTopRightRadius\",\n            rtl: \"borderTopLeftRadius\"\n        }\n    }),\n    borderEndEndRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: \"borderBottomRightRadius\",\n            rtl: \"borderBottomLeftRadius\"\n        }\n    }),\n    borderRight: t.borders(\"borderRight\"),\n    borderInlineEnd: t.borders(\"borderInlineEnd\"),\n    borderBottom: t.borders(\"borderBottom\"),\n    borderBlockEnd: t.borders(\"borderBlockEnd\"),\n    borderBottomLeftRadius: t.radii(\"borderBottomLeftRadius\"),\n    borderBottomRightRadius: t.radii(\"borderBottomRightRadius\"),\n    borderLeft: t.borders(\"borderLeft\"),\n    borderInlineStart: {\n        property: \"borderInlineStart\",\n        scale: \"borders\"\n    },\n    borderInlineStartRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: [\n                \"borderTopLeftRadius\",\n                \"borderBottomLeftRadius\"\n            ],\n            rtl: [\n                \"borderTopRightRadius\",\n                \"borderBottomRightRadius\"\n            ]\n        }\n    }),\n    borderInlineEndRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: [\n                \"borderTopRightRadius\",\n                \"borderBottomRightRadius\"\n            ],\n            rtl: [\n                \"borderTopLeftRadius\",\n                \"borderBottomLeftRadius\"\n            ]\n        }\n    }),\n    borderX: t.borders([\n        \"borderLeft\",\n        \"borderRight\"\n    ]),\n    borderInline: t.borders(\"borderInline\"),\n    borderY: t.borders([\n        \"borderTop\",\n        \"borderBottom\"\n    ]),\n    borderBlock: t.borders(\"borderBlock\"),\n    borderTopWidth: t.borderWidths(\"borderTopWidth\"),\n    borderBlockStartWidth: t.borderWidths(\"borderBlockStartWidth\"),\n    borderTopColor: t.colors(\"borderTopColor\"),\n    borderBlockStartColor: t.colors(\"borderBlockStartColor\"),\n    borderTopStyle: t.borderStyles(\"borderTopStyle\"),\n    borderBlockStartStyle: t.borderStyles(\"borderBlockStartStyle\"),\n    borderBottomWidth: t.borderWidths(\"borderBottomWidth\"),\n    borderBlockEndWidth: t.borderWidths(\"borderBlockEndWidth\"),\n    borderBottomColor: t.colors(\"borderBottomColor\"),\n    borderBlockEndColor: t.colors(\"borderBlockEndColor\"),\n    borderBottomStyle: t.borderStyles(\"borderBottomStyle\"),\n    borderBlockEndStyle: t.borderStyles(\"borderBlockEndStyle\"),\n    borderLeftWidth: t.borderWidths(\"borderLeftWidth\"),\n    borderInlineStartWidth: t.borderWidths(\"borderInlineStartWidth\"),\n    borderLeftColor: t.colors(\"borderLeftColor\"),\n    borderInlineStartColor: t.colors(\"borderInlineStartColor\"),\n    borderLeftStyle: t.borderStyles(\"borderLeftStyle\"),\n    borderInlineStartStyle: t.borderStyles(\"borderInlineStartStyle\"),\n    borderRightWidth: t.borderWidths(\"borderRightWidth\"),\n    borderInlineEndWidth: t.borderWidths(\"borderInlineEndWidth\"),\n    borderRightColor: t.colors(\"borderRightColor\"),\n    borderInlineEndColor: t.colors(\"borderInlineEndColor\"),\n    borderRightStyle: t.borderStyles(\"borderRightStyle\"),\n    borderInlineEndStyle: t.borderStyles(\"borderInlineEndStyle\"),\n    borderTopRadius: t.radii([\n        \"borderTopLeftRadius\",\n        \"borderTopRightRadius\"\n    ]),\n    borderBottomRadius: t.radii([\n        \"borderBottomLeftRadius\",\n        \"borderBottomRightRadius\"\n    ]),\n    borderLeftRadius: t.radii([\n        \"borderTopLeftRadius\",\n        \"borderBottomLeftRadius\"\n    ]),\n    borderRightRadius: t.radii([\n        \"borderTopRightRadius\",\n        \"borderBottomRightRadius\"\n    ])\n};\nObject.assign(border, {\n    rounded: border.borderRadius,\n    roundedTop: border.borderTopRadius,\n    roundedTopLeft: border.borderTopLeftRadius,\n    roundedTopRight: border.borderTopRightRadius,\n    roundedTopStart: border.borderStartStartRadius,\n    roundedTopEnd: border.borderStartEndRadius,\n    roundedBottom: border.borderBottomRadius,\n    roundedBottomLeft: border.borderBottomLeftRadius,\n    roundedBottomRight: border.borderBottomRightRadius,\n    roundedBottomStart: border.borderEndStartRadius,\n    roundedBottomEnd: border.borderEndEndRadius,\n    roundedLeft: border.borderLeftRadius,\n    roundedRight: border.borderRightRadius,\n    roundedStart: border.borderInlineStartRadius,\n    roundedEnd: border.borderInlineEndRadius,\n    borderStart: border.borderInlineStart,\n    borderEnd: border.borderInlineEnd,\n    borderTopStartRadius: border.borderStartStartRadius,\n    borderTopEndRadius: border.borderStartEndRadius,\n    borderBottomStartRadius: border.borderEndStartRadius,\n    borderBottomEndRadius: border.borderEndEndRadius,\n    borderStartRadius: border.borderInlineStartRadius,\n    borderEndRadius: border.borderInlineEndRadius,\n    borderStartWidth: border.borderInlineStartWidth,\n    borderEndWidth: border.borderInlineEndWidth,\n    borderStartColor: border.borderInlineStartColor,\n    borderEndColor: border.borderInlineEndColor,\n    borderStartStyle: border.borderInlineStartStyle,\n    borderEndStyle: border.borderInlineEndStyle\n});\n// src/config/color.ts\nvar color = {\n    color: t.colors(\"color\"),\n    textColor: t.colors(\"color\"),\n    fill: t.colors(\"fill\"),\n    stroke: t.colors(\"stroke\")\n};\n// src/config/effect.ts\nvar effect = {\n    boxShadow: t.shadows(\"boxShadow\"),\n    mixBlendMode: true,\n    blendMode: t.prop(\"mixBlendMode\"),\n    backgroundBlendMode: true,\n    bgBlendMode: t.prop(\"backgroundBlendMode\"),\n    opacity: true\n};\nObject.assign(effect, {\n    shadow: effect.boxShadow\n});\n// src/config/filter.ts\nvar filter = {\n    filter: {\n        transform: transformFunctions.filter\n    },\n    blur: t.blur(\"--chakra-blur\"),\n    brightness: t.propT(\"--chakra-brightness\", transformFunctions.brightness),\n    contrast: t.propT(\"--chakra-contrast\", transformFunctions.contrast),\n    hueRotate: t.propT(\"--chakra-hue-rotate\", transformFunctions.hueRotate),\n    invert: t.propT(\"--chakra-invert\", transformFunctions.invert),\n    saturate: t.propT(\"--chakra-saturate\", transformFunctions.saturate),\n    dropShadow: t.propT(\"--chakra-drop-shadow\", transformFunctions.dropShadow),\n    backdropFilter: {\n        transform: transformFunctions.backdropFilter\n    },\n    backdropBlur: t.blur(\"--chakra-backdrop-blur\"),\n    backdropBrightness: t.propT(\"--chakra-backdrop-brightness\", transformFunctions.brightness),\n    backdropContrast: t.propT(\"--chakra-backdrop-contrast\", transformFunctions.contrast),\n    backdropHueRotate: t.propT(\"--chakra-backdrop-hue-rotate\", transformFunctions.hueRotate),\n    backdropInvert: t.propT(\"--chakra-backdrop-invert\", transformFunctions.invert),\n    backdropSaturate: t.propT(\"--chakra-backdrop-saturate\", transformFunctions.saturate)\n};\n// src/config/flexbox.ts\nvar flexbox = {\n    alignItems: true,\n    alignContent: true,\n    justifyItems: true,\n    justifyContent: true,\n    flexWrap: true,\n    flexDirection: {\n        transform: transformFunctions.flexDirection\n    },\n    flex: true,\n    flexFlow: true,\n    flexGrow: true,\n    flexShrink: true,\n    flexBasis: t.sizes(\"flexBasis\"),\n    justifySelf: true,\n    alignSelf: true,\n    order: true,\n    placeItems: true,\n    placeContent: true,\n    placeSelf: true,\n    gap: t.space(\"gap\"),\n    rowGap: t.space(\"rowGap\"),\n    columnGap: t.space(\"columnGap\")\n};\nObject.assign(flexbox, {\n    flexDir: flexbox.flexDirection\n});\n// src/config/grid.ts\nvar grid = {\n    gridGap: t.space(\"gridGap\"),\n    gridColumnGap: t.space(\"gridColumnGap\"),\n    gridRowGap: t.space(\"gridRowGap\"),\n    gridColumn: true,\n    gridRow: true,\n    gridAutoFlow: true,\n    gridAutoColumns: true,\n    gridColumnStart: true,\n    gridColumnEnd: true,\n    gridRowStart: true,\n    gridRowEnd: true,\n    gridAutoRows: true,\n    gridTemplate: true,\n    gridTemplateColumns: true,\n    gridTemplateRows: true,\n    gridTemplateAreas: true,\n    gridArea: true\n};\n// src/config/interactivity.ts\nvar interactivity = {\n    appearance: true,\n    cursor: true,\n    resize: true,\n    userSelect: true,\n    pointerEvents: true,\n    outline: {\n        transform: transformFunctions.outline\n    },\n    outlineOffset: true,\n    outlineColor: t.colors(\"outlineColor\")\n};\n// src/config/layout.ts\nvar layout = {\n    width: t.sizesT(\"width\"),\n    inlineSize: t.sizesT(\"inlineSize\"),\n    height: t.sizes(\"height\"),\n    blockSize: t.sizes(\"blockSize\"),\n    boxSize: t.sizes([\n        \"width\",\n        \"height\"\n    ]),\n    minWidth: t.sizes(\"minWidth\"),\n    minInlineSize: t.sizes(\"minInlineSize\"),\n    minHeight: t.sizes(\"minHeight\"),\n    minBlockSize: t.sizes(\"minBlockSize\"),\n    maxWidth: t.sizes(\"maxWidth\"),\n    maxInlineSize: t.sizes(\"maxInlineSize\"),\n    maxHeight: t.sizes(\"maxHeight\"),\n    maxBlockSize: t.sizes(\"maxBlockSize\"),\n    overflow: true,\n    overflowX: true,\n    overflowY: true,\n    overscrollBehavior: true,\n    overscrollBehaviorX: true,\n    overscrollBehaviorY: true,\n    display: true,\n    aspectRatio: true,\n    hideFrom: {\n        scale: \"breakpoints\",\n        transform: (value, theme)=>{\n            var _a, _b, _c;\n            const breakpoint = (_c = (_b = (_a = theme.__breakpoints) == null ? void 0 : _a.get(value)) == null ? void 0 : _b.minW) != null ? _c : value;\n            const mq = \"@media screen and (min-width: \".concat(breakpoint, \")\");\n            return {\n                [mq]: {\n                    display: \"none\"\n                }\n            };\n        }\n    },\n    hideBelow: {\n        scale: \"breakpoints\",\n        transform: (value, theme)=>{\n            var _a, _b, _c;\n            const breakpoint = (_c = (_b = (_a = theme.__breakpoints) == null ? void 0 : _a.get(value)) == null ? void 0 : _b._minW) != null ? _c : value;\n            const mq = \"@media screen and (max-width: \".concat(breakpoint, \")\");\n            return {\n                [mq]: {\n                    display: \"none\"\n                }\n            };\n        }\n    },\n    verticalAlign: true,\n    boxSizing: true,\n    boxDecorationBreak: true,\n    float: t.propT(\"float\", transformFunctions.float),\n    objectFit: true,\n    objectPosition: true,\n    visibility: true,\n    isolation: true\n};\nObject.assign(layout, {\n    w: layout.width,\n    h: layout.height,\n    minW: layout.minWidth,\n    maxW: layout.maxWidth,\n    minH: layout.minHeight,\n    maxH: layout.maxHeight,\n    overscroll: layout.overscrollBehavior,\n    overscrollX: layout.overscrollBehaviorX,\n    overscrollY: layout.overscrollBehaviorY\n});\n// src/config/list.ts\nvar list = {\n    listStyleType: true,\n    listStylePosition: true,\n    listStylePos: t.prop(\"listStylePosition\"),\n    listStyleImage: true,\n    listStyleImg: t.prop(\"listStyleImage\")\n};\n// src/get.ts\nfunction get(obj, path, fallback, index) {\n    const key = typeof path === \"string\" ? path.split(\".\") : [\n        path\n    ];\n    for(index = 0; index < key.length; index += 1){\n        if (!obj) break;\n        obj = obj[key[index]];\n    }\n    return obj === void 0 ? fallback : obj;\n}\nvar memoize = (fn)=>{\n    const cache = /* @__PURE__ */ new WeakMap();\n    const memoizedFn = (obj, path, fallback, index)=>{\n        if (typeof obj === \"undefined\") {\n            return fn(obj, path, fallback);\n        }\n        if (!cache.has(obj)) {\n            cache.set(obj, /* @__PURE__ */ new Map());\n        }\n        const map = cache.get(obj);\n        if (map.has(path)) {\n            return map.get(path);\n        }\n        const value = fn(obj, path, fallback, index);\n        map.set(path, value);\n        return value;\n    };\n    return memoizedFn;\n};\nvar memoizedGet = memoize(get);\n// src/config/others.ts\nvar srOnly = {\n    border: \"0px\",\n    clip: \"rect(0, 0, 0, 0)\",\n    width: \"1px\",\n    height: \"1px\",\n    margin: \"-1px\",\n    padding: \"0px\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    position: \"absolute\"\n};\nvar srFocusable = {\n    position: \"static\",\n    width: \"auto\",\n    height: \"auto\",\n    clip: \"auto\",\n    padding: \"0\",\n    margin: \"0\",\n    overflow: \"visible\",\n    whiteSpace: \"normal\"\n};\nvar getWithPriority = (theme, key, styles)=>{\n    const result = {};\n    const obj = memoizedGet(theme, key, {});\n    for(const prop in obj){\n        const isInStyles = prop in styles && styles[prop] != null;\n        if (!isInStyles) result[prop] = obj[prop];\n    }\n    return result;\n};\nvar others = {\n    srOnly: {\n        transform (value) {\n            if (value === true) return srOnly;\n            if (value === \"focusable\") return srFocusable;\n            return {};\n        }\n    },\n    layerStyle: {\n        processResult: true,\n        transform: (value, theme, styles)=>getWithPriority(theme, \"layerStyles.\".concat(value), styles)\n    },\n    textStyle: {\n        processResult: true,\n        transform: (value, theme, styles)=>getWithPriority(theme, \"textStyles.\".concat(value), styles)\n    },\n    apply: {\n        processResult: true,\n        transform: (value, theme, styles)=>getWithPriority(theme, value, styles)\n    }\n};\n// src/config/position.ts\nvar position = {\n    position: true,\n    pos: t.prop(\"position\"),\n    zIndex: t.prop(\"zIndex\", \"zIndices\"),\n    inset: t.spaceT(\"inset\"),\n    insetX: t.spaceT([\n        \"left\",\n        \"right\"\n    ]),\n    insetInline: t.spaceT(\"insetInline\"),\n    insetY: t.spaceT([\n        \"top\",\n        \"bottom\"\n    ]),\n    insetBlock: t.spaceT(\"insetBlock\"),\n    top: t.spaceT(\"top\"),\n    insetBlockStart: t.spaceT(\"insetBlockStart\"),\n    bottom: t.spaceT(\"bottom\"),\n    insetBlockEnd: t.spaceT(\"insetBlockEnd\"),\n    left: t.spaceT(\"left\"),\n    insetInlineStart: t.logical({\n        scale: \"space\",\n        property: {\n            ltr: \"left\",\n            rtl: \"right\"\n        }\n    }),\n    right: t.spaceT(\"right\"),\n    insetInlineEnd: t.logical({\n        scale: \"space\",\n        property: {\n            ltr: \"right\",\n            rtl: \"left\"\n        }\n    })\n};\nObject.assign(position, {\n    insetStart: position.insetInlineStart,\n    insetEnd: position.insetInlineEnd\n});\n// src/config/ring.ts\nvar ring = {\n    ring: {\n        transform: transformFunctions.ring\n    },\n    ringColor: t.colors(\"--chakra-ring-color\"),\n    ringOffset: t.prop(\"--chakra-ring-offset-width\"),\n    ringOffsetColor: t.colors(\"--chakra-ring-offset-color\"),\n    ringInset: t.prop(\"--chakra-ring-inset\")\n};\n// src/config/space.ts\nvar space = {\n    margin: t.spaceT(\"margin\"),\n    marginTop: t.spaceT(\"marginTop\"),\n    marginBlockStart: t.spaceT(\"marginBlockStart\"),\n    marginRight: t.spaceT(\"marginRight\"),\n    marginInlineEnd: t.spaceT(\"marginInlineEnd\"),\n    marginBottom: t.spaceT(\"marginBottom\"),\n    marginBlockEnd: t.spaceT(\"marginBlockEnd\"),\n    marginLeft: t.spaceT(\"marginLeft\"),\n    marginInlineStart: t.spaceT(\"marginInlineStart\"),\n    marginX: t.spaceT([\n        \"marginInlineStart\",\n        \"marginInlineEnd\"\n    ]),\n    marginInline: t.spaceT(\"marginInline\"),\n    marginY: t.spaceT([\n        \"marginTop\",\n        \"marginBottom\"\n    ]),\n    marginBlock: t.spaceT(\"marginBlock\"),\n    padding: t.space(\"padding\"),\n    paddingTop: t.space(\"paddingTop\"),\n    paddingBlockStart: t.space(\"paddingBlockStart\"),\n    paddingRight: t.space(\"paddingRight\"),\n    paddingBottom: t.space(\"paddingBottom\"),\n    paddingBlockEnd: t.space(\"paddingBlockEnd\"),\n    paddingLeft: t.space(\"paddingLeft\"),\n    paddingInlineStart: t.space(\"paddingInlineStart\"),\n    paddingInlineEnd: t.space(\"paddingInlineEnd\"),\n    paddingX: t.space([\n        \"paddingInlineStart\",\n        \"paddingInlineEnd\"\n    ]),\n    paddingInline: t.space(\"paddingInline\"),\n    paddingY: t.space([\n        \"paddingTop\",\n        \"paddingBottom\"\n    ]),\n    paddingBlock: t.space(\"paddingBlock\")\n};\nObject.assign(space, {\n    m: space.margin,\n    mt: space.marginTop,\n    mr: space.marginRight,\n    me: space.marginInlineEnd,\n    marginEnd: space.marginInlineEnd,\n    mb: space.marginBottom,\n    ml: space.marginLeft,\n    ms: space.marginInlineStart,\n    marginStart: space.marginInlineStart,\n    mx: space.marginX,\n    my: space.marginY,\n    p: space.padding,\n    pt: space.paddingTop,\n    py: space.paddingY,\n    px: space.paddingX,\n    pb: space.paddingBottom,\n    pl: space.paddingLeft,\n    ps: space.paddingInlineStart,\n    paddingStart: space.paddingInlineStart,\n    pr: space.paddingRight,\n    pe: space.paddingInlineEnd,\n    paddingEnd: space.paddingInlineEnd\n});\n// src/config/text-decoration.ts\nvar textDecoration = {\n    textDecorationColor: t.colors(\"textDecorationColor\"),\n    textDecoration: true,\n    textDecor: {\n        property: \"textDecoration\"\n    },\n    textDecorationLine: true,\n    textDecorationStyle: true,\n    textDecorationThickness: true,\n    textUnderlineOffset: true,\n    textShadow: t.shadows(\"textShadow\")\n};\n// src/config/transform.ts\nvar transform = {\n    clipPath: true,\n    transform: t.propT(\"transform\", transformFunctions.transform),\n    transformOrigin: true,\n    translateX: t.spaceT(\"--chakra-translate-x\"),\n    translateY: t.spaceT(\"--chakra-translate-y\"),\n    skewX: t.degreeT(\"--chakra-skew-x\"),\n    skewY: t.degreeT(\"--chakra-skew-y\"),\n    scaleX: t.prop(\"--chakra-scale-x\"),\n    scaleY: t.prop(\"--chakra-scale-y\"),\n    scale: t.prop([\n        \"--chakra-scale-x\",\n        \"--chakra-scale-y\"\n    ]),\n    rotate: t.degreeT(\"--chakra-rotate\")\n};\n// src/config/transition.ts\nvar transition = {\n    transition: true,\n    transitionDelay: true,\n    animation: true,\n    willChange: true,\n    transitionDuration: t.prop(\"transitionDuration\", \"transition.duration\"),\n    transitionProperty: t.prop(\"transitionProperty\", \"transition.property\"),\n    transitionTimingFunction: t.prop(\"transitionTimingFunction\", \"transition.easing\")\n};\n// src/config/typography.ts\nvar typography = {\n    fontFamily: t.prop(\"fontFamily\", \"fonts\"),\n    fontSize: t.prop(\"fontSize\", \"fontSizes\", transformFunctions.px),\n    fontWeight: t.prop(\"fontWeight\", \"fontWeights\"),\n    lineHeight: t.prop(\"lineHeight\", \"lineHeights\"),\n    letterSpacing: t.prop(\"letterSpacing\", \"letterSpacings\"),\n    textAlign: true,\n    fontStyle: true,\n    textIndent: true,\n    wordBreak: true,\n    overflowWrap: true,\n    textOverflow: true,\n    textTransform: true,\n    whiteSpace: true,\n    isTruncated: {\n        transform (value) {\n            if (value === true) {\n                return {\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                    whiteSpace: \"nowrap\"\n                };\n            }\n        }\n    },\n    noOfLines: {\n        static: {\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            display: \"-webkit-box\",\n            WebkitBoxOrient: \"vertical\",\n            //@ts-ignore\n            WebkitLineClamp: \"var(--chakra-line-clamp)\"\n        },\n        property: \"--chakra-line-clamp\"\n    }\n};\n// src/config/scroll.ts\nvar scroll = {\n    scrollBehavior: true,\n    scrollSnapAlign: true,\n    scrollSnapStop: true,\n    scrollSnapType: true,\n    // scroll margin\n    scrollMargin: t.spaceT(\"scrollMargin\"),\n    scrollMarginTop: t.spaceT(\"scrollMarginTop\"),\n    scrollMarginBottom: t.spaceT(\"scrollMarginBottom\"),\n    scrollMarginLeft: t.spaceT(\"scrollMarginLeft\"),\n    scrollMarginRight: t.spaceT(\"scrollMarginRight\"),\n    scrollMarginX: t.spaceT([\n        \"scrollMarginLeft\",\n        \"scrollMarginRight\"\n    ]),\n    scrollMarginY: t.spaceT([\n        \"scrollMarginTop\",\n        \"scrollMarginBottom\"\n    ]),\n    // scroll padding\n    scrollPadding: t.spaceT(\"scrollPadding\"),\n    scrollPaddingTop: t.spaceT(\"scrollPaddingTop\"),\n    scrollPaddingBottom: t.spaceT(\"scrollPaddingBottom\"),\n    scrollPaddingLeft: t.spaceT(\"scrollPaddingLeft\"),\n    scrollPaddingRight: t.spaceT(\"scrollPaddingRight\"),\n    scrollPaddingX: t.spaceT([\n        \"scrollPaddingLeft\",\n        \"scrollPaddingRight\"\n    ]),\n    scrollPaddingY: t.spaceT([\n        \"scrollPaddingTop\",\n        \"scrollPaddingBottom\"\n    ])\n};\n// src/create-theme-vars/calc.ts\n\nfunction resolveReference(operand) {\n    if ((0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(operand) && operand.reference) {\n        return operand.reference;\n    }\n    return String(operand);\n}\nvar toExpression = function(operator) {\n    for(var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        operands[_key - 1] = arguments[_key];\n    }\n    return operands.map(resolveReference).join(\" \".concat(operator, \" \")).replace(/calc/g, \"\");\n};\nvar add = function() {\n    for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){\n        operands[_key] = arguments[_key];\n    }\n    return \"calc(\".concat(toExpression(\"+\", ...operands), \")\");\n};\nvar subtract = function() {\n    for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){\n        operands[_key] = arguments[_key];\n    }\n    return \"calc(\".concat(toExpression(\"-\", ...operands), \")\");\n};\nvar multiply = function() {\n    for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){\n        operands[_key] = arguments[_key];\n    }\n    return \"calc(\".concat(toExpression(\"*\", ...operands), \")\");\n};\nvar divide = function() {\n    for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){\n        operands[_key] = arguments[_key];\n    }\n    return \"calc(\".concat(toExpression(\"/\", ...operands), \")\");\n};\nvar negate = (x)=>{\n    const value = resolveReference(x);\n    if (value != null && !Number.isNaN(parseFloat(value))) {\n        return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\".concat(value);\n    }\n    return multiply(value, -1);\n};\nvar calc = Object.assign((x)=>({\n        add: function() {\n            for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){\n                operands[_key] = arguments[_key];\n            }\n            return calc(add(x, ...operands));\n        },\n        subtract: function() {\n            for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){\n                operands[_key] = arguments[_key];\n            }\n            return calc(subtract(x, ...operands));\n        },\n        multiply: function() {\n            for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){\n                operands[_key] = arguments[_key];\n            }\n            return calc(multiply(x, ...operands));\n        },\n        divide: function() {\n            for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){\n                operands[_key] = arguments[_key];\n            }\n            return calc(divide(x, ...operands));\n        },\n        negate: ()=>calc(negate(x)),\n        toString: ()=>x.toString()\n    }), {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate\n});\n// src/create-theme-vars/css-var.ts\nfunction replaceWhiteSpace(value) {\n    let replaceValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    return value.replace(/\\s+/g, replaceValue);\n}\nfunction escape(value) {\n    const valueStr = replaceWhiteSpace(value.toString());\n    return escapeSymbol(escapeDot(valueStr));\n}\nfunction escapeDot(value) {\n    if (value.includes(\"\\\\.\")) return value;\n    const isDecimal = !Number.isInteger(parseFloat(value.toString()));\n    return isDecimal ? value.replace(\".\", \"\\\\.\") : value;\n}\nfunction escapeSymbol(value) {\n    return value.replace(/[!-,/:-@[-^`{-~]/g, \"\\\\$&\");\n}\nfunction addPrefix(value) {\n    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    return [\n        prefix,\n        value\n    ].filter(Boolean).join(\"-\");\n}\nfunction toVarReference(name, fallback) {\n    return \"var(\".concat(name).concat(fallback ? \", \".concat(fallback) : \"\", \")\");\n}\nfunction toVarDefinition(value) {\n    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    return escape(\"--\".concat(addPrefix(value, prefix)));\n}\nfunction cssVar(name, fallback, cssVarPrefix) {\n    const cssVariable = toVarDefinition(name, cssVarPrefix);\n    return {\n        variable: cssVariable,\n        reference: toVarReference(cssVariable, fallback)\n    };\n}\nfunction defineCssVars(scope, keys2) {\n    const vars = {};\n    for (const key of keys2){\n        if (Array.isArray(key)) {\n            const [name, fallback] = key;\n            vars[name] = cssVar(\"\".concat(scope, \"-\").concat(name), fallback);\n            continue;\n        }\n        vars[key] = cssVar(\"\".concat(scope, \"-\").concat(key));\n    }\n    return vars;\n}\n// ../../utilities/breakpoint-utils/src/breakpoint.ts\n\nfunction getLastItem(array) {\n    const length = array == null ? 0 : array.length;\n    return length ? array[length - 1] : void 0;\n}\nfunction analyzeCSSValue2(value) {\n    const num = parseFloat(value.toString());\n    const unit = value.toString().replace(String(num), \"\");\n    return {\n        unitless: !unit,\n        value: num,\n        unit\n    };\n}\nfunction px(value) {\n    if (value == null) return value;\n    const { unitless } = analyzeCSSValue2(value);\n    return unitless || typeof value === \"number\" ? \"\".concat(value, \"px\") : value;\n}\nvar sortByBreakpointValue = (a, b)=>parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\nvar sortBps = (breakpoints)=>Object.fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\nfunction normalize(breakpoints) {\n    const sorted = sortBps(breakpoints);\n    return Object.assign(Object.values(sorted), sorted);\n}\nfunction keys(breakpoints) {\n    const value = Object.keys(sortBps(breakpoints));\n    return new Set(value);\n}\nfunction subtract2(value) {\n    var _a;\n    if (!value) return value;\n    value = (_a = px(value)) != null ? _a : value;\n    const OFFSET = -0.02;\n    return typeof value === \"number\" ? \"\".concat(value + OFFSET) : value.replace(/(\\d+\\.?\\d*)/u, (m)=>\"\".concat(parseFloat(m) + OFFSET));\n}\nfunction toMediaQueryString(min, max) {\n    const query = [\n        \"@media screen\"\n    ];\n    if (min) query.push(\"and\", \"(min-width: \".concat(px(min), \")\"));\n    if (max) query.push(\"and\", \"(max-width: \".concat(px(max), \")\"));\n    return query.join(\" \");\n}\nfunction analyzeBreakpoints(breakpoints) {\n    var _a;\n    if (!breakpoints) return null;\n    breakpoints.base = (_a = breakpoints.base) != null ? _a : \"0px\";\n    const normalized = normalize(breakpoints);\n    const queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map((param, index, entry)=>{\n        let [breakpoint, minW] = param;\n        var _a2;\n        let [, maxW] = (_a2 = entry[index + 1]) != null ? _a2 : [];\n        maxW = parseFloat(maxW) > 0 ? subtract2(maxW) : void 0;\n        return {\n            _minW: subtract2(minW),\n            breakpoint,\n            minW,\n            maxW,\n            maxWQuery: toMediaQueryString(null, maxW),\n            minWQuery: toMediaQueryString(minW),\n            minMaxQuery: toMediaQueryString(minW, maxW)\n        };\n    });\n    const _keys = keys(breakpoints);\n    const _keysArr = Array.from(_keys.values());\n    return {\n        keys: _keys,\n        normalized,\n        isResponsive (test) {\n            const keys2 = Object.keys(test);\n            return keys2.length > 0 && keys2.every((key)=>_keys.has(key));\n        },\n        asObject: sortBps(breakpoints),\n        asArray: normalize(breakpoints),\n        details: queries,\n        get (key) {\n            return queries.find((q)=>q.breakpoint === key);\n        },\n        media: [\n            null,\n            ...normalized.map((minW)=>toMediaQueryString(minW)).slice(1)\n        ],\n        /**\n     * Converts the object responsive syntax to array syntax\n     *\n     * @example\n     * toArrayValue({ base: 1, sm: 2, md: 3 }) // => [1, 2, 3]\n     */ toArrayValue (test) {\n            if (!(0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(test)) {\n                throw new Error(\"toArrayValue: value must be an object\");\n            }\n            const result = _keysArr.map((bp)=>{\n                var _a2;\n                return (_a2 = test[bp]) != null ? _a2 : null;\n            });\n            while(getLastItem(result) === null){\n                result.pop();\n            }\n            return result;\n        },\n        /**\n     * Converts the array responsive syntax to object syntax\n     *\n     * @example\n     * toObjectValue([1, 2, 3]) // => { base: 1, sm: 2, md: 3 }\n     */ toObjectValue (test) {\n            if (!Array.isArray(test)) {\n                throw new Error(\"toObjectValue: value must be an array\");\n            }\n            return test.reduce((acc, value, index)=>{\n                const key = _keysArr[index];\n                if (key != null && value != null) acc[key] = value;\n                return acc;\n            }, {});\n        }\n    };\n}\n// src/create-theme-vars/create-theme-vars.ts\n\n// src/pseudos.ts\nvar state = {\n    hover: (str, post)=>\"\".concat(str, \":hover \").concat(post, \", \").concat(str, \"[data-hover] \").concat(post),\n    focus: (str, post)=>\"\".concat(str, \":focus \").concat(post, \", \").concat(str, \"[data-focus] \").concat(post),\n    focusVisible: (str, post)=>\"\".concat(str, \":focus-visible \").concat(post),\n    focusWithin: (str, post)=>\"\".concat(str, \":focus-within \").concat(post),\n    active: (str, post)=>\"\".concat(str, \":active \").concat(post, \", \").concat(str, \"[data-active] \").concat(post),\n    disabled: (str, post)=>\"\".concat(str, \":disabled \").concat(post, \", \").concat(str, \"[data-disabled] \").concat(post),\n    invalid: (str, post)=>\"\".concat(str, \":invalid \").concat(post, \", \").concat(str, \"[data-invalid] \").concat(post),\n    checked: (str, post)=>\"\".concat(str, \":checked \").concat(post, \", \").concat(str, \"[data-checked] \").concat(post),\n    indeterminate: (str, post)=>\"\".concat(str, \":indeterminate \").concat(post, \", \").concat(str, \"[aria-checked=mixed] \").concat(post, \", \").concat(str, \"[data-indeterminate] \").concat(post),\n    readOnly: (str, post)=>\"\".concat(str, \":read-only \").concat(post, \", \").concat(str, \"[readonly] \").concat(post, \", \").concat(str, \"[data-read-only] \").concat(post),\n    expanded: (str, post)=>\"\".concat(str, \":read-only \").concat(post, \", \").concat(str, \"[aria-expanded=true] \").concat(post, \", \").concat(str, \"[data-expanded] \").concat(post),\n    placeholderShown: (str, post)=>\"\".concat(str, \":placeholder-shown \").concat(post)\n};\nvar toGroup = (fn)=>merge((v)=>fn(v, \"&\"), \"[role=group]\", \"[data-group]\", \".group\");\nvar toPeer = (fn)=>merge((v)=>fn(v, \"~ &\"), \"[data-peer]\", \".peer\");\nvar merge = function(fn) {\n    for(var _len = arguments.length, selectors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        selectors[_key - 1] = arguments[_key];\n    }\n    return selectors.map(fn).join(\", \");\n};\nvar pseudoSelectors = {\n    /**\n   * Styles for CSS selector `&:hover`\n   */ _hover: \"&:hover, &[data-hover]\",\n    /**\n   * Styles for CSS Selector `&:active`\n   */ _active: \"&:active, &[data-active]\",\n    /**\n   * Styles for CSS selector `&:focus`\n   *\n   */ _focus: \"&:focus, &[data-focus]\",\n    /**\n   * Styles for the highlighted state.\n   */ _highlighted: \"&[data-highlighted]\",\n    /**\n   * Styles to apply when a child of this element has received focus\n   * - CSS Selector `&:focus-within`\n   */ _focusWithin: \"&:focus-within\",\n    /**\n   * Styles to apply when this element has received focus via tabbing\n   * - CSS Selector `&:focus-visible`\n   */ _focusVisible: \"&:focus-visible, &[data-focus-visible]\",\n    /**\n   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:\n   * - `&[aria-disabled=true]`\n   * - `&:disabled`\n   * - `&[data-disabled]`\n   * - `&[disabled]`\n   */ _disabled: \"&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]\",\n    /**\n   * Styles for CSS Selector `&:readonly`\n   */ _readOnly: \"&[aria-readonly=true], &[readonly], &[data-readonly]\",\n    /**\n   * Styles for CSS selector `&::before`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <Box _before={{content:`\"\"` }}/>\n   * ```\n   */ _before: \"&::before\",\n    /**\n   * Styles for CSS selector `&::after`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <Box _after={{content:`\"\"` }}/>\n   * ```\n   */ _after: \"&::after\",\n    /**\n   * Styles for CSS selector `&:empty`\n   */ _empty: \"&:empty\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-expanded` is `true`\n   * - CSS selector `&[aria-expanded=true]`\n   */ _expanded: \"&[aria-expanded=true], &[data-expanded]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `true`\n   * - CSS selector `&[aria-checked=true]`\n   */ _checked: \"&[aria-checked=true], &[data-checked]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`\n   * - CSS selector `&[aria-grabbed=true]`\n   */ _grabbed: \"&[aria-grabbed=true], &[data-grabbed]\",\n    /**\n   * Styles for CSS Selector `&[aria-pressed=true]`\n   * Typically used to style the current \"pressed\" state of toggle buttons\n   */ _pressed: \"&[aria-pressed=true], &[data-pressed]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-invalid` is `true`\n   * - CSS selector `&[aria-invalid=true]`\n   */ _invalid: \"&[aria-invalid=true], &[data-invalid]\",\n    /**\n   * Styles for the valid state\n   * - CSS selector `&[data-valid], &[data-state=valid]`\n   */ _valid: \"&[data-valid], &[data-state=valid]\",\n    /**\n   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.\n   * Useful for styling loading states\n   */ _loading: \"&[data-loading], &[aria-busy=true]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-selected` is `true`\n   *\n   * - CSS selector `&[aria-selected=true]`\n   */ _selected: \"&[aria-selected=true], &[data-selected]\",\n    /**\n   * Styles for CSS Selector `[hidden=true]`\n   */ _hidden: \"&[hidden], &[data-hidden]\",\n    /**\n   * Styles for CSS Selector `&:-webkit-autofill`\n   */ _autofill: \"&:-webkit-autofill\",\n    /**\n   * Styles for CSS Selector `&:nth-child(even)`\n   */ _even: \"&:nth-of-type(even)\",\n    /**\n   * Styles for CSS Selector `&:nth-child(odd)`\n   */ _odd: \"&:nth-of-type(odd)\",\n    /**\n   * Styles for CSS Selector `&:first-of-type`\n   */ _first: \"&:first-of-type\",\n    /**\n   * Styles for CSS selector `&::first-letter`\n   *\n   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.\n   * @example\n   * ```jsx\n   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>\n   * ```\n   */ _firstLetter: \"&::first-letter\",\n    /**\n   * Styles for CSS Selector `&:last-of-type`\n   */ _last: \"&:last-of-type\",\n    /**\n   * Styles for CSS Selector `&:not(:first-of-type)`\n   */ _notFirst: \"&:not(:first-of-type)\",\n    /**\n   * Styles for CSS Selector `&:not(:last-of-type)`\n   */ _notLast: \"&:not(:last-of-type)\",\n    /**\n   * Styles for CSS Selector `&:visited`\n   */ _visited: \"&:visited\",\n    /**\n   * Used to style the active link in a navigation\n   * Styles for CSS Selector `&[aria-current=page]`\n   */ _activeLink: \"&[aria-current=page]\",\n    /**\n   * Used to style the current step within a process\n   * Styles for CSS Selector `&[aria-current=step]`\n   */ _activeStep: \"&[aria-current=step]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`\n   * - CSS selector `&[aria-checked=mixed]`\n   */ _indeterminate: \"&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]\",\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered\n   */ _groupHover: toGroup(state.hover),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered\n   */ _peerHover: toPeer(state.hover),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused\n   */ _groupFocus: toGroup(state.focus),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused\n   */ _peerFocus: toPeer(state.focus),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus\n   */ _groupFocusVisible: toGroup(state.focusVisible),\n    /**\n   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus\n   */ _peerFocusVisible: toPeer(state.focusVisible),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active\n   */ _groupActive: toGroup(state.active),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is active\n   */ _peerActive: toPeer(state.active),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled\n   */ _groupDisabled: toGroup(state.disabled),\n    /**\n   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled\n   */ _peerDisabled: toPeer(state.disabled),\n    /**\n   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid\n   */ _groupInvalid: toGroup(state.invalid),\n    /**\n   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid\n   */ _peerInvalid: toPeer(state.invalid),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked\n   */ _groupChecked: toGroup(state.checked),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked\n   */ _peerChecked: toPeer(state.checked),\n    /**\n   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within\n   */ _groupFocusWithin: toGroup(state.focusWithin),\n    /**\n   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within\n   */ _peerFocusWithin: toPeer(state.focusWithin),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown\n   */ _peerPlaceholderShown: toPeer(state.placeholderShown),\n    /**\n   * Styles for CSS Selector `&::placeholder`.\n   */ _placeholder: \"&::placeholder\",\n    /**\n   * Styles for CSS Selector `&:placeholder-shown`.\n   */ _placeholderShown: \"&:placeholder-shown\",\n    /**\n   * Styles for CSS Selector `&:fullscreen`.\n   */ _fullScreen: \"&:fullscreen\",\n    /**\n   * Styles for CSS Selector `&::selection`\n   */ _selection: \"&::selection\",\n    /**\n   * Styles for CSS Selector `[dir=rtl] &`\n   * It is applied when a parent element or this element has `dir=\"rtl\"`\n   */ _rtl: \"[dir=rtl] &, &[dir=rtl]\",\n    /**\n   * Styles for CSS Selector `[dir=ltr] &`\n   * It is applied when a parent element or this element has `dir=\"ltr\"`\n   */ _ltr: \"[dir=ltr] &, &[dir=ltr]\",\n    /**\n   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`\n   * It is used when the user has requested the system use a light or dark color theme.\n   */ _mediaDark: \"@media (prefers-color-scheme: dark)\",\n    /**\n   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`\n   * It is used when the user has requested the system to reduce the amount of animations.\n   */ _mediaReduceMotion: \"@media (prefers-reduced-motion: reduce)\",\n    /**\n   * Styles for when `data-theme` is applied to any parent of\n   * this component or element.\n   */ _dark: \".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]\",\n    /**\n   * Styles for when `data-theme` is applied to any parent of\n   * this component or element.\n   */ _light: \".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]\",\n    /**\n   * Styles for the CSS Selector `&[data-orientation=horizontal]`\n   */ _horizontal: \"&[data-orientation=horizontal]\",\n    /**\n   * Styles for the CSS Selector `&[data-orientation=vertical]`\n   */ _vertical: \"&[data-orientation=vertical]\"\n};\nvar pseudoPropNames = Object.keys(pseudoSelectors);\n// src/create-theme-vars/create-theme-vars.ts\n\nfunction tokenToCssVar(token, prefix) {\n    return cssVar(String(token).replace(/\\./g, \"-\"), void 0, prefix);\n}\nfunction createThemeVars(flatTokens, options) {\n    let cssVars = {};\n    const cssMap = {};\n    for (const [token, tokenValue] of Object.entries(flatTokens)){\n        const { isSemantic, value } = tokenValue;\n        const { variable, reference } = tokenToCssVar(token, options == null ? void 0 : options.cssVarPrefix);\n        if (!isSemantic) {\n            if (token.startsWith(\"space\")) {\n                const keys2 = token.split(\".\");\n                const [firstKey, ...referenceKeys] = keys2;\n                const negativeLookupKey = \"\".concat(firstKey, \".-\").concat(referenceKeys.join(\".\"));\n                const negativeValue = calc.negate(value);\n                const negatedReference = calc.negate(reference);\n                cssMap[negativeLookupKey] = {\n                    value: negativeValue,\n                    var: variable,\n                    varRef: negatedReference\n                };\n            }\n            cssVars[variable] = value;\n            cssMap[token] = {\n                value,\n                var: variable,\n                varRef: reference\n            };\n            continue;\n        }\n        const lookupToken = (maybeToken)=>{\n            const scale = String(token).split(\".\")[0];\n            const withScale = [\n                scale,\n                maybeToken\n            ].join(\".\");\n            const resolvedTokenValue = flatTokens[withScale];\n            if (!resolvedTokenValue) return maybeToken;\n            const { reference: reference2 } = tokenToCssVar(withScale, options == null ? void 0 : options.cssVarPrefix);\n            return reference2;\n        };\n        const normalizedValue = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) ? value : {\n            default: value\n        };\n        cssVars = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__(cssVars, Object.entries(normalizedValue).reduce((acc, param)=>{\n            let [conditionAlias, conditionValue] = param;\n            var _a, _b;\n            if (!conditionValue) return acc;\n            const tokenReference = lookupToken(\"\".concat(conditionValue));\n            if (conditionAlias === \"default\") {\n                acc[variable] = tokenReference;\n                return acc;\n            }\n            const conditionSelector = (_b = (_a = pseudoSelectors) == null ? void 0 : _a[conditionAlias]) != null ? _b : conditionAlias;\n            acc[conditionSelector] = {\n                [variable]: tokenReference\n            };\n            return acc;\n        }, {}));\n        cssMap[token] = {\n            value: reference,\n            var: variable,\n            varRef: reference\n        };\n    }\n    return {\n        cssVars,\n        cssMap\n    };\n}\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object) {\n    let keysToOmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const clone = Object.assign({}, object);\n    for (const key of keysToOmit){\n        if (key in clone) {\n            delete clone[key];\n        }\n    }\n    return clone;\n}\n// ../../utilities/object-utils/src/pick.ts\nfunction pick(object, keysToPick) {\n    const result = {};\n    for (const key of keysToPick){\n        if (key in object) {\n            result[key] = object[key];\n        }\n    }\n    return result;\n}\n// ../../utilities/object-utils/src/walk-object.ts\nfunction isObject5(value) {\n    return typeof value === \"object\" && value != null && !Array.isArray(value);\n}\nfunction walkObject(target, predicate) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const { stop, getKey } = options;\n    function inner(value) {\n        let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n        var _a;\n        if (isObject5(value) || Array.isArray(value)) {\n            const result = {};\n            for (const [prop, child] of Object.entries(value)){\n                const key = (_a = getKey == null ? void 0 : getKey(prop)) != null ? _a : prop;\n                const childPath = [\n                    ...path,\n                    key\n                ];\n                if (stop == null ? void 0 : stop(value, childPath)) {\n                    return predicate(value, path);\n                }\n                result[key] = inner(child, childPath);\n            }\n            return result;\n        }\n        return predicate(value, path);\n    }\n    return inner(target);\n}\n// src/create-theme-vars/theme-tokens.ts\nvar tokens = [\n    \"colors\",\n    \"borders\",\n    \"borderWidths\",\n    \"borderStyles\",\n    \"fonts\",\n    \"fontSizes\",\n    \"fontWeights\",\n    \"gradients\",\n    \"letterSpacings\",\n    \"lineHeights\",\n    \"radii\",\n    \"space\",\n    \"shadows\",\n    \"sizes\",\n    \"zIndices\",\n    \"transition\",\n    \"blur\",\n    \"breakpoints\"\n];\nfunction extractTokens(theme) {\n    const _tokens = tokens;\n    return pick(theme, _tokens);\n}\nfunction extractSemanticTokens(theme) {\n    return theme.semanticTokens;\n}\nfunction omitVars(rawTheme) {\n    const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme;\n    return cleanTheme;\n}\n// src/create-theme-vars/flatten-tokens.ts\nvar isSemanticCondition = (key)=>pseudoPropNames.includes(key) || \"default\" === key;\nfunction flattenTokens(param) {\n    let { tokens: tokens2, semanticTokens } = param;\n    const result = {};\n    walkObject(tokens2, (value, path)=>{\n        if (value == null) return;\n        result[path.join(\".\")] = {\n            isSemantic: false,\n            value\n        };\n    });\n    walkObject(semanticTokens, (value, path)=>{\n        if (value == null) return;\n        result[path.join(\".\")] = {\n            isSemantic: true,\n            value\n        };\n    }, {\n        stop: (value)=>Object.keys(value).every(isSemanticCondition)\n    });\n    return result;\n}\n// src/create-theme-vars/to-css-var.ts\nfunction toCSSVar(rawTheme) {\n    var _a;\n    const theme = omitVars(rawTheme);\n    const tokens2 = extractTokens(theme);\n    const semanticTokens = extractSemanticTokens(theme);\n    const flatTokens = flattenTokens({\n        tokens: tokens2,\n        semanticTokens\n    });\n    const cssVarPrefix = (_a = theme.config) == null ? void 0 : _a.cssVarPrefix;\n    const { /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */ cssMap, /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */ cssVars } = createThemeVars(flatTokens, {\n        cssVarPrefix\n    });\n    const defaultCssVars = {\n        \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n        \"--chakra-ring-offset-width\": \"0px\",\n        \"--chakra-ring-offset-color\": \"#fff\",\n        \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n        \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n        \"--chakra-ring-shadow\": \"0 0 #0000\",\n        \"--chakra-space-x-reverse\": \"0\",\n        \"--chakra-space-y-reverse\": \"0\"\n    };\n    Object.assign(theme, {\n        __cssVars: {\n            ...defaultCssVars,\n            ...cssVars\n        },\n        __cssMap: cssMap,\n        __breakpoints: analyzeBreakpoints(theme.breakpoints)\n    });\n    return theme;\n}\n// src/css.ts\n\n\n// src/system.ts\n\nvar systemProps = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, background, border, color, flexbox, layout, filter, ring, interactivity, grid, others, position, effect, space, scroll, typography, textDecoration, transform, list, transition);\nvar layoutSystem = Object.assign({}, space, layout, flexbox, grid, position);\nvar layoutPropNames = Object.keys(layoutSystem);\nvar propNames = [\n    ...Object.keys(systemProps),\n    ...pseudoPropNames\n];\nvar styleProps = {\n    ...systemProps,\n    ...pseudoSelectors\n};\nvar isStyleProp = (prop)=>prop in styleProps;\n// src/utils/expand-responsive.ts\n\nvar expandResponsive = (styles)=>(theme)=>{\n        if (!theme.__breakpoints) return styles;\n        const { isResponsive, toArrayValue, media: medias } = theme.__breakpoints;\n        const computedStyles = {};\n        for(const key in styles){\n            let value = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(styles[key], theme);\n            if (value == null) continue;\n            value = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && isResponsive(value) ? toArrayValue(value) : value;\n            if (!Array.isArray(value)) {\n                computedStyles[key] = value;\n                continue;\n            }\n            const queries = value.slice(0, medias.length).length;\n            for(let index = 0; index < queries; index += 1){\n                const media = medias == null ? void 0 : medias[index];\n                if (!media) {\n                    computedStyles[key] = value[index];\n                    continue;\n                }\n                computedStyles[media] = computedStyles[media] || {};\n                if (value[index] == null) {\n                    continue;\n                }\n                computedStyles[media][key] = value[index];\n            }\n        }\n        return computedStyles;\n    };\n// src/utils/split-by-comma.ts\nfunction splitByComma(value) {\n    const chunks = [];\n    let chunk = \"\";\n    let inParens = false;\n    for(let i = 0; i < value.length; i++){\n        const char = value[i];\n        if (char === \"(\") {\n            inParens = true;\n            chunk += char;\n        } else if (char === \")\") {\n            inParens = false;\n            chunk += char;\n        } else if (char === \",\" && !inParens) {\n            chunks.push(chunk);\n            chunk = \"\";\n        } else {\n            chunk += char;\n        }\n    }\n    chunk = chunk.trim();\n    if (chunk) {\n        chunks.push(chunk);\n    }\n    return chunks;\n}\n// src/css.ts\nfunction isCssVar2(value) {\n    return /^var\\(--.+\\)$/.test(value);\n}\nvar isCSSVariableTokenValue = (key, value)=>key.startsWith(\"--\") && typeof value === \"string\" && !isCssVar2(value);\nvar resolveTokenValue = (theme, value)=>{\n    var _a, _b;\n    if (value == null) return value;\n    const getVar = (val)=>{\n        var _a2, _b2;\n        return (_b2 = (_a2 = theme.__cssMap) == null ? void 0 : _a2[val]) == null ? void 0 : _b2.varRef;\n    };\n    const getValue = (val)=>{\n        var _a2;\n        return (_a2 = getVar(val)) != null ? _a2 : val;\n    };\n    const [tokenValue, fallbackValue] = splitByComma(value);\n    value = (_b = (_a = getVar(tokenValue)) != null ? _a : getValue(fallbackValue)) != null ? _b : getValue(value);\n    return value;\n};\nfunction getCss(options) {\n    const { configs = {}, pseudos = {}, theme } = options;\n    const css2 = function(stylesOrFn) {\n        let nested = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        var _a, _b, _c;\n        const _styles = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(stylesOrFn, theme);\n        const styles = expandResponsive(_styles)(theme);\n        let computedStyles = {};\n        for(let key in styles){\n            const valueOrFn = styles[key];\n            let value = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(valueOrFn, theme);\n            if (key in pseudos) {\n                key = pseudos[key];\n            }\n            if (isCSSVariableTokenValue(key, value)) {\n                value = resolveTokenValue(theme, value);\n            }\n            let config = configs[key];\n            if (config === true) {\n                config = {\n                    property: key\n                };\n            }\n            if ((0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {\n                computedStyles[key] = (_a = computedStyles[key]) != null ? _a : {};\n                computedStyles[key] = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, computedStyles[key], css2(value, true));\n                continue;\n            }\n            let rawValue = (_c = (_b = config == null ? void 0 : config.transform) == null ? void 0 : _b.call(config, value, theme, _styles)) != null ? _c : value;\n            rawValue = (config == null ? void 0 : config.processResult) ? css2(rawValue, true) : rawValue;\n            const configProperty = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(config == null ? void 0 : config.property, theme);\n            if (!nested && (config == null ? void 0 : config.static)) {\n                const staticStyles = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(config.static, theme);\n                computedStyles = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, computedStyles, staticStyles);\n            }\n            if (configProperty && Array.isArray(configProperty)) {\n                for (const property of configProperty){\n                    computedStyles[property] = rawValue;\n                }\n                continue;\n            }\n            if (configProperty) {\n                if (configProperty === \"&\" && (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(rawValue)) {\n                    computedStyles = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, computedStyles, rawValue);\n                } else {\n                    computedStyles[configProperty] = rawValue;\n                }\n                continue;\n            }\n            if ((0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(rawValue)) {\n                computedStyles = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, computedStyles, rawValue);\n                continue;\n            }\n            computedStyles[key] = rawValue;\n        }\n        return computedStyles;\n    };\n    return css2;\n}\nvar css = (styles)=>(theme)=>{\n        const cssFn = getCss({\n            theme,\n            pseudos: pseudoSelectors,\n            configs: systemProps\n        });\n        return cssFn(styles);\n    };\n// src/define-styles.ts\nfunction defineStyle(styles) {\n    return styles;\n}\nfunction defineStyleConfig(config) {\n    return config;\n}\nfunction createMultiStyleConfigHelpers(parts) {\n    return {\n        definePartsStyle (config) {\n            return config;\n        },\n        defineMultiStyleConfig (config) {\n            return {\n                parts,\n                ...config\n            };\n        }\n    };\n}\n// src/style-config.ts\n\n\nfunction normalize2(value, toArray) {\n    if (Array.isArray(value)) return value;\n    if ((0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) return toArray(value);\n    if (value != null) return [\n        value\n    ];\n}\nfunction getNextIndex(values, i) {\n    for(let j = i + 1; j < values.length; j++){\n        if (values[j] != null) return j;\n    }\n    return -1;\n}\nfunction createResolver(theme) {\n    const breakpointUtil = theme.__breakpoints;\n    return function resolver(config, prop, value, props) {\n        var _a, _b;\n        if (!breakpointUtil) return;\n        const result = {};\n        const normalized = normalize2(value, breakpointUtil.toArrayValue);\n        if (!normalized) return result;\n        const len = normalized.length;\n        const isSingle = len === 1;\n        const isMultipart = !!config.parts;\n        for(let i = 0; i < len; i++){\n            const key = breakpointUtil.details[i];\n            const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];\n            const query = toMediaQueryString(key.minW, nextKey == null ? void 0 : nextKey._minW);\n            const styles = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)((_a = config[prop]) == null ? void 0 : _a[normalized[i]], props);\n            if (!styles) continue;\n            if (isMultipart) {\n                (_b = config.parts) == null ? void 0 : _b.forEach((part)=>{\n                    lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__(result, {\n                        [part]: isSingle ? styles[part] : {\n                            [query]: styles[part]\n                        }\n                    });\n                });\n                continue;\n            }\n            if (!isMultipart) {\n                if (isSingle) lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__(result, styles);\n                else result[query] = styles;\n                continue;\n            }\n            result[query] = styles;\n        }\n        return result;\n    };\n}\nfunction resolveStyleConfig(config) {\n    return (props)=>{\n        var _a;\n        const { variant, size, theme } = props;\n        const recipe = createResolver(theme);\n        return lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)((_a = config.baseStyle) != null ? _a : {}, props), recipe(config, \"sizes\", size, props), recipe(config, \"variants\", variant, props));\n    };\n}\n// src/get-css-var.ts\nfunction getCSSVar(theme, scale, value) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = theme.__cssMap) == null ? void 0 : _a[\"\".concat(scale, \".\").concat(value)]) == null ? void 0 : _b.varRef) != null ? _c : value;\n}\n// src/theming-props.ts\nfunction omitThemingProps(props) {\n    return omit(props, [\n        \"styleConfig\",\n        \"size\",\n        \"variant\",\n        \"colorScheme\"\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/styled-system/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-5PL47M24.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@chakra-ui/system/dist/chunk-5PL47M24.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   styled: function() { return /* binding */ styled; },\n/* harmony export */   toCSSObject: function() { return /* binding */ toCSSObject; }\n/* harmony export */ });\n/* harmony import */ var _chunk_FDQH4LQI_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunk-FDQH4LQI.mjs */ \"(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-FDQH4LQI.mjs\");\n/* harmony import */ var _chakra_ui_color_mode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @chakra-ui/color-mode */ \"(app-pages-browser)/./node_modules/@chakra-ui/color-mode/dist/chunk-UQDW7KKV.mjs\");\n/* harmony import */ var _chakra_ui_styled_system__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @chakra-ui/styled-system */ \"(app-pages-browser)/./node_modules/@chakra-ui/styled-system/dist/index.mjs\");\n/* harmony import */ var _chakra_ui_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chakra-ui/utils */ \"(app-pages-browser)/./node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs\");\n/* harmony import */ var _chakra_ui_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chakra-ui/utils */ \"(app-pages-browser)/./node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs\");\n/* harmony import */ var _chakra_ui_object_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @chakra-ui/object-utils */ \"(app-pages-browser)/./node_modules/@chakra-ui/object-utils/dist/chunk-OLTBUDV5.mjs\");\n/* harmony import */ var _emotion_styled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled */ \"(app-pages-browser)/./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ toCSSObject,styled auto */ \n// src/system.ts\n\n\n\n\n\n\nvar _a;\nvar emotion_styled = (_a = _emotion_styled__WEBPACK_IMPORTED_MODULE_0__[\"default\"][\"default\"]) != null ? _a : _emotion_styled__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\nvar toCSSObject = (param)=>{\n    let { baseStyle } = param;\n    return (props)=>{\n        const { theme, css: cssProp, __css, sx, ...rest } = props;\n        const styleProps = (0,_chakra_ui_utils__WEBPACK_IMPORTED_MODULE_2__.objectFilter)(rest, (_, prop)=>(0,_chakra_ui_styled_system__WEBPACK_IMPORTED_MODULE_3__.isStyleProp)(prop));\n        const finalBaseStyle = (0,_chakra_ui_utils__WEBPACK_IMPORTED_MODULE_4__.runIfFn)(baseStyle, props);\n        const finalStyles = (0,_chakra_ui_object_utils__WEBPACK_IMPORTED_MODULE_5__.assignAfter)({}, __css, finalBaseStyle, (0,_chakra_ui_utils__WEBPACK_IMPORTED_MODULE_2__.filterUndefined)(styleProps), sx);\n        const computedCSS = (0,_chakra_ui_styled_system__WEBPACK_IMPORTED_MODULE_3__.css)(finalStyles)(props.theme);\n        return cssProp ? [\n            computedCSS,\n            cssProp\n        ] : computedCSS;\n    };\n};\nfunction styled(component, options) {\n    var _s = $RefreshSig$();\n    const { baseStyle, ...styledOptions } = options != null ? options : {};\n    if (!styledOptions.shouldForwardProp) {\n        styledOptions.shouldForwardProp = _chunk_FDQH4LQI_mjs__WEBPACK_IMPORTED_MODULE_6__.shouldForwardProp;\n    }\n    const styleObject = toCSSObject({\n        baseStyle\n    });\n    const Component = emotion_styled(component, styledOptions)(styleObject);\n    const chakraComponent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s(function ChakraComponent(props, ref) {\n        _s();\n        const { colorMode, forced } = (0,_chakra_ui_color_mode__WEBPACK_IMPORTED_MODULE_7__.useColorMode)();\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Component, {\n            ref,\n            \"data-theme\": forced ? colorMode : void 0,\n            ...props\n        });\n    }, \"dyR73raS1H5GMuQbDxG+FMBopMQ=\", false, function() {\n        return [\n            _chakra_ui_color_mode__WEBPACK_IMPORTED_MODULE_7__.useColorMode\n        ];\n    }));\n    return chakraComponent;\n}\n //# sourceMappingURL=chunk-5PL47M24.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3N5c3RlbS9kaXN0L2NodW5rLTVQTDQ3TTI0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O3dFQUc4QjtBQUU5QixnQkFBZ0I7QUFDcUM7QUFJbkI7QUFDd0M7QUFDcEI7QUFDWDtBQUNqQjtBQUMxQixJQUFJVTtBQUNKLElBQUlDLGlCQUFpQixDQUFDRCxLQUFLRixrRUFBb0IsS0FBSyxPQUFPRSxLQUFLRix1REFBWUE7QUFDNUUsSUFBSUssY0FBYztRQUFDLEVBQUVDLFNBQVMsRUFBRTtXQUFLLENBQUNDO1FBQ3BDLE1BQU0sRUFBRUMsS0FBSyxFQUFFZCxLQUFLZSxPQUFPLEVBQUVDLEtBQUssRUFBRUMsRUFBRSxFQUFFLEdBQUdDLE1BQU0sR0FBR0w7UUFDcEQsTUFBTU0sYUFBYWhCLDhEQUFZQSxDQUFDZSxNQUFNLENBQUNFLEdBQUdDLE9BQVNwQixxRUFBV0EsQ0FBQ29CO1FBQy9ELE1BQU1DLGlCQUFpQmxCLHlEQUFPQSxDQUFDUSxXQUFXQztRQUMxQyxNQUFNVSxjQUFjbEIsb0VBQVdBLENBQzdCLENBQUMsR0FDRFcsT0FDQU0sZ0JBQ0FwQixpRUFBZUEsQ0FBQ2lCLGFBQ2hCRjtRQUVGLE1BQU1PLGNBQWN4Qiw2REFBR0EsQ0FBQ3VCLGFBQWFWLE1BQU1DLEtBQUs7UUFDaEQsT0FBT0MsVUFBVTtZQUFDUztZQUFhVDtTQUFRLEdBQUdTO0lBQzVDOztBQUNBLFNBQVNDLE9BQU9DLFNBQVMsRUFBRUMsT0FBTzs7SUFDaEMsTUFBTSxFQUFFZixTQUFTLEVBQUUsR0FBR2dCLGVBQWUsR0FBR0QsV0FBVyxPQUFPQSxVQUFVLENBQUM7SUFDckUsSUFBSSxDQUFDQyxjQUFjOUIsaUJBQWlCLEVBQUU7UUFDcEM4QixjQUFjOUIsaUJBQWlCLEdBQUdBLGtFQUFpQkE7SUFDckQ7SUFDQSxNQUFNK0IsY0FBY2xCLFlBQVk7UUFBRUM7SUFBVTtJQUM1QyxNQUFNa0IsWUFBWXJCLGVBQ2hCaUIsV0FDQUUsZUFDQUM7SUFDRixNQUFNRSxnQ0FBa0J4Qiw2Q0FBZ0IsSUFBQyxTQUFTMEIsZ0JBQWdCcEIsS0FBSyxFQUFFcUIsR0FBRzs7UUFDMUUsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLE1BQU0sRUFBRSxHQUFHckMsbUVBQVlBO1FBQzFDLHFCQUFPUSxnREFBbUIsQ0FBQ3VCLFdBQVc7WUFDcENJO1lBQ0EsY0FBY0UsU0FBU0QsWUFBWSxLQUFLO1lBQ3hDLEdBQUd0QixLQUFLO1FBQ1Y7SUFDRjs7WUFOZ0NkLCtEQUFZQTs7O0lBTzVDLE9BQU9nQztBQUNUO0FBS0UsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjaGFrcmEtdWkvc3lzdGVtL2Rpc3QvY2h1bmstNVBMNDdNMjQubWpzPzk5NWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5pbXBvcnQge1xuICBzaG91bGRGb3J3YXJkUHJvcFxufSBmcm9tIFwiLi9jaHVuay1GRFFINExRSS5tanNcIjtcblxuLy8gc3JjL3N5c3RlbS50c1xuaW1wb3J0IHsgdXNlQ29sb3JNb2RlIH0gZnJvbSBcIkBjaGFrcmEtdWkvY29sb3ItbW9kZVwiO1xuaW1wb3J0IHtcbiAgY3NzLFxuICBpc1N0eWxlUHJvcFxufSBmcm9tIFwiQGNoYWtyYS11aS9zdHlsZWQtc3lzdGVtXCI7XG5pbXBvcnQgeyBmaWx0ZXJVbmRlZmluZWQsIG9iamVjdEZpbHRlciwgcnVuSWZGbiB9IGZyb20gXCJAY2hha3JhLXVpL3V0aWxzXCI7XG5pbXBvcnQgeyBhc3NpZ25BZnRlciB9IGZyb20gXCJAY2hha3JhLXVpL29iamVjdC11dGlsc1wiO1xuaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG52YXIgX2E7XG52YXIgZW1vdGlvbl9zdHlsZWQgPSAoX2EgPSBjcmVhdGVTdHlsZWQuZGVmYXVsdCkgIT0gbnVsbCA/IF9hIDogY3JlYXRlU3R5bGVkO1xudmFyIHRvQ1NTT2JqZWN0ID0gKHsgYmFzZVN0eWxlIH0pID0+IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHRoZW1lLCBjc3M6IGNzc1Byb3AsIF9fY3NzLCBzeCwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gIGNvbnN0IHN0eWxlUHJvcHMgPSBvYmplY3RGaWx0ZXIocmVzdCwgKF8sIHByb3ApID0+IGlzU3R5bGVQcm9wKHByb3ApKTtcbiAgY29uc3QgZmluYWxCYXNlU3R5bGUgPSBydW5JZkZuKGJhc2VTdHlsZSwgcHJvcHMpO1xuICBjb25zdCBmaW5hbFN0eWxlcyA9IGFzc2lnbkFmdGVyKFxuICAgIHt9LFxuICAgIF9fY3NzLFxuICAgIGZpbmFsQmFzZVN0eWxlLFxuICAgIGZpbHRlclVuZGVmaW5lZChzdHlsZVByb3BzKSxcbiAgICBzeFxuICApO1xuICBjb25zdCBjb21wdXRlZENTUyA9IGNzcyhmaW5hbFN0eWxlcykocHJvcHMudGhlbWUpO1xuICByZXR1cm4gY3NzUHJvcCA/IFtjb21wdXRlZENTUywgY3NzUHJvcF0gOiBjb21wdXRlZENTUztcbn07XG5mdW5jdGlvbiBzdHlsZWQoY29tcG9uZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgYmFzZVN0eWxlLCAuLi5zdHlsZWRPcHRpb25zIH0gPSBvcHRpb25zICE9IG51bGwgPyBvcHRpb25zIDoge307XG4gIGlmICghc3R5bGVkT3B0aW9ucy5zaG91bGRGb3J3YXJkUHJvcCkge1xuICAgIHN0eWxlZE9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbiAgfVxuICBjb25zdCBzdHlsZU9iamVjdCA9IHRvQ1NTT2JqZWN0KHsgYmFzZVN0eWxlIH0pO1xuICBjb25zdCBDb21wb25lbnQgPSBlbW90aW9uX3N0eWxlZChcbiAgICBjb21wb25lbnQsXG4gICAgc3R5bGVkT3B0aW9uc1xuICApKHN0eWxlT2JqZWN0KTtcbiAgY29uc3QgY2hha3JhQ29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaGFrcmFDb21wb25lbnQocHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHsgY29sb3JNb2RlLCBmb3JjZWQgfSA9IHVzZUNvbG9yTW9kZSgpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgcmVmLFxuICAgICAgXCJkYXRhLXRoZW1lXCI6IGZvcmNlZCA/IGNvbG9yTW9kZSA6IHZvaWQgMCxcbiAgICAgIC4uLnByb3BzXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gY2hha3JhQ29tcG9uZW50O1xufVxuXG5leHBvcnQge1xuICB0b0NTU09iamVjdCxcbiAgc3R5bGVkXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstNVBMNDdNMjQubWpzLm1hcCJdLCJuYW1lcyI6WyJzaG91bGRGb3J3YXJkUHJvcCIsInVzZUNvbG9yTW9kZSIsImNzcyIsImlzU3R5bGVQcm9wIiwiZmlsdGVyVW5kZWZpbmVkIiwib2JqZWN0RmlsdGVyIiwicnVuSWZGbiIsImFzc2lnbkFmdGVyIiwiY3JlYXRlU3R5bGVkIiwiUmVhY3QiLCJfYSIsImVtb3Rpb25fc3R5bGVkIiwiZGVmYXVsdCIsInRvQ1NTT2JqZWN0IiwiYmFzZVN0eWxlIiwicHJvcHMiLCJ0aGVtZSIsImNzc1Byb3AiLCJfX2NzcyIsInN4IiwicmVzdCIsInN0eWxlUHJvcHMiLCJfIiwicHJvcCIsImZpbmFsQmFzZVN0eWxlIiwiZmluYWxTdHlsZXMiLCJjb21wdXRlZENTUyIsInN0eWxlZCIsImNvbXBvbmVudCIsIm9wdGlvbnMiLCJzdHlsZWRPcHRpb25zIiwic3R5bGVPYmplY3QiLCJDb21wb25lbnQiLCJjaGFrcmFDb21wb25lbnQiLCJmb3J3YXJkUmVmIiwiQ2hha3JhQ29tcG9uZW50IiwicmVmIiwiY29sb3JNb2RlIiwiZm9yY2VkIiwiY3JlYXRlRWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-5PL47M24.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-FDQH4LQI.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@chakra-ui/system/dist/chunk-FDQH4LQI.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shouldForwardProp: function() { return /* binding */ shouldForwardProp; }\n/* harmony export */ });\n/* harmony import */ var _chakra_ui_styled_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chakra-ui/styled-system */ \"(app-pages-browser)/./node_modules/@chakra-ui/styled-system/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ shouldForwardProp auto */ // src/should-forward-prop.ts\n\nvar allPropNames = /* @__PURE__ */ new Set([\n    ..._chakra_ui_styled_system__WEBPACK_IMPORTED_MODULE_0__.propNames,\n    \"textStyle\",\n    \"layerStyle\",\n    \"apply\",\n    \"noOfLines\",\n    \"focusBorderColor\",\n    \"errorBorderColor\",\n    \"as\",\n    \"__css\",\n    \"css\",\n    \"sx\"\n]);\nvar validHTMLProps = /* @__PURE__ */ new Set([\n    \"htmlWidth\",\n    \"htmlHeight\",\n    \"htmlSize\",\n    \"htmlTranslate\"\n]);\nfunction shouldForwardProp(prop) {\n    return validHTMLProps.has(prop) || !allPropNames.has(prop);\n}\n //# sourceMappingURL=chunk-FDQH4LQI.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3N5c3RlbS9kaXN0L2NodW5rLUZEUUg0TFFJLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozt1RUFFQSw2QkFBNkI7QUFDd0I7QUFDckQsSUFBSUMsZUFBZSxhQUFhLEdBQUcsSUFBSUMsSUFBSTtPQUN0Q0YsK0RBQVNBO0lBQ1o7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUNELElBQUlHLGlCQUFpQixhQUFhLEdBQUcsSUFBSUQsSUFBSTtJQUMzQztJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBQ0QsU0FBU0Usa0JBQWtCQyxJQUFJO0lBQzdCLE9BQU9GLGVBQWVHLEdBQUcsQ0FBQ0QsU0FBUyxDQUFDSixhQUFhSyxHQUFHLENBQUNEO0FBQ3ZEO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjaGFrcmEtdWkvc3lzdGVtL2Rpc3QvY2h1bmstRkRRSDRMUUkubWpzPzg3NTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbi8vIHNyYy9zaG91bGQtZm9yd2FyZC1wcm9wLnRzXG5pbXBvcnQgeyBwcm9wTmFtZXMgfSBmcm9tIFwiQGNoYWtyYS11aS9zdHlsZWQtc3lzdGVtXCI7XG52YXIgYWxsUHJvcE5hbWVzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAuLi5wcm9wTmFtZXMsXG4gIFwidGV4dFN0eWxlXCIsXG4gIFwibGF5ZXJTdHlsZVwiLFxuICBcImFwcGx5XCIsXG4gIFwibm9PZkxpbmVzXCIsXG4gIFwiZm9jdXNCb3JkZXJDb2xvclwiLFxuICBcImVycm9yQm9yZGVyQ29sb3JcIixcbiAgXCJhc1wiLFxuICBcIl9fY3NzXCIsXG4gIFwiY3NzXCIsXG4gIFwic3hcIlxuXSk7XG52YXIgdmFsaWRIVE1MUHJvcHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXG4gIFwiaHRtbFdpZHRoXCIsXG4gIFwiaHRtbEhlaWdodFwiLFxuICBcImh0bWxTaXplXCIsXG4gIFwiaHRtbFRyYW5zbGF0ZVwiXG5dKTtcbmZ1bmN0aW9uIHNob3VsZEZvcndhcmRQcm9wKHByb3ApIHtcbiAgcmV0dXJuIHZhbGlkSFRNTFByb3BzLmhhcyhwcm9wKSB8fCAhYWxsUHJvcE5hbWVzLmhhcyhwcm9wKTtcbn1cblxuZXhwb3J0IHtcbiAgc2hvdWxkRm9yd2FyZFByb3Bcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1GRFFINExRSS5tanMubWFwIl0sIm5hbWVzIjpbInByb3BOYW1lcyIsImFsbFByb3BOYW1lcyIsIlNldCIsInZhbGlkSFRNTFByb3BzIiwic2hvdWxkRm9yd2FyZFByb3AiLCJwcm9wIiwiaGFzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-FDQH4LQI.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-ZHQNHOQS.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@chakra-ui/system/dist/chunk-ZHQNHOQS.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chakra: function() { return /* binding */ chakra; }\n/* harmony export */ });\n/* harmony import */ var _chunk_5PL47M24_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5PL47M24.mjs */ \"(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-5PL47M24.mjs\");\n/* __next_internal_client_entry_do_not_use__ chakra auto */ \n// src/factory.ts\nfunction factory() {\n    const cache = /* @__PURE__ */ new Map();\n    return new Proxy(_chunk_5PL47M24_mjs__WEBPACK_IMPORTED_MODULE_0__.styled, {\n        /**\n     * @example\n     * const Div = chakra(\"div\")\n     * const WithChakra = chakra(AnotherComponent)\n     */ apply (target, thisArg, argArray) {\n            return (0,_chunk_5PL47M24_mjs__WEBPACK_IMPORTED_MODULE_0__.styled)(...argArray);\n        },\n        /**\n     * @example\n     * <chakra.div />\n     */ get (_, element) {\n            if (!cache.has(element)) {\n                cache.set(element, (0,_chunk_5PL47M24_mjs__WEBPACK_IMPORTED_MODULE_0__.styled)(element));\n            }\n            return cache.get(element);\n        }\n    });\n}\nvar chakra = factory();\n //# sourceMappingURL=chunk-ZHQNHOQS.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3N5c3RlbS9kaXN0L2NodW5rLVpIUU5IT1FTLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs0REFHOEI7QUFFOUIsaUJBQWlCO0FBQ2pCLFNBQVNDO0lBQ1AsTUFBTUMsUUFBUSxhQUFhLEdBQUcsSUFBSUM7SUFDbEMsT0FBTyxJQUFJQyxNQUFNSix1REFBTUEsRUFBRTtRQUN2Qjs7OztLQUlDLEdBQ0RLLE9BQU1DLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxRQUFRO1lBQzdCLE9BQU9SLDJEQUFNQSxJQUFJUTtRQUNuQjtRQUNBOzs7S0FHQyxHQUNEQyxLQUFJQyxDQUFDLEVBQUVDLE9BQU87WUFDWixJQUFJLENBQUNULE1BQU1VLEdBQUcsQ0FBQ0QsVUFBVTtnQkFDdkJULE1BQU1XLEdBQUcsQ0FBQ0YsU0FBU1gsMkRBQU1BLENBQUNXO1lBQzVCO1lBQ0EsT0FBT1QsTUFBTU8sR0FBRyxDQUFDRTtRQUNuQjtJQUNGO0FBQ0Y7QUFDQSxJQUFJRyxTQUFTYjtBQUlYLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3N5c3RlbS9kaXN0L2NodW5rLVpIUU5IT1FTLm1qcz8wMGE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuaW1wb3J0IHtcbiAgc3R5bGVkXG59IGZyb20gXCIuL2NodW5rLTVQTDQ3TTI0Lm1qc1wiO1xuXG4vLyBzcmMvZmFjdG9yeS50c1xuZnVuY3Rpb24gZmFjdG9yeSgpIHtcbiAgY29uc3QgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICByZXR1cm4gbmV3IFByb3h5KHN0eWxlZCwge1xuICAgIC8qKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgRGl2ID0gY2hha3JhKFwiZGl2XCIpXG4gICAgICogY29uc3QgV2l0aENoYWtyYSA9IGNoYWtyYShBbm90aGVyQ29tcG9uZW50KVxuICAgICAqL1xuICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgIHJldHVybiBzdHlsZWQoLi4uYXJnQXJyYXkpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8Y2hha3JhLmRpdiAvPlxuICAgICAqL1xuICAgIGdldChfLCBlbGVtZW50KSB7XG4gICAgICBpZiAoIWNhY2hlLmhhcyhlbGVtZW50KSkge1xuICAgICAgICBjYWNoZS5zZXQoZWxlbWVudCwgc3R5bGVkKGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYWNoZS5nZXQoZWxlbWVudCk7XG4gICAgfVxuICB9KTtcbn1cbnZhciBjaGFrcmEgPSBmYWN0b3J5KCk7XG5cbmV4cG9ydCB7XG4gIGNoYWtyYVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVpIUU5IT1FTLm1qcy5tYXAiXSwibmFtZXMiOlsic3R5bGVkIiwiZmFjdG9yeSIsImNhY2hlIiwiTWFwIiwiUHJveHkiLCJhcHBseSIsInRhcmdldCIsInRoaXNBcmciLCJhcmdBcnJheSIsImdldCIsIl8iLCJlbGVtZW50IiwiaGFzIiwic2V0IiwiY2hha3JhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-ZHQNHOQS.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-ZJJGQIVY.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@chakra-ui/system/dist/chunk-ZJJGQIVY.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   forwardRef: function() { return /* binding */ forwardRef; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ forwardRef auto */ // src/forward-ref.tsx\n\nfunction forwardRef(component) {\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(component);\n}\n //# sourceMappingURL=chunk-ZJJGQIVY.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3N5c3RlbS9kaXN0L2NodW5rLVpKSkdRSVZZLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztnRUFFQSxzQkFBc0I7QUFDZ0M7QUFDdEQsU0FBU0EsV0FBV0UsU0FBUztJQUMzQixxQkFBT0QsaURBQWVBLENBQUNDO0FBQ3pCO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjaGFrcmEtdWkvc3lzdGVtL2Rpc3QvY2h1bmstWkpKR1FJVlkubWpzPzIwMGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbi8vIHNyYy9mb3J3YXJkLXJlZi50c3hcbmltcG9ydCB7IGZvcndhcmRSZWYgYXMgZm9yd2FyZFJlYWN0UmVmIH0gZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBmb3J3YXJkUmVmKGNvbXBvbmVudCkge1xuICByZXR1cm4gZm9yd2FyZFJlYWN0UmVmKGNvbXBvbmVudCk7XG59XG5cbmV4cG9ydCB7XG4gIGZvcndhcmRSZWZcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1aSkpHUUlWWS5tanMubWFwIl0sIm5hbWVzIjpbImZvcndhcmRSZWYiLCJmb3J3YXJkUmVhY3RSZWYiLCJjb21wb25lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/system/dist/chunk-ZJJGQIVY.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callAll: function() { return /* binding */ callAll; },\n/* harmony export */   callAllHandlers: function() { return /* binding */ callAllHandlers; },\n/* harmony export */   compose: function() { return /* binding */ compose; },\n/* harmony export */   distance: function() { return /* binding */ distance; },\n/* harmony export */   error: function() { return /* binding */ error; },\n/* harmony export */   noop: function() { return /* binding */ noop; },\n/* harmony export */   once: function() { return /* binding */ once; },\n/* harmony export */   pipe: function() { return /* binding */ pipe; },\n/* harmony export */   runIfFn: function() { return /* binding */ runIfFn; },\n/* harmony export */   warn: function() { return /* binding */ warn; }\n/* harmony export */ });\n/* harmony import */ var _chunk_Y5FGD7DM_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-Y5FGD7DM.mjs */ \"(app-pages-browser)/./node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs\");\n\n// src/function.ts\nfunction runIfFn(valueOrFn) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return (0,_chunk_Y5FGD7DM_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(valueOrFn) ? valueOrFn(...args) : valueOrFn;\n}\nfunction callAllHandlers() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return function func(event) {\n        fns.some((fn)=>{\n            fn == null ? void 0 : fn(event);\n            return event == null ? void 0 : event.defaultPrevented;\n        });\n    };\n}\nfunction callAll() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return function mergedFn(arg) {\n        fns.forEach((fn)=>{\n            fn == null ? void 0 : fn(arg);\n        });\n    };\n}\nvar compose = function(fn1) {\n    for(var _len = arguments.length, fns = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        fns[_key - 1] = arguments[_key];\n    }\n    return fns.reduce((f1, f2)=>function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return f1(f2(...args));\n        }, fn1);\n};\nfunction once(fn) {\n    let result;\n    return function func() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (fn) {\n            result = fn.apply(this, args);\n            fn = null;\n        }\n        return result;\n    };\n}\nvar noop = ()=>{};\nvar warn = /* @__PURE__ */ once((options)=>()=>{\n        const { condition, message } = options;\n        if (condition && _chunk_Y5FGD7DM_mjs__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {\n            console.warn(message);\n        }\n    });\nvar error = /* @__PURE__ */ once((options)=>()=>{\n        const { condition, message } = options;\n        if (condition && _chunk_Y5FGD7DM_mjs__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {\n            console.error(message);\n        }\n    });\nvar pipe = function() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return (v)=>fns.reduce((a, b)=>b(a), v);\n};\nvar distance1D = (a, b)=>Math.abs(a - b);\nvar isPoint = (point)=>\"x\" in point && \"y\" in point;\nfunction distance(a, b) {\n    if ((0,_chunk_Y5FGD7DM_mjs__WEBPACK_IMPORTED_MODULE_0__.isNumber)(a) && (0,_chunk_Y5FGD7DM_mjs__WEBPACK_IMPORTED_MODULE_0__.isNumber)(b)) {\n        return distance1D(a, b);\n    }\n    if (isPoint(a) && isPoint(b)) {\n        const xDelta = distance1D(a.x, b.x);\n        const yDelta = distance1D(a.y, b.y);\n        return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n    }\n    return 0;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3V0aWxzL2Rpc3QvY2h1bmstTTNURk1VT0wubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBSThCO0FBRTlCLGtCQUFrQjtBQUNsQixTQUFTRyxRQUFRQyxTQUFTO0lBQUU7UUFBR0MsS0FBSCwyQkFBTzs7SUFDakMsT0FBT0osK0RBQVVBLENBQUNHLGFBQWFBLGFBQWFDLFFBQVFEO0FBQ3REO0FBQ0EsU0FBU0U7SUFBZ0I7UUFBR0MsSUFBSCx1QkFBTTs7SUFDN0IsT0FBTyxTQUFTQyxLQUFLQyxLQUFLO1FBQ3hCRixJQUFJRyxJQUFJLENBQUMsQ0FBQ0M7WUFDUkEsTUFBTSxPQUFPLEtBQUssSUFBSUEsR0FBR0Y7WUFDekIsT0FBT0EsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTUcsZ0JBQWdCO1FBQ3hEO0lBQ0Y7QUFDRjtBQUNBLFNBQVNDO0lBQVE7UUFBR04sSUFBSCx1QkFBTTs7SUFDckIsT0FBTyxTQUFTTyxTQUFTQyxHQUFHO1FBQzFCUixJQUFJUyxPQUFPLENBQUMsQ0FBQ0w7WUFDWEEsTUFBTSxPQUFPLEtBQUssSUFBSUEsR0FBR0k7UUFDM0I7SUFDRjtBQUNGO0FBQ0EsSUFBSUUsVUFBVSxTQUFDQztxQ0FBUVg7UUFBQUE7O1dBQVFBLElBQUlZLE1BQU0sQ0FDdkMsQ0FBQ0MsSUFBSUMsS0FBTzs2Q0FBSWhCO2dCQUFBQTs7bUJBQVNlLEdBQUdDLE1BQU1oQjtXQUNsQ2E7O0FBRUYsU0FBU0ksS0FBS1gsRUFBRTtJQUNkLElBQUlZO0lBQ0osT0FBTyxTQUFTZjtRQUFLO1lBQUdILEtBQUgsdUJBQU87O1FBQzFCLElBQUlNLElBQUk7WUFDTlksU0FBU1osR0FBR2EsS0FBSyxDQUFDLElBQUksRUFBRW5CO1lBQ3hCTSxLQUFLO1FBQ1A7UUFDQSxPQUFPWTtJQUNUO0FBQ0Y7QUFDQSxJQUFJRSxPQUFPLEtBQ1g7QUFDQSxJQUFJQyxPQUFPLGFBQWEsR0FBR0osS0FBSyxDQUFDSyxVQUFZO1FBQzNDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUUsR0FBR0Y7UUFDL0IsSUFBSUMsYUFBYTVCLHdEQUFPQSxFQUFFO1lBQ3hCOEIsUUFBUUosSUFBSSxDQUFDRztRQUNmO0lBQ0Y7QUFDQSxJQUFJRSxRQUFRLGFBQWEsR0FBR1QsS0FBSyxDQUFDSyxVQUFZO1FBQzVDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUUsR0FBR0Y7UUFDL0IsSUFBSUMsYUFBYTVCLHdEQUFPQSxFQUFFO1lBQ3hCOEIsUUFBUUMsS0FBSyxDQUFDRjtRQUNoQjtJQUNGO0FBQ0EsSUFBSUcsT0FBTztxQ0FBSXpCO1FBQUFBOztXQUFRLENBQUMwQixJQUFNMUIsSUFBSVksTUFBTSxDQUFDLENBQUNlLEdBQUdDLElBQU1BLEVBQUVELElBQUlEOztBQUN6RCxJQUFJRyxhQUFhLENBQUNGLEdBQUdDLElBQU1FLEtBQUtDLEdBQUcsQ0FBQ0osSUFBSUM7QUFDeEMsSUFBSUksVUFBVSxDQUFDQyxRQUFVLE9BQU9BLFNBQVMsT0FBT0E7QUFDaEQsU0FBU0MsU0FBU1AsQ0FBQyxFQUFFQyxDQUFDO0lBQ3BCLElBQUlqQyw2REFBUUEsQ0FBQ2dDLE1BQU1oQyw2REFBUUEsQ0FBQ2lDLElBQUk7UUFDOUIsT0FBT0MsV0FBV0YsR0FBR0M7SUFDdkI7SUFDQSxJQUFJSSxRQUFRTCxNQUFNSyxRQUFRSixJQUFJO1FBQzVCLE1BQU1PLFNBQVNOLFdBQVdGLEVBQUVTLENBQUMsRUFBRVIsRUFBRVEsQ0FBQztRQUNsQyxNQUFNQyxTQUFTUixXQUFXRixFQUFFVyxDQUFDLEVBQUVWLEVBQUVVLENBQUM7UUFDbEMsT0FBT1IsS0FBS1MsSUFBSSxDQUFDSixVQUFVLElBQUlFLFVBQVU7SUFDM0M7SUFDQSxPQUFPO0FBQ1Q7QUFhRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNoYWtyYS11aS91dGlscy9kaXN0L2NodW5rLU0zVEZNVU9MLm1qcz84MGRjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIF9fREVWX18sXG4gIGlzRnVuY3Rpb24sXG4gIGlzTnVtYmVyXG59IGZyb20gXCIuL2NodW5rLVk1RkdEN0RNLm1qc1wiO1xuXG4vLyBzcmMvZnVuY3Rpb24udHNcbmZ1bmN0aW9uIHJ1bklmRm4odmFsdWVPckZuLCAuLi5hcmdzKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlT3JGbikgPyB2YWx1ZU9yRm4oLi4uYXJncykgOiB2YWx1ZU9yRm47XG59XG5mdW5jdGlvbiBjYWxsQWxsSGFuZGxlcnMoLi4uZm5zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmdW5jKGV2ZW50KSB7XG4gICAgZm5zLnNvbWUoKGZuKSA9PiB7XG4gICAgICBmbiA9PSBudWxsID8gdm9pZCAwIDogZm4oZXZlbnQpO1xuICAgICAgcmV0dXJuIGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC5kZWZhdWx0UHJldmVudGVkO1xuICAgIH0pO1xuICB9O1xufVxuZnVuY3Rpb24gY2FsbEFsbCguLi5mbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEZuKGFyZykge1xuICAgIGZucy5mb3JFYWNoKChmbikgPT4ge1xuICAgICAgZm4gPT0gbnVsbCA/IHZvaWQgMCA6IGZuKGFyZyk7XG4gICAgfSk7XG4gIH07XG59XG52YXIgY29tcG9zZSA9IChmbjEsIC4uLmZucykgPT4gZm5zLnJlZHVjZShcbiAgKGYxLCBmMikgPT4gKC4uLmFyZ3MpID0+IGYxKGYyKC4uLmFyZ3MpKSxcbiAgZm4xXG4pO1xuZnVuY3Rpb24gb25jZShmbikge1xuICBsZXQgcmVzdWx0O1xuICByZXR1cm4gZnVuY3Rpb24gZnVuYyguLi5hcmdzKSB7XG4gICAgaWYgKGZuKSB7XG4gICAgICByZXN1bHQgPSBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGZuID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbnZhciBub29wID0gKCkgPT4ge1xufTtcbnZhciB3YXJuID0gLyogQF9fUFVSRV9fICovIG9uY2UoKG9wdGlvbnMpID0+ICgpID0+IHtcbiAgY29uc3QgeyBjb25kaXRpb24sIG1lc3NhZ2UgfSA9IG9wdGlvbnM7XG4gIGlmIChjb25kaXRpb24gJiYgX19ERVZfXykge1xuICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgfVxufSk7XG52YXIgZXJyb3IgPSAvKiBAX19QVVJFX18gKi8gb25jZSgob3B0aW9ucykgPT4gKCkgPT4ge1xuICBjb25zdCB7IGNvbmRpdGlvbiwgbWVzc2FnZSB9ID0gb3B0aW9ucztcbiAgaWYgKGNvbmRpdGlvbiAmJiBfX0RFVl9fKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxufSk7XG52YXIgcGlwZSA9ICguLi5mbnMpID0+ICh2KSA9PiBmbnMucmVkdWNlKChhLCBiKSA9PiBiKGEpLCB2KTtcbnZhciBkaXN0YW5jZTFEID0gKGEsIGIpID0+IE1hdGguYWJzKGEgLSBiKTtcbnZhciBpc1BvaW50ID0gKHBvaW50KSA9PiBcInhcIiBpbiBwb2ludCAmJiBcInlcIiBpbiBwb2ludDtcbmZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcbiAgaWYgKGlzTnVtYmVyKGEpICYmIGlzTnVtYmVyKGIpKSB7XG4gICAgcmV0dXJuIGRpc3RhbmNlMUQoYSwgYik7XG4gIH1cbiAgaWYgKGlzUG9pbnQoYSkgJiYgaXNQb2ludChiKSkge1xuICAgIGNvbnN0IHhEZWx0YSA9IGRpc3RhbmNlMUQoYS54LCBiLngpO1xuICAgIGNvbnN0IHlEZWx0YSA9IGRpc3RhbmNlMUQoYS55LCBiLnkpO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeERlbHRhICoqIDIgKyB5RGVsdGEgKiogMik7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCB7XG4gIHJ1bklmRm4sXG4gIGNhbGxBbGxIYW5kbGVycyxcbiAgY2FsbEFsbCxcbiAgY29tcG9zZSxcbiAgb25jZSxcbiAgbm9vcCxcbiAgd2FybixcbiAgZXJyb3IsXG4gIHBpcGUsXG4gIGRpc3RhbmNlXG59O1xuIl0sIm5hbWVzIjpbIl9fREVWX18iLCJpc0Z1bmN0aW9uIiwiaXNOdW1iZXIiLCJydW5JZkZuIiwidmFsdWVPckZuIiwiYXJncyIsImNhbGxBbGxIYW5kbGVycyIsImZucyIsImZ1bmMiLCJldmVudCIsInNvbWUiLCJmbiIsImRlZmF1bHRQcmV2ZW50ZWQiLCJjYWxsQWxsIiwibWVyZ2VkRm4iLCJhcmciLCJmb3JFYWNoIiwiY29tcG9zZSIsImZuMSIsInJlZHVjZSIsImYxIiwiZjIiLCJvbmNlIiwicmVzdWx0IiwiYXBwbHkiLCJub29wIiwid2FybiIsIm9wdGlvbnMiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiY29uc29sZSIsImVycm9yIiwicGlwZSIsInYiLCJhIiwiYiIsImRpc3RhbmNlMUQiLCJNYXRoIiwiYWJzIiwiaXNQb2ludCIsInBvaW50IiwiZGlzdGFuY2UiLCJ4RGVsdGEiLCJ4IiwieURlbHRhIiwieSIsInNxcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __DEV__: function() { return /* binding */ __DEV__; },\n/* harmony export */   __TEST__: function() { return /* binding */ __TEST__; },\n/* harmony export */   isArray: function() { return /* binding */ isArray; },\n/* harmony export */   isCssVar: function() { return /* binding */ isCssVar; },\n/* harmony export */   isDefined: function() { return /* binding */ isDefined; },\n/* harmony export */   isEmpty: function() { return /* binding */ isEmpty; },\n/* harmony export */   isEmptyArray: function() { return /* binding */ isEmptyArray; },\n/* harmony export */   isEmptyObject: function() { return /* binding */ isEmptyObject; },\n/* harmony export */   isFunction: function() { return /* binding */ isFunction; },\n/* harmony export */   isInputEvent: function() { return /* binding */ isInputEvent; },\n/* harmony export */   isNotEmptyObject: function() { return /* binding */ isNotEmptyObject; },\n/* harmony export */   isNotNumber: function() { return /* binding */ isNotNumber; },\n/* harmony export */   isNull: function() { return /* binding */ isNull; },\n/* harmony export */   isNumber: function() { return /* binding */ isNumber; },\n/* harmony export */   isNumeric: function() { return /* binding */ isNumeric; },\n/* harmony export */   isObject: function() { return /* binding */ isObject; },\n/* harmony export */   isRefObject: function() { return /* binding */ isRefObject; },\n/* harmony export */   isString: function() { return /* binding */ isString; },\n/* harmony export */   isUndefined: function() { return /* binding */ isUndefined; }\n/* harmony export */ });\n// src/assertion.ts\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\nfunction isNotNumber(value) {\n    return typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value);\n}\nfunction isNumeric(value) {\n    return value != null && value - parseFloat(value) + 1 >= 0;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isEmptyArray(value) {\n    return isArray(value) && value.length === 0;\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction isDefined(value) {\n    return typeof value !== \"undefined\" && value !== void 0;\n}\nfunction isUndefined(value) {\n    return typeof value === \"undefined\" || value === void 0;\n}\nfunction isObject(value) {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\") && !isArray(value);\n}\nfunction isEmptyObject(value) {\n    return isObject(value) && Object.keys(value).length === 0;\n}\nfunction isNotEmptyObject(value) {\n    return value && !isEmptyObject(value);\n}\nfunction isNull(value) {\n    return value == null;\n}\nfunction isString(value) {\n    return Object.prototype.toString.call(value) === \"[object String]\";\n}\nfunction isCssVar(value) {\n    return /^var\\(--.+\\)$/.test(value);\n}\nfunction isEmpty(value) {\n    if (isArray(value)) return isEmptyArray(value);\n    if (isObject(value)) return isEmptyObject(value);\n    if (value == null || value === \"\") return true;\n    return false;\n}\nvar __DEV__ = \"development\" !== \"production\";\nvar __TEST__ = \"development\" === \"test\";\nfunction isRefObject(val) {\n    return \"current\" in val;\n}\nfunction isInputEvent(value) {\n    return value && isObject(value) && isObject(value.target);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3V0aWxzL2Rpc3QvY2h1bmstWTVGR0Q3RE0ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQkFBbUI7QUFDbkIsU0FBU0EsU0FBU0MsS0FBSztJQUNyQixPQUFPLE9BQU9BLFVBQVU7QUFDMUI7QUFDQSxTQUFTQyxZQUFZRCxLQUFLO0lBQ3hCLE9BQU8sT0FBT0EsVUFBVSxZQUFZRSxPQUFPQyxLQUFLLENBQUNILFVBQVUsQ0FBQ0UsT0FBT0UsUUFBUSxDQUFDSjtBQUM5RTtBQUNBLFNBQVNLLFVBQVVMLEtBQUs7SUFDdEIsT0FBT0EsU0FBUyxRQUFRQSxRQUFRTSxXQUFXTixTQUFTLEtBQUs7QUFDM0Q7QUFDQSxTQUFTTyxRQUFRUCxLQUFLO0lBQ3BCLE9BQU9RLE1BQU1ELE9BQU8sQ0FBQ1A7QUFDdkI7QUFDQSxTQUFTUyxhQUFhVCxLQUFLO0lBQ3pCLE9BQU9PLFFBQVFQLFVBQVVBLE1BQU1VLE1BQU0sS0FBSztBQUM1QztBQUNBLFNBQVNDLFdBQVdYLEtBQUs7SUFDdkIsT0FBTyxPQUFPQSxVQUFVO0FBQzFCO0FBQ0EsU0FBU1ksVUFBVVosS0FBSztJQUN0QixPQUFPLE9BQU9BLFVBQVUsZUFBZUEsVUFBVSxLQUFLO0FBQ3hEO0FBQ0EsU0FBU2EsWUFBWWIsS0FBSztJQUN4QixPQUFPLE9BQU9BLFVBQVUsZUFBZUEsVUFBVSxLQUFLO0FBQ3hEO0FBQ0EsU0FBU2MsU0FBU2QsS0FBSztJQUNyQixNQUFNZSxPQUFPLE9BQU9mO0lBQ3BCLE9BQU9BLFNBQVMsUUFBU2UsQ0FBQUEsU0FBUyxZQUFZQSxTQUFTLFVBQVMsS0FBTSxDQUFDUixRQUFRUDtBQUNqRjtBQUNBLFNBQVNnQixjQUFjaEIsS0FBSztJQUMxQixPQUFPYyxTQUFTZCxVQUFVaUIsT0FBT0MsSUFBSSxDQUFDbEIsT0FBT1UsTUFBTSxLQUFLO0FBQzFEO0FBQ0EsU0FBU1MsaUJBQWlCbkIsS0FBSztJQUM3QixPQUFPQSxTQUFTLENBQUNnQixjQUFjaEI7QUFDakM7QUFDQSxTQUFTb0IsT0FBT3BCLEtBQUs7SUFDbkIsT0FBT0EsU0FBUztBQUNsQjtBQUNBLFNBQVNxQixTQUFTckIsS0FBSztJQUNyQixPQUFPaUIsT0FBT0ssU0FBUyxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQ3hCLFdBQVc7QUFDbkQ7QUFDQSxTQUFTeUIsU0FBU3pCLEtBQUs7SUFDckIsT0FBTyxnQkFBZ0IwQixJQUFJLENBQUMxQjtBQUM5QjtBQUNBLFNBQVMyQixRQUFRM0IsS0FBSztJQUNwQixJQUFJTyxRQUFRUCxRQUNWLE9BQU9TLGFBQWFUO0lBQ3RCLElBQUljLFNBQVNkLFFBQ1gsT0FBT2dCLGNBQWNoQjtJQUN2QixJQUFJQSxTQUFTLFFBQVFBLFVBQVUsSUFDN0IsT0FBTztJQUNULE9BQU87QUFDVDtBQUNBLElBQUk0QixVQUFVQyxrQkFBeUI7QUFDdkMsSUFBSUMsV0FBV0Qsa0JBQXlCO0FBQ3hDLFNBQVNFLFlBQVlDLEdBQUc7SUFDdEIsT0FBTyxhQUFhQTtBQUN0QjtBQUNBLFNBQVNDLGFBQWFqQyxLQUFLO0lBQ3pCLE9BQU9BLFNBQVNjLFNBQVNkLFVBQVVjLFNBQVNkLE1BQU1rQyxNQUFNO0FBQzFEO0FBc0JFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3V0aWxzL2Rpc3QvY2h1bmstWTVGR0Q3RE0ubWpzP2U2YjIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2Fzc2VydGlvbi50c1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIGlzTm90TnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIgfHwgTnVtYmVyLmlzTmFOKHZhbHVlKSB8fCAhTnVtYmVyLmlzRmluaXRlKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzTnVtZXJpYyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAtIHBhcnNlRmxvYXQodmFsdWUpICsgMSA+PSAwO1xufVxuZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBpc0VtcHR5QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMDtcbn1cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgdmFsdWUgIT09IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgfHwgdmFsdWUgPT09IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09PSBcIm9iamVjdFwiIHx8IHR5cGUgPT09IFwiZnVuY3Rpb25cIikgJiYgIWlzQXJyYXkodmFsdWUpO1xufVxuZnVuY3Rpb24gaXNFbXB0eU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiBpc05vdEVtcHR5T2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiAhaXNFbXB0eU9iamVjdCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGw7XG59XG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIjtcbn1cbmZ1bmN0aW9uIGlzQ3NzVmFyKHZhbHVlKSB7XG4gIHJldHVybiAvXnZhclxcKC0tLitcXCkkLy50ZXN0KHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKVxuICAgIHJldHVybiBpc0VtcHR5QXJyYXkodmFsdWUpO1xuICBpZiAoaXNPYmplY3QodmFsdWUpKVxuICAgIHJldHVybiBpc0VtcHR5T2JqZWN0KHZhbHVlKTtcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IFwiXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn1cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiO1xudmFyIF9fVEVTVF9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwidGVzdFwiO1xuZnVuY3Rpb24gaXNSZWZPYmplY3QodmFsKSB7XG4gIHJldHVybiBcImN1cnJlbnRcIiBpbiB2YWw7XG59XG5mdW5jdGlvbiBpc0lucHV0RXZlbnQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIGlzT2JqZWN0KHZhbHVlKSAmJiBpc09iamVjdCh2YWx1ZS50YXJnZXQpO1xufVxuXG5leHBvcnQge1xuICBpc051bWJlcixcbiAgaXNOb3ROdW1iZXIsXG4gIGlzTnVtZXJpYyxcbiAgaXNBcnJheSxcbiAgaXNFbXB0eUFycmF5LFxuICBpc0Z1bmN0aW9uLFxuICBpc0RlZmluZWQsXG4gIGlzVW5kZWZpbmVkLFxuICBpc09iamVjdCxcbiAgaXNFbXB0eU9iamVjdCxcbiAgaXNOb3RFbXB0eU9iamVjdCxcbiAgaXNOdWxsLFxuICBpc1N0cmluZyxcbiAgaXNDc3NWYXIsXG4gIGlzRW1wdHksXG4gIF9fREVWX18sXG4gIF9fVEVTVF9fLFxuICBpc1JlZk9iamVjdCxcbiAgaXNJbnB1dEV2ZW50XG59O1xuIl0sIm5hbWVzIjpbImlzTnVtYmVyIiwidmFsdWUiLCJpc05vdE51bWJlciIsIk51bWJlciIsImlzTmFOIiwiaXNGaW5pdGUiLCJpc051bWVyaWMiLCJwYXJzZUZsb2F0IiwiaXNBcnJheSIsIkFycmF5IiwiaXNFbXB0eUFycmF5IiwibGVuZ3RoIiwiaXNGdW5jdGlvbiIsImlzRGVmaW5lZCIsImlzVW5kZWZpbmVkIiwiaXNPYmplY3QiLCJ0eXBlIiwiaXNFbXB0eU9iamVjdCIsIk9iamVjdCIsImtleXMiLCJpc05vdEVtcHR5T2JqZWN0IiwiaXNOdWxsIiwiaXNTdHJpbmciLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJpc0Nzc1ZhciIsInRlc3QiLCJpc0VtcHR5IiwiX19ERVZfXyIsInByb2Nlc3MiLCJfX1RFU1RfXyIsImlzUmVmT2JqZWN0IiwidmFsIiwiaXNJbnB1dEV2ZW50IiwidGFyZ2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* reexport default export from named module */ lodash_mergewith__WEBPACK_IMPORTED_MODULE_0__; },\n/* harmony export */   filterUndefined: function() { return /* binding */ filterUndefined; },\n/* harmony export */   fromEntries: function() { return /* binding */ fromEntries; },\n/* harmony export */   get: function() { return /* binding */ get; },\n/* harmony export */   getCSSVar: function() { return /* binding */ getCSSVar; },\n/* harmony export */   getWithDefault: function() { return /* binding */ getWithDefault; },\n/* harmony export */   memoize: function() { return /* binding */ memoize; },\n/* harmony export */   memoizedGet: function() { return /* binding */ memoizedGet; },\n/* harmony export */   objectFilter: function() { return /* binding */ objectFilter; },\n/* harmony export */   objectKeys: function() { return /* binding */ objectKeys; },\n/* harmony export */   omit: function() { return /* binding */ omit; },\n/* harmony export */   pick: function() { return /* binding */ pick; },\n/* harmony export */   split: function() { return /* binding */ split; }\n/* harmony export */ });\n/* harmony import */ var lodash_mergewith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.mergewith */ \"(app-pages-browser)/./node_modules/lodash.mergewith/index.js\");\n// src/object.ts\n\nfunction omit(object, keys) {\n    const result = {};\n    Object.keys(object).forEach((key)=>{\n        if (keys.includes(key)) return;\n        result[key] = object[key];\n    });\n    return result;\n}\nfunction pick(object, keys) {\n    const result = {};\n    keys.forEach((key)=>{\n        if (key in object) {\n            result[key] = object[key];\n        }\n    });\n    return result;\n}\nfunction split(object, keys) {\n    const picked = {};\n    const omitted = {};\n    Object.keys(object).forEach((key)=>{\n        if (keys.includes(key)) {\n            picked[key] = object[key];\n        } else {\n            omitted[key] = object[key];\n        }\n    });\n    return [\n        picked,\n        omitted\n    ];\n}\nfunction get(obj, path, fallback, index) {\n    const key = typeof path === \"string\" ? path.split(\".\") : [\n        path\n    ];\n    for(index = 0; index < key.length; index += 1){\n        if (!obj) break;\n        obj = obj[key[index]];\n    }\n    return obj === void 0 ? fallback : obj;\n}\nvar memoize = (fn)=>{\n    const cache = /* @__PURE__ */ new WeakMap();\n    const memoizedFn = (obj, path, fallback, index)=>{\n        if (typeof obj === \"undefined\") {\n            return fn(obj, path, fallback);\n        }\n        if (!cache.has(obj)) {\n            cache.set(obj, /* @__PURE__ */ new Map());\n        }\n        const map = cache.get(obj);\n        if (map.has(path)) {\n            return map.get(path);\n        }\n        const value = fn(obj, path, fallback, index);\n        map.set(path, value);\n        return value;\n    };\n    return memoizedFn;\n};\nvar memoizedGet = memoize(get);\nfunction getWithDefault(path, scale) {\n    return memoizedGet(scale, path, path);\n}\nfunction objectFilter(object, fn) {\n    const result = {};\n    Object.keys(object).forEach((key)=>{\n        const value = object[key];\n        const shouldPass = fn(value, key, object);\n        if (shouldPass) {\n            result[key] = value;\n        }\n    });\n    return result;\n}\nvar filterUndefined = (object)=>objectFilter(object, (val)=>val !== null && val !== void 0);\nvar objectKeys = (obj)=>Object.keys(obj);\nvar fromEntries = (entries)=>entries.reduce((carry, param)=>{\n        let [key, value] = param;\n        carry[key] = value;\n        return carry;\n    }, {});\nvar getCSSVar = (theme, scale, value)=>{\n    var _a, _b, _c;\n    return (_c = (_b = (_a = theme.__cssMap) == null ? void 0 : _a[\"\".concat(scale, \".\").concat(value)]) == null ? void 0 : _b.varRef) != null ? _c : value;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2hha3JhLXVpL3V0aWxzL2Rpc3QvY2h1bmstWVRRM1haM1QubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0JBQWdCO0FBQ3VDO0FBQ3ZELFNBQVNFLEtBQUtDLE1BQU0sRUFBRUMsSUFBSTtJQUN4QixNQUFNQyxTQUFTLENBQUM7SUFDaEJDLE9BQU9GLElBQUksQ0FBQ0QsUUFBUUksT0FBTyxDQUFDLENBQUNDO1FBQzNCLElBQUlKLEtBQUtLLFFBQVEsQ0FBQ0QsTUFDaEI7UUFDRkgsTUFBTSxDQUFDRyxJQUFJLEdBQUdMLE1BQU0sQ0FBQ0ssSUFBSTtJQUMzQjtJQUNBLE9BQU9IO0FBQ1Q7QUFDQSxTQUFTSyxLQUFLUCxNQUFNLEVBQUVDLElBQUk7SUFDeEIsTUFBTUMsU0FBUyxDQUFDO0lBQ2hCRCxLQUFLRyxPQUFPLENBQUMsQ0FBQ0M7UUFDWixJQUFJQSxPQUFPTCxRQUFRO1lBQ2pCRSxNQUFNLENBQUNHLElBQUksR0FBR0wsTUFBTSxDQUFDSyxJQUFJO1FBQzNCO0lBQ0Y7SUFDQSxPQUFPSDtBQUNUO0FBQ0EsU0FBU00sTUFBTVIsTUFBTSxFQUFFQyxJQUFJO0lBQ3pCLE1BQU1RLFNBQVMsQ0FBQztJQUNoQixNQUFNQyxVQUFVLENBQUM7SUFDakJQLE9BQU9GLElBQUksQ0FBQ0QsUUFBUUksT0FBTyxDQUFDLENBQUNDO1FBQzNCLElBQUlKLEtBQUtLLFFBQVEsQ0FBQ0QsTUFBTTtZQUN0QkksTUFBTSxDQUFDSixJQUFJLEdBQUdMLE1BQU0sQ0FBQ0ssSUFBSTtRQUMzQixPQUFPO1lBQ0xLLE9BQU8sQ0FBQ0wsSUFBSSxHQUFHTCxNQUFNLENBQUNLLElBQUk7UUFDNUI7SUFDRjtJQUNBLE9BQU87UUFBQ0k7UUFBUUM7S0FBUTtBQUMxQjtBQUNBLFNBQVNDLElBQUlDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLEtBQUs7SUFDckMsTUFBTVYsTUFBTSxPQUFPUSxTQUFTLFdBQVdBLEtBQUtMLEtBQUssQ0FBQyxPQUFPO1FBQUNLO0tBQUs7SUFDL0QsSUFBS0UsUUFBUSxHQUFHQSxRQUFRVixJQUFJVyxNQUFNLEVBQUVELFNBQVMsRUFBRztRQUM5QyxJQUFJLENBQUNILEtBQ0g7UUFDRkEsTUFBTUEsR0FBRyxDQUFDUCxHQUFHLENBQUNVLE1BQU0sQ0FBQztJQUN2QjtJQUNBLE9BQU9ILFFBQVEsS0FBSyxJQUFJRSxXQUFXRjtBQUNyQztBQUNBLElBQUlLLFVBQVUsQ0FBQ0M7SUFDYixNQUFNQyxRQUFRLGFBQWEsR0FBRyxJQUFJQztJQUNsQyxNQUFNQyxhQUFhLENBQUNULEtBQUtDLE1BQU1DLFVBQVVDO1FBQ3ZDLElBQUksT0FBT0gsUUFBUSxhQUFhO1lBQzlCLE9BQU9NLEdBQUdOLEtBQUtDLE1BQU1DO1FBQ3ZCO1FBQ0EsSUFBSSxDQUFDSyxNQUFNRyxHQUFHLENBQUNWLE1BQU07WUFDbkJPLE1BQU1JLEdBQUcsQ0FBQ1gsS0FBSyxhQUFhLEdBQUcsSUFBSVk7UUFDckM7UUFDQSxNQUFNQyxNQUFNTixNQUFNUixHQUFHLENBQUNDO1FBQ3RCLElBQUlhLElBQUlILEdBQUcsQ0FBQ1QsT0FBTztZQUNqQixPQUFPWSxJQUFJZCxHQUFHLENBQUNFO1FBQ2pCO1FBQ0EsTUFBTWEsUUFBUVIsR0FBR04sS0FBS0MsTUFBTUMsVUFBVUM7UUFDdENVLElBQUlGLEdBQUcsQ0FBQ1YsTUFBTWE7UUFDZCxPQUFPQTtJQUNUO0lBQ0EsT0FBT0w7QUFDVDtBQUNBLElBQUlNLGNBQWNWLFFBQVFOO0FBQzFCLFNBQVNpQixlQUFlZixJQUFJLEVBQUVnQixLQUFLO0lBQ2pDLE9BQU9GLFlBQVlFLE9BQU9oQixNQUFNQTtBQUNsQztBQUNBLFNBQVNpQixhQUFhOUIsTUFBTSxFQUFFa0IsRUFBRTtJQUM5QixNQUFNaEIsU0FBUyxDQUFDO0lBQ2hCQyxPQUFPRixJQUFJLENBQUNELFFBQVFJLE9BQU8sQ0FBQyxDQUFDQztRQUMzQixNQUFNcUIsUUFBUTFCLE1BQU0sQ0FBQ0ssSUFBSTtRQUN6QixNQUFNMEIsYUFBYWIsR0FBR1EsT0FBT3JCLEtBQUtMO1FBQ2xDLElBQUkrQixZQUFZO1lBQ2Q3QixNQUFNLENBQUNHLElBQUksR0FBR3FCO1FBQ2hCO0lBQ0Y7SUFDQSxPQUFPeEI7QUFDVDtBQUNBLElBQUk4QixrQkFBa0IsQ0FBQ2hDLFNBQVc4QixhQUFhOUIsUUFBUSxDQUFDaUMsTUFBUUEsUUFBUSxRQUFRQSxRQUFRLEtBQUs7QUFDN0YsSUFBSUMsYUFBYSxDQUFDdEIsTUFBUVQsT0FBT0YsSUFBSSxDQUFDVztBQUN0QyxJQUFJdUIsY0FBYyxDQUFDQyxVQUFZQSxRQUFRQyxNQUFNLENBQUMsQ0FBQ0M7WUFBTyxDQUFDakMsS0FBS3FCLE1BQU07UUFDaEVZLEtBQUssQ0FBQ2pDLElBQUksR0FBR3FCO1FBQ2IsT0FBT1k7SUFDVCxHQUFHLENBQUM7QUFDSixJQUFJQyxZQUFZLENBQUNDLE9BQU9YLE9BQU9IO0lBQzdCLElBQUllLElBQUlDLElBQUlDO0lBQ1osT0FBTyxDQUFDQSxLQUFLLENBQUNELEtBQUssQ0FBQ0QsS0FBS0QsTUFBTUksUUFBUSxLQUFLLE9BQU8sS0FBSyxJQUFJSCxFQUFFLENBQUMsR0FBWWYsT0FBVEcsT0FBTSxLQUFTLE9BQU5ILE9BQVEsS0FBSyxPQUFPLEtBQUssSUFBSWdCLEdBQUdHLE1BQU0sS0FBSyxPQUFPRixLQUFLakI7QUFDcEk7QUFnQkUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjaGFrcmEtdWkvdXRpbHMvZGlzdC9jaHVuay1ZVFEzWFozVC5tanM/NTg4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvb2JqZWN0LnRzXG5pbXBvcnQgeyBkZWZhdWx0IGFzIGRlZmF1bHQyIH0gZnJvbSBcImxvZGFzaC5tZXJnZXdpdGhcIjtcbmZ1bmN0aW9uIG9taXQob2JqZWN0LCBrZXlzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmIChrZXlzLmluY2x1ZGVzKGtleSkpXG4gICAgICByZXR1cm47XG4gICAgcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwaWNrKG9iamVjdCwga2V5cykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAga2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gc3BsaXQob2JqZWN0LCBrZXlzKSB7XG4gIGNvbnN0IHBpY2tlZCA9IHt9O1xuICBjb25zdCBvbWl0dGVkID0ge307XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKGtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgcGlja2VkW2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgb21pdHRlZFtrZXldID0gb2JqZWN0W2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtwaWNrZWQsIG9taXR0ZWRdO1xufVxuZnVuY3Rpb24gZ2V0KG9iaiwgcGF0aCwgZmFsbGJhY2ssIGluZGV4KSB7XG4gIGNvbnN0IGtleSA9IHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiID8gcGF0aC5zcGxpdChcIi5cIikgOiBbcGF0aF07XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGtleS5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBpZiAoIW9iailcbiAgICAgIGJyZWFrO1xuICAgIG9iaiA9IG9ialtrZXlbaW5kZXhdXTtcbiAgfVxuICByZXR1cm4gb2JqID09PSB2b2lkIDAgPyBmYWxsYmFjayA6IG9iajtcbn1cbnZhciBtZW1vaXplID0gKGZuKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IG1lbW9pemVkRm4gPSAob2JqLCBwYXRoLCBmYWxsYmFjaywgaW5kZXgpID0+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIGZuKG9iaiwgcGF0aCwgZmFsbGJhY2spO1xuICAgIH1cbiAgICBpZiAoIWNhY2hlLmhhcyhvYmopKSB7XG4gICAgICBjYWNoZS5zZXQob2JqLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgICB9XG4gICAgY29uc3QgbWFwID0gY2FjaGUuZ2V0KG9iaik7XG4gICAgaWYgKG1hcC5oYXMocGF0aCkpIHtcbiAgICAgIHJldHVybiBtYXAuZ2V0KHBhdGgpO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IGZuKG9iaiwgcGF0aCwgZmFsbGJhY2ssIGluZGV4KTtcbiAgICBtYXAuc2V0KHBhdGgsIHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG4gIHJldHVybiBtZW1vaXplZEZuO1xufTtcbnZhciBtZW1vaXplZEdldCA9IG1lbW9pemUoZ2V0KTtcbmZ1bmN0aW9uIGdldFdpdGhEZWZhdWx0KHBhdGgsIHNjYWxlKSB7XG4gIHJldHVybiBtZW1vaXplZEdldChzY2FsZSwgcGF0aCwgcGF0aCk7XG59XG5mdW5jdGlvbiBvYmplY3RGaWx0ZXIob2JqZWN0LCBmbikge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgIGNvbnN0IHNob3VsZFBhc3MgPSBmbih2YWx1ZSwga2V5LCBvYmplY3QpO1xuICAgIGlmIChzaG91bGRQYXNzKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG52YXIgZmlsdGVyVW5kZWZpbmVkID0gKG9iamVjdCkgPT4gb2JqZWN0RmlsdGVyKG9iamVjdCwgKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHZhbCAhPT0gdm9pZCAwKTtcbnZhciBvYmplY3RLZXlzID0gKG9iaikgPT4gT2JqZWN0LmtleXMob2JqKTtcbnZhciBmcm9tRW50cmllcyA9IChlbnRyaWVzKSA9PiBlbnRyaWVzLnJlZHVjZSgoY2FycnksIFtrZXksIHZhbHVlXSkgPT4ge1xuICBjYXJyeVtrZXldID0gdmFsdWU7XG4gIHJldHVybiBjYXJyeTtcbn0sIHt9KTtcbnZhciBnZXRDU1NWYXIgPSAodGhlbWUsIHNjYWxlLCB2YWx1ZSkgPT4ge1xuICB2YXIgX2EsIF9iLCBfYztcbiAgcmV0dXJuIChfYyA9IChfYiA9IChfYSA9IHRoZW1lLl9fY3NzTWFwKSA9PSBudWxsID8gdm9pZCAwIDogX2FbYCR7c2NhbGV9LiR7dmFsdWV9YF0pID09IG51bGwgPyB2b2lkIDAgOiBfYi52YXJSZWYpICE9IG51bGwgPyBfYyA6IHZhbHVlO1xufTtcblxuZXhwb3J0IHtcbiAgb21pdCxcbiAgcGljayxcbiAgc3BsaXQsXG4gIGdldCxcbiAgbWVtb2l6ZSxcbiAgbWVtb2l6ZWRHZXQsXG4gIGdldFdpdGhEZWZhdWx0LFxuICBvYmplY3RGaWx0ZXIsXG4gIGZpbHRlclVuZGVmaW5lZCxcbiAgb2JqZWN0S2V5cyxcbiAgZnJvbUVudHJpZXMsXG4gIGdldENTU1ZhcixcbiAgZGVmYXVsdDIgYXMgZGVmYXVsdFxufTtcbiJdLCJuYW1lcyI6WyJkZWZhdWx0IiwiZGVmYXVsdDIiLCJvbWl0Iiwib2JqZWN0Iiwia2V5cyIsInJlc3VsdCIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJpbmNsdWRlcyIsInBpY2siLCJzcGxpdCIsInBpY2tlZCIsIm9taXR0ZWQiLCJnZXQiLCJvYmoiLCJwYXRoIiwiZmFsbGJhY2siLCJpbmRleCIsImxlbmd0aCIsIm1lbW9pemUiLCJmbiIsImNhY2hlIiwiV2Vha01hcCIsIm1lbW9pemVkRm4iLCJoYXMiLCJzZXQiLCJNYXAiLCJtYXAiLCJ2YWx1ZSIsIm1lbW9pemVkR2V0IiwiZ2V0V2l0aERlZmF1bHQiLCJzY2FsZSIsIm9iamVjdEZpbHRlciIsInNob3VsZFBhc3MiLCJmaWx0ZXJVbmRlZmluZWQiLCJ2YWwiLCJvYmplY3RLZXlzIiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwicmVkdWNlIiwiY2FycnkiLCJnZXRDU1NWYXIiLCJ0aGVtZSIsIl9hIiwiX2IiLCJfYyIsIl9fY3NzTWFwIiwidmFyUmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveElements: function() { return /* binding */ resolveElements; }\n/* harmony export */ });\n/* harmony import */ var _utils_errors_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/errors.mjs */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n\nfunction resolveElements(elements, scope, selectorCache) {\n    var _a;\n    if (typeof elements === \"string\") {\n        let root = document;\n        if (scope) {\n            (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_0__.invariant)(Boolean(scope.current), \"Scope provided, but no element detected.\");\n            root = scope.current;\n        }\n        if (selectorCache) {\n            (_a = selectorCache[elements]) !== null && _a !== void 0 ? _a : selectorCache[elements] = root.querySelectorAll(elements);\n            elements = selectorCache[elements];\n        } else {\n            elements = root.querySelectorAll(elements);\n        }\n    } else if (elements instanceof Element) {\n        elements = [\n            elements\n        ];\n    }\n    /**\n     * Return an empty array\n     */ return Array.from(elements || []);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9yZXNvbHZlLWVsZW1lbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNEO0FBRXRELFNBQVNDLGdCQUFnQkMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLGFBQWE7SUFDbkQsSUFBSUM7SUFDSixJQUFJLE9BQU9ILGFBQWEsVUFBVTtRQUM5QixJQUFJSSxPQUFPQztRQUNYLElBQUlKLE9BQU87WUFDUEgsNERBQVNBLENBQUNRLFFBQVFMLE1BQU1NLE9BQU8sR0FBRztZQUNsQ0gsT0FBT0gsTUFBTU0sT0FBTztRQUN4QjtRQUNBLElBQUlMLGVBQWU7WUFDZEMsQ0FBQUEsS0FBS0QsYUFBYSxDQUFDRixTQUFTLE1BQU0sUUFBUUcsT0FBTyxLQUFLLElBQUlBLEtBQU1ELGFBQWEsQ0FBQ0YsU0FBUyxHQUFHSSxLQUFLSSxnQkFBZ0IsQ0FBQ1I7WUFDakhBLFdBQVdFLGFBQWEsQ0FBQ0YsU0FBUztRQUN0QyxPQUNLO1lBQ0RBLFdBQVdJLEtBQUtJLGdCQUFnQixDQUFDUjtRQUNyQztJQUNKLE9BQ0ssSUFBSUEsb0JBQW9CUyxTQUFTO1FBQ2xDVCxXQUFXO1lBQUNBO1NBQVM7SUFDekI7SUFDQTs7S0FFQyxHQUNELE9BQU9VLE1BQU1DLElBQUksQ0FBQ1gsWUFBWSxFQUFFO0FBQ3BDO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9yZXNvbHZlLWVsZW1lbnQubWpzP2Y5NDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZXJyb3JzLm1qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVFbGVtZW50cyhlbGVtZW50cywgc2NvcGUsIHNlbGVjdG9yQ2FjaGUpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50cyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBsZXQgcm9vdCA9IGRvY3VtZW50O1xuICAgICAgICBpZiAoc2NvcGUpIHtcbiAgICAgICAgICAgIGludmFyaWFudChCb29sZWFuKHNjb3BlLmN1cnJlbnQpLCBcIlNjb3BlIHByb3ZpZGVkLCBidXQgbm8gZWxlbWVudCBkZXRlY3RlZC5cIik7XG4gICAgICAgICAgICByb290ID0gc2NvcGUuY3VycmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0b3JDYWNoZSkge1xuICAgICAgICAgICAgKF9hID0gc2VsZWN0b3JDYWNoZVtlbGVtZW50c10pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChzZWxlY3RvckNhY2hlW2VsZW1lbnRzXSA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChlbGVtZW50cykpO1xuICAgICAgICAgICAgZWxlbWVudHMgPSBzZWxlY3RvckNhY2hlW2VsZW1lbnRzXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnRzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChlbGVtZW50cyBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYW4gZW1wdHkgYXJyYXlcbiAgICAgKi9cbiAgICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50cyB8fCBbXSk7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVFbGVtZW50cyB9O1xuIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlc29sdmVFbGVtZW50cyIsImVsZW1lbnRzIiwic2NvcGUiLCJzZWxlY3RvckNhY2hlIiwiX2EiLCJyb290IiwiZG9jdW1lbnQiLCJCb29sZWFuIiwiY3VycmVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJFbGVtZW50IiwiQXJyYXkiLCJmcm9tIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inView: function() { return /* binding */ inView; }\n/* harmony export */ });\n/* harmony import */ var _utils_resolve_element_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resolve-element.mjs */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs\");\n\nconst thresholds = {\n    some: 0,\n    all: 1\n};\nfunction inView(elementOrSelector, onStart) {\n    let { root, margin: rootMargin, amount = \"some\" } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const elements = (0,_utils_resolve_element_mjs__WEBPACK_IMPORTED_MODULE_0__.resolveElements)(elementOrSelector);\n    const activeIntersections = new WeakMap();\n    const onIntersectionChange = (entries)=>{\n        entries.forEach((entry)=>{\n            const onEnd = activeIntersections.get(entry.target);\n            /**\n             * If there's no change to the intersection, we don't need to\n             * do anything here.\n             */ if (entry.isIntersecting === Boolean(onEnd)) return;\n            if (entry.isIntersecting) {\n                const newOnEnd = onStart(entry);\n                if (typeof newOnEnd === \"function\") {\n                    activeIntersections.set(entry.target, newOnEnd);\n                } else {\n                    observer.unobserve(entry.target);\n                }\n            } else if (onEnd) {\n                onEnd(entry);\n                activeIntersections.delete(entry.target);\n            }\n        });\n    };\n    const observer = new IntersectionObserver(onIntersectionChange, {\n        root,\n        rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholds[amount]\n    });\n    elements.forEach((element)=>observer.observe(element));\n    return ()=>observer.disconnect();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92aWV3cG9ydC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0Q7QUFFL0QsTUFBTUMsYUFBYTtJQUNmQyxNQUFNO0lBQ05DLEtBQUs7QUFDVDtBQUNBLFNBQVNDLE9BQU9DLGlCQUFpQixFQUFFQyxPQUFPO1FBQUUsRUFBRUMsSUFBSSxFQUFFQyxRQUFRQyxVQUFVLEVBQUVDLFNBQVMsTUFBTSxFQUFFLEdBQTdDLGlFQUFnRCxDQUFDO0lBQ3pGLE1BQU1DLFdBQVdYLDJFQUFlQSxDQUFDSztJQUNqQyxNQUFNTyxzQkFBc0IsSUFBSUM7SUFDaEMsTUFBTUMsdUJBQXVCLENBQUNDO1FBQzFCQSxRQUFRQyxPQUFPLENBQUMsQ0FBQ0M7WUFDYixNQUFNQyxRQUFRTixvQkFBb0JPLEdBQUcsQ0FBQ0YsTUFBTUcsTUFBTTtZQUNsRDs7O2FBR0MsR0FDRCxJQUFJSCxNQUFNSSxjQUFjLEtBQUtDLFFBQVFKLFFBQ2pDO1lBQ0osSUFBSUQsTUFBTUksY0FBYyxFQUFFO2dCQUN0QixNQUFNRSxXQUFXakIsUUFBUVc7Z0JBQ3pCLElBQUksT0FBT00sYUFBYSxZQUFZO29CQUNoQ1gsb0JBQW9CWSxHQUFHLENBQUNQLE1BQU1HLE1BQU0sRUFBRUc7Z0JBQzFDLE9BQ0s7b0JBQ0RFLFNBQVNDLFNBQVMsQ0FBQ1QsTUFBTUcsTUFBTTtnQkFDbkM7WUFDSixPQUNLLElBQUlGLE9BQU87Z0JBQ1pBLE1BQU1EO2dCQUNOTCxvQkFBb0JlLE1BQU0sQ0FBQ1YsTUFBTUcsTUFBTTtZQUMzQztRQUNKO0lBQ0o7SUFDQSxNQUFNSyxXQUFXLElBQUlHLHFCQUFxQmQsc0JBQXNCO1FBQzVEUDtRQUNBRTtRQUNBb0IsV0FBVyxPQUFPbkIsV0FBVyxXQUFXQSxTQUFTVCxVQUFVLENBQUNTLE9BQU87SUFDdkU7SUFDQUMsU0FBU0ssT0FBTyxDQUFDLENBQUNjLFVBQVlMLFNBQVNNLE9BQU8sQ0FBQ0Q7SUFDL0MsT0FBTyxJQUFNTCxTQUFTTyxVQUFVO0FBQ3BDO0FBRWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92aWV3cG9ydC9pbmRleC5tanM/Y2M5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlRWxlbWVudHMgfSBmcm9tICcuLi91dGlscy9yZXNvbHZlLWVsZW1lbnQubWpzJztcblxuY29uc3QgdGhyZXNob2xkcyA9IHtcbiAgICBzb21lOiAwLFxuICAgIGFsbDogMSxcbn07XG5mdW5jdGlvbiBpblZpZXcoZWxlbWVudE9yU2VsZWN0b3IsIG9uU3RhcnQsIHsgcm9vdCwgbWFyZ2luOiByb290TWFyZ2luLCBhbW91bnQgPSBcInNvbWVcIiB9ID0ge30pIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IHJlc29sdmVFbGVtZW50cyhlbGVtZW50T3JTZWxlY3Rvcik7XG4gICAgY29uc3QgYWN0aXZlSW50ZXJzZWN0aW9ucyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgY29uc3Qgb25JbnRlcnNlY3Rpb25DaGFuZ2UgPSAoZW50cmllcykgPT4ge1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvbkVuZCA9IGFjdGl2ZUludGVyc2VjdGlvbnMuZ2V0KGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZXJlJ3Mgbm8gY2hhbmdlIHRvIHRoZSBpbnRlcnNlY3Rpb24sIHdlIGRvbid0IG5lZWQgdG9cbiAgICAgICAgICAgICAqIGRvIGFueXRoaW5nIGhlcmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZyA9PT0gQm9vbGVhbihvbkVuZCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3T25FbmQgPSBvblN0YXJ0KGVudHJ5KTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5ld09uRW5kID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlSW50ZXJzZWN0aW9ucy5zZXQoZW50cnkudGFyZ2V0LCBuZXdPbkVuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZW50cnkudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvbkVuZCkge1xuICAgICAgICAgICAgICAgIG9uRW5kKGVudHJ5KTtcbiAgICAgICAgICAgICAgICBhY3RpdmVJbnRlcnNlY3Rpb25zLmRlbGV0ZShlbnRyeS50YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKG9uSW50ZXJzZWN0aW9uQ2hhbmdlLCB7XG4gICAgICAgIHJvb3QsXG4gICAgICAgIHJvb3RNYXJnaW4sXG4gICAgICAgIHRocmVzaG9sZDogdHlwZW9mIGFtb3VudCA9PT0gXCJudW1iZXJcIiA/IGFtb3VudCA6IHRocmVzaG9sZHNbYW1vdW50XSxcbiAgICB9KTtcbiAgICBlbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpKTtcbiAgICByZXR1cm4gKCkgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xufVxuXG5leHBvcnQgeyBpblZpZXcgfTtcbiJdLCJuYW1lcyI6WyJyZXNvbHZlRWxlbWVudHMiLCJ0aHJlc2hvbGRzIiwic29tZSIsImFsbCIsImluVmlldyIsImVsZW1lbnRPclNlbGVjdG9yIiwib25TdGFydCIsInJvb3QiLCJtYXJnaW4iLCJyb290TWFyZ2luIiwiYW1vdW50IiwiZWxlbWVudHMiLCJhY3RpdmVJbnRlcnNlY3Rpb25zIiwiV2Vha01hcCIsIm9uSW50ZXJzZWN0aW9uQ2hhbmdlIiwiZW50cmllcyIsImZvckVhY2giLCJlbnRyeSIsIm9uRW5kIiwiZ2V0IiwidGFyZ2V0IiwiaXNJbnRlcnNlY3RpbmciLCJCb29sZWFuIiwibmV3T25FbmQiLCJzZXQiLCJvYnNlcnZlciIsInVub2JzZXJ2ZSIsImRlbGV0ZSIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwidGhyZXNob2xkIiwiZWxlbWVudCIsIm9ic2VydmUiLCJkaXNjb25uZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/errors.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/errors.mjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invariant: function() { return /* binding */ invariant; },\n/* harmony export */   warning: function() { return /* binding */ warning; }\n/* harmony export */ });\n/* harmony import */ var _noop_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noop.mjs */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n\nlet warning = _noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;\nlet invariant = _noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;\nif (true) {\n    warning = (check, message)=>{\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message)=>{\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvZXJyb3JzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0M7QUFFbEMsSUFBSUMsVUFBVUQsMkNBQUlBO0FBQ2xCLElBQUlFLFlBQVlGLDJDQUFJQTtBQUNwQixJQUFJRyxJQUFxQyxFQUFFO0lBQ3ZDRixVQUFVLENBQUNHLE9BQU9DO1FBQ2QsSUFBSSxDQUFDRCxTQUFTLE9BQU9FLFlBQVksYUFBYTtZQUMxQ0EsUUFBUUMsSUFBSSxDQUFDRjtRQUNqQjtJQUNKO0lBQ0FILFlBQVksQ0FBQ0UsT0FBT0M7UUFDaEIsSUFBSSxDQUFDRCxPQUFPO1lBQ1IsTUFBTSxJQUFJSSxNQUFNSDtRQUNwQjtJQUNKO0FBQ0o7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9lcnJvcnMubWpzPzgzZDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vbm9vcC5tanMnO1xuXG5sZXQgd2FybmluZyA9IG5vb3A7XG5sZXQgaW52YXJpYW50ID0gbm9vcDtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB3YXJuaW5nID0gKGNoZWNrLCBtZXNzYWdlKSA9PiB7XG4gICAgICAgIGlmICghY2hlY2sgJiYgdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaW52YXJpYW50ID0gKGNoZWNrLCBtZXNzYWdlKSA9PiB7XG4gICAgICAgIGlmICghY2hlY2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCB7IGludmFyaWFudCwgd2FybmluZyB9O1xuIl0sIm5hbWVzIjpbIm5vb3AiLCJ3YXJuaW5nIiwiaW52YXJpYW50IiwicHJvY2VzcyIsImNoZWNrIiwibWVzc2FnZSIsImNvbnNvbGUiLCJ3YXJuIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/errors.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/noop.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/noop.mjs ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   noop: function() { return /* binding */ noop; }\n/* harmony export */ });\nconst noop = (any)=>any;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvbm9vcC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLE9BQU8sQ0FBQ0MsTUFBUUE7QUFFTiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL25vb3AubWpzPzkyZTIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgbm9vcCA9IChhbnkpID0+IGFueTtcblxuZXhwb3J0IHsgbm9vcCB9O1xuIl0sIm5hbWVzIjpbIm5vb3AiLCJhbnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/noop.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/use-in-view.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-in-view.mjs ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInView: function() { return /* binding */ useInView; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _render_dom_viewport_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../render/dom/viewport/index.mjs */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs\");\nvar _s = $RefreshSig$();\n\n\nfunction useInView(ref) {\n    let { root, margin, amount, once = false } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    _s();\n    const [isInView, setInView] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ref.current || once && isInView) return;\n        const onEnter = ()=>{\n            setInView(true);\n            return once ? undefined : ()=>setInView(false);\n        };\n        const options = {\n            root: root && root.current || undefined,\n            margin,\n            amount\n        };\n        return (0,_render_dom_viewport_index_mjs__WEBPACK_IMPORTED_MODULE_1__.inView)(ref.current, onEnter, options);\n    }, [\n        root,\n        ref,\n        margin,\n        once,\n        amount\n    ]);\n    return isInView;\n}\n_s(useInView, \"E7M6WKi+YUjygLFuCIIecspm+hc=\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvdXNlLWluLXZpZXcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDYztBQUUxRCxTQUFTRyxVQUFVQyxHQUFHO1FBQUUsRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxLQUFLLEVBQUUsR0FBdEMsaUVBQXlDLENBQUM7O0lBQzlELE1BQU0sQ0FBQ0MsVUFBVUMsVUFBVSxHQUFHViwrQ0FBUUEsQ0FBQztJQUN2Q0MsZ0RBQVNBLENBQUM7UUFDTixJQUFJLENBQUNHLElBQUlPLE9BQU8sSUFBS0gsUUFBUUMsVUFDekI7UUFDSixNQUFNRyxVQUFVO1lBQ1pGLFVBQVU7WUFDVixPQUFPRixPQUFPSyxZQUFZLElBQU1ILFVBQVU7UUFDOUM7UUFDQSxNQUFNSSxVQUFVO1lBQ1pULE1BQU0sUUFBU0EsS0FBS00sT0FBTyxJQUFLRTtZQUNoQ1A7WUFDQUM7UUFDSjtRQUNBLE9BQU9MLHNFQUFNQSxDQUFDRSxJQUFJTyxPQUFPLEVBQUVDLFNBQVNFO0lBQ3hDLEdBQUc7UUFBQ1Q7UUFBTUQ7UUFBS0U7UUFBUUU7UUFBTUQ7S0FBTztJQUNwQyxPQUFPRTtBQUNYO0dBakJTTjtBQW1CWSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pbi12aWV3Lm1qcz85NGM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpblZpZXcgfSBmcm9tICcuLi9yZW5kZXIvZG9tL3ZpZXdwb3J0L2luZGV4Lm1qcyc7XG5cbmZ1bmN0aW9uIHVzZUluVmlldyhyZWYsIHsgcm9vdCwgbWFyZ2luLCBhbW91bnQsIG9uY2UgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBjb25zdCBbaXNJblZpZXcsIHNldEluVmlld10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFyZWYuY3VycmVudCB8fCAob25jZSAmJiBpc0luVmlldykpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IG9uRW50ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBzZXRJblZpZXcodHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gb25jZSA/IHVuZGVmaW5lZCA6ICgpID0+IHNldEluVmlldyhmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICByb290OiAocm9vdCAmJiByb290LmN1cnJlbnQpIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG1hcmdpbixcbiAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGluVmlldyhyZWYuY3VycmVudCwgb25FbnRlciwgb3B0aW9ucyk7XG4gICAgfSwgW3Jvb3QsIHJlZiwgbWFyZ2luLCBvbmNlLCBhbW91bnRdKTtcbiAgICByZXR1cm4gaXNJblZpZXc7XG59XG5cbmV4cG9ydCB7IHVzZUluVmlldyB9O1xuIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiaW5WaWV3IiwidXNlSW5WaWV3IiwicmVmIiwicm9vdCIsIm1hcmdpbiIsImFtb3VudCIsIm9uY2UiLCJpc0luVmlldyIsInNldEluVmlldyIsImN1cnJlbnQiLCJvbkVudGVyIiwidW5kZWZpbmVkIiwib3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/use-in-view.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/stylis/src/Enum.js":
/*!*****************************************!*\
  !*** ./node_modules/stylis/src/Enum.js ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CHARSET: function() { return /* binding */ CHARSET; },\n/* harmony export */   COMMENT: function() { return /* binding */ COMMENT; },\n/* harmony export */   COUNTER_STYLE: function() { return /* binding */ COUNTER_STYLE; },\n/* harmony export */   DECLARATION: function() { return /* binding */ DECLARATION; },\n/* harmony export */   DOCUMENT: function() { return /* binding */ DOCUMENT; },\n/* harmony export */   FONT_FACE: function() { return /* binding */ FONT_FACE; },\n/* harmony export */   FONT_FEATURE_VALUES: function() { return /* binding */ FONT_FEATURE_VALUES; },\n/* harmony export */   IMPORT: function() { return /* binding */ IMPORT; },\n/* harmony export */   KEYFRAMES: function() { return /* binding */ KEYFRAMES; },\n/* harmony export */   LAYER: function() { return /* binding */ LAYER; },\n/* harmony export */   MEDIA: function() { return /* binding */ MEDIA; },\n/* harmony export */   MOZ: function() { return /* binding */ MOZ; },\n/* harmony export */   MS: function() { return /* binding */ MS; },\n/* harmony export */   NAMESPACE: function() { return /* binding */ NAMESPACE; },\n/* harmony export */   PAGE: function() { return /* binding */ PAGE; },\n/* harmony export */   RULESET: function() { return /* binding */ RULESET; },\n/* harmony export */   SUPPORTS: function() { return /* binding */ SUPPORTS; },\n/* harmony export */   VIEWPORT: function() { return /* binding */ VIEWPORT; },\n/* harmony export */   WEBKIT: function() { return /* binding */ WEBKIT; }\n/* harmony export */ });\nvar MS = \"-ms-\";\nvar MOZ = \"-moz-\";\nvar WEBKIT = \"-webkit-\";\nvar COMMENT = \"comm\";\nvar RULESET = \"rule\";\nvar DECLARATION = \"decl\";\nvar PAGE = \"@page\";\nvar MEDIA = \"@media\";\nvar IMPORT = \"@import\";\nvar CHARSET = \"@charset\";\nvar VIEWPORT = \"@viewport\";\nvar SUPPORTS = \"@supports\";\nvar DOCUMENT = \"@document\";\nvar NAMESPACE = \"@namespace\";\nvar KEYFRAMES = \"@keyframes\";\nvar FONT_FACE = \"@font-face\";\nvar COUNTER_STYLE = \"@counter-style\";\nvar FONT_FEATURE_VALUES = \"@font-feature-values\";\nvar LAYER = \"@layer\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL0VudW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFPLElBQUlBLEtBQUssT0FBTTtBQUNmLElBQUlDLE1BQU0sUUFBTztBQUNqQixJQUFJQyxTQUFTLFdBQVU7QUFFdkIsSUFBSUMsVUFBVSxPQUFNO0FBQ3BCLElBQUlDLFVBQVUsT0FBTTtBQUNwQixJQUFJQyxjQUFjLE9BQU07QUFFeEIsSUFBSUMsT0FBTyxRQUFPO0FBQ2xCLElBQUlDLFFBQVEsU0FBUTtBQUNwQixJQUFJQyxTQUFTLFVBQVM7QUFDdEIsSUFBSUMsVUFBVSxXQUFVO0FBQ3hCLElBQUlDLFdBQVcsWUFBVztBQUMxQixJQUFJQyxXQUFXLFlBQVc7QUFDMUIsSUFBSUMsV0FBVyxZQUFXO0FBQzFCLElBQUlDLFlBQVksYUFBWTtBQUM1QixJQUFJQyxZQUFZLGFBQVk7QUFDNUIsSUFBSUMsWUFBWSxhQUFZO0FBQzVCLElBQUlDLGdCQUFnQixpQkFBZ0I7QUFDcEMsSUFBSUMsc0JBQXNCLHVCQUFzQjtBQUNoRCxJQUFJQyxRQUFRLFNBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvRW51bS5qcz8zM2YyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbmV4cG9ydCB2YXIgTEFZRVIgPSAnQGxheWVyJ1xuIl0sIm5hbWVzIjpbIk1TIiwiTU9aIiwiV0VCS0lUIiwiQ09NTUVOVCIsIlJVTEVTRVQiLCJERUNMQVJBVElPTiIsIlBBR0UiLCJNRURJQSIsIklNUE9SVCIsIkNIQVJTRVQiLCJWSUVXUE9SVCIsIlNVUFBPUlRTIiwiRE9DVU1FTlQiLCJOQU1FU1BBQ0UiLCJLRVlGUkFNRVMiLCJGT05UX0ZBQ0UiLCJDT1VOVEVSX1NUWUxFIiwiRk9OVF9GRUFUVVJFX1ZBTFVFUyIsIkxBWUVSIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/stylis/src/Enum.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/stylis/src/Middleware.js":
/*!***********************************************!*\
  !*** ./node_modules/stylis/src/Middleware.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   middleware: function() { return /* binding */ middleware; },\n/* harmony export */   namespace: function() { return /* binding */ namespace; },\n/* harmony export */   prefixer: function() { return /* binding */ prefixer; },\n/* harmony export */   rulesheet: function() { return /* binding */ rulesheet; }\n/* harmony export */ });\n/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Enum.js */ \"(app-pages-browser)/./node_modules/stylis/src/Enum.js\");\n/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ \"(app-pages-browser)/./node_modules/stylis/src/Utility.js\");\n/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Tokenizer.js */ \"(app-pages-browser)/./node_modules/stylis/src/Tokenizer.js\");\n/* harmony import */ var _Serializer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Serializer.js */ \"(app-pages-browser)/./node_modules/stylis/src/Serializer.js\");\n/* harmony import */ var _Prefixer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Prefixer.js */ \"(app-pages-browser)/./node_modules/stylis/src/Prefixer.js\");\n\n\n\n\n\n/**\n * @param {function[]} collection\n * @return {function}\n */ function middleware(collection) {\n    var length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.sizeof)(collection);\n    return function(element, index, children, callback) {\n        var output = \"\";\n        for(var i = 0; i < length; i++)output += collection[i](element, index, children, callback) || \"\";\n        return output;\n    };\n}\n/**\n * @param {function} callback\n * @return {function}\n */ function rulesheet(callback) {\n    return function(element) {\n        if (!element.root) {\n            if (element = element.return) callback(element);\n        }\n    };\n}\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n * @param {function} callback\n */ function prefixer(element, index, children, callback) {\n    if (element.length > -1) {\n        if (!element.return) switch(element.type){\n            case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.DECLARATION:\n                element.return = (0,_Prefixer_js__WEBPACK_IMPORTED_MODULE_2__.prefix)(element.value, element.length, children);\n                return;\n            case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.KEYFRAMES:\n                return (0,_Serializer_js__WEBPACK_IMPORTED_MODULE_3__.serialize)([\n                    (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {\n                        value: (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(element.value, \"@\", \"@\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT)\n                    })\n                ], callback);\n            case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.RULESET:\n                if (element.length) return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.combine)(element.props, function(value) {\n                    switch((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(value, /(::plac\\w+|:read-\\w+)/)){\n                        // :read-(only|write)\n                        case \":read-only\":\n                        case \":read-write\":\n                            return (0,_Serializer_js__WEBPACK_IMPORTED_MODULE_3__.serialize)([\n                                (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {\n                                    props: [\n                                        (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /:(read-\\w+)/, \":\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + \"$1\")\n                                    ]\n                                })\n                            ], callback);\n                        // :placeholder\n                        case \"::placeholder\":\n                            return (0,_Serializer_js__WEBPACK_IMPORTED_MODULE_3__.serialize)([\n                                (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {\n                                    props: [\n                                        (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /:(plac\\w+)/, \":\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"input-$1\")\n                                    ]\n                                }),\n                                (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {\n                                    props: [\n                                        (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /:(plac\\w+)/, \":\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + \"$1\")\n                                    ]\n                                }),\n                                (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {\n                                    props: [\n                                        (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /:(plac\\w+)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"input-$1\")\n                                    ]\n                                })\n                            ], callback);\n                    }\n                    return \"\";\n                });\n        }\n    }\n}\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n */ function namespace(element) {\n    switch(element.type){\n        case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.RULESET:\n            element.props = element.props.map(function(value) {\n                return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.combine)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.tokenize)(value), function(value, index, children) {\n                    switch((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, 0)){\n                        // \\f\n                        case 12:\n                            return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.substr)(value, 1, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.strlen)(value));\n                        // \\0 ( + > ~\n                        case 0:\n                        case 40:\n                        case 43:\n                        case 62:\n                        case 126:\n                            return value;\n                        // :\n                        case 58:\n                            if (children[++index] === \"global\") children[index] = \"\", children[++index] = \"\\f\" + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.substr)(children[index], index = 1, -1);\n                        // \\s\n                        case 32:\n                            return index === 1 ? \"\" : value;\n                        default:\n                            switch(index){\n                                case 0:\n                                    element = value;\n                                    return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.sizeof)(children) > 1 ? \"\" : value;\n                                case index = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.sizeof)(children) - 1:\n                                case 2:\n                                    return index === 2 ? value + element + element : value + element;\n                                default:\n                                    return value;\n                            }\n                    }\n                });\n            });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/stylis/src/Middleware.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/stylis/src/Parser.js":
/*!*******************************************!*\
  !*** ./node_modules/stylis/src/Parser.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   comment: function() { return /* binding */ comment; },\n/* harmony export */   compile: function() { return /* binding */ compile; },\n/* harmony export */   declaration: function() { return /* binding */ declaration; },\n/* harmony export */   parse: function() { return /* binding */ parse; },\n/* harmony export */   ruleset: function() { return /* binding */ ruleset; }\n/* harmony export */ });\n/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Enum.js */ \"(app-pages-browser)/./node_modules/stylis/src/Enum.js\");\n/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utility.js */ \"(app-pages-browser)/./node_modules/stylis/src/Utility.js\");\n/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tokenizer.js */ \"(app-pages-browser)/./node_modules/stylis/src/Tokenizer.js\");\n\n\n\n/**\n * @param {string} value\n * @return {object[]}\n */ function compile(value) {\n    return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.dealloc)(parse(\"\", null, null, null, [\n        \"\"\n    ], value = (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.alloc)(value), 0, [\n        0\n    ], value));\n}\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {string[]} rule\n * @param {string[]} rules\n * @param {string[]} rulesets\n * @param {number[]} pseudo\n * @param {number[]} points\n * @param {string[]} declarations\n * @return {object}\n */ function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {\n    var index = 0;\n    var offset = 0;\n    var length = pseudo;\n    var atrule = 0;\n    var property = 0;\n    var previous = 0;\n    var variable = 1;\n    var scanning = 1;\n    var ampersand = 1;\n    var character = 0;\n    var type = \"\";\n    var props = rules;\n    var children = rulesets;\n    var reference = rule;\n    var characters = type;\n    while(scanning)switch(previous = character, character = (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.next)()){\n        // (\n        case 40:\n            if (previous != 108 && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.charat)(characters, length - 1) == 58) {\n                if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.indexof)(characters += (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.delimit)(character), \"&\", \"&\\f\"), \"&\\f\") != -1) ampersand = -1;\n                break;\n            }\n        // \" ' [\n        case 34:\n        case 39:\n        case 91:\n            characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.delimit)(character);\n            break;\n        // \\t \\n \\r \\s\n        case 9:\n        case 10:\n        case 13:\n        case 32:\n            characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.whitespace)(previous);\n            break;\n        // \\\n        case 92:\n            characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.escaping)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.caret)() - 1, 7);\n            continue;\n        // /\n        case 47:\n            switch((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)()){\n                case 42:\n                case 47:\n                    (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(comment((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.commenter)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.next)(), (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.caret)()), root, parent), declarations);\n                    break;\n                default:\n                    characters += \"/\";\n            }\n            break;\n        // {\n        case 123 * variable:\n            points[index++] = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) * ampersand;\n        // } ; \\0\n        case 125 * variable:\n        case 59:\n        case 0:\n            switch(character){\n                // \\0 }\n                case 0:\n                case 125:\n                    scanning = 0;\n                // ;\n                case 59 + offset:\n                    if (ampersand == -1) characters = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)(characters, /\\f/g, \"\");\n                    if (property > 0 && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) - length) (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(property > 32 ? declaration(characters + \";\", rule, parent, length - 1) : declaration((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)(characters, \" \", \"\") + \";\", rule, parent, length - 2), declarations);\n                    break;\n                // @ ;\n                case 59:\n                    characters += \";\";\n                // { rule/at-rule\n                default:\n                    (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);\n                    if (character === 123) if (offset === 0) parse(characters, root, reference, reference, props, rulesets, length, points, children);\n                    else switch(atrule === 99 && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.charat)(characters, 3) === 110 ? 100 : atrule){\n                        // d l m s\n                        case 100:\n                        case 108:\n                        case 109:\n                        case 115:\n                            parse(value, reference, reference, rule && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);\n                            break;\n                        default:\n                            parse(characters, reference, reference, reference, [\n                                \"\"\n                            ], children, 0, points, children);\n                    }\n            }\n            index = offset = property = 0, variable = ampersand = 1, type = characters = \"\", length = pseudo;\n            break;\n        // :\n        case 58:\n            length = 1 + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters), property = previous;\n        default:\n            if (variable < 1) {\n                if (character == 123) --variable;\n                else if (character == 125 && variable++ == 0 && (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.prev)() == 125) continue;\n            }\n            switch(characters += (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.from)(character), character * variable){\n                // &\n                case 38:\n                    ampersand = offset > 0 ? 1 : (characters += \"\\f\", -1);\n                    break;\n                // ,\n                case 44:\n                    points[index++] = ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) - 1) * ampersand, ampersand = 1;\n                    break;\n                // @\n                case 64:\n                    // -\n                    if ((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)() === 45) characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.delimit)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.next)());\n                    atrule = (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)(), offset = length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(type = characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.identifier)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.caret)())), character++;\n                    break;\n                // -\n                case 45:\n                    if (previous === 45 && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) == 2) variable = 0;\n            }\n    }\n    return rulesets;\n}\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} index\n * @param {number} offset\n * @param {string[]} rules\n * @param {number[]} points\n * @param {string} type\n * @param {string[]} props\n * @param {string[]} children\n * @param {number} length\n * @return {object}\n */ function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length) {\n    var post = offset - 1;\n    var rule = offset === 0 ? rules : [\n        \"\"\n    ];\n    var size = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.sizeof)(rule);\n    for(var i = 0, j = 0, k = 0; i < index; ++i)for(var x = 0, y = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, post + 1, post = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.abs)(j = points[i])), z = value; x < size; ++x)if (z = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.trim)(j > 0 ? rule[x] + \" \" + y : (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)(y, /&\\f/g, rule[x]))) props[k++] = z;\n    return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.node)(value, root, parent, offset === 0 ? _Enum_js__WEBPACK_IMPORTED_MODULE_2__.RULESET : type, props, children, length);\n}\n/**\n * @param {number} value\n * @param {object} root\n * @param {object?} parent\n * @return {object}\n */ function comment(value, root, parent) {\n    return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.node)(value, root, parent, _Enum_js__WEBPACK_IMPORTED_MODULE_2__.COMMENT, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.from)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.char)()), (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, 2, -2), 0);\n}\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} length\n * @return {object}\n */ function declaration(value, root, parent, length) {\n    return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.node)(value, root, parent, _Enum_js__WEBPACK_IMPORTED_MODULE_2__.DECLARATION, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, 0, length), (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, length + 1, -1), length);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/stylis/src/Parser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/stylis/src/Prefixer.js":
/*!*********************************************!*\
  !*** ./node_modules/stylis/src/Prefixer.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prefix: function() { return /* binding */ prefix; }\n/* harmony export */ });\n/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Enum.js */ \"(app-pages-browser)/./node_modules/stylis/src/Enum.js\");\n/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ \"(app-pages-browser)/./node_modules/stylis/src/Utility.js\");\n\n\n/**\n * @param {string} value\n * @param {number} length\n * @param {object[]} children\n * @return {string}\n */ function prefix(value, length, children) {\n    switch((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.hash)(value, length)){\n        // color-adjust\n        case 5103:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"print-\" + value + value;\n        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)\n        case 5737:\n        case 4201:\n        case 3177:\n        case 3433:\n        case 1641:\n        case 4457:\n        case 2921:\n        // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break\n        case 5572:\n        case 6356:\n        case 5844:\n        case 3191:\n        case 6645:\n        case 3005:\n        // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,\n        case 6391:\n        case 5879:\n        case 5623:\n        case 6135:\n        case 4599:\n        case 4855:\n        // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)\n        case 4215:\n        case 6389:\n        case 5109:\n        case 5365:\n        case 5621:\n        case 3829:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + value;\n        // tab-size\n        case 4789:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + value + value;\n        // appearance, user-select, transform, hyphens, text-size-adjust\n        case 5349:\n        case 4246:\n        case 4810:\n        case 6968:\n        case 2756:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + value + value;\n        // writing-mode\n        case 5936:\n            switch((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 11)){\n                // vertical-l(r)\n                case 114:\n                    return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /[svh]\\w+-[tblr]{2}/, \"tb\") + value;\n                // vertical-r(l)\n                case 108:\n                    return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /[svh]\\w+-[tblr]{2}/, \"tb-rl\") + value;\n                // horizontal(-)tb\n                case 45:\n                    return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /[svh]\\w+-[tblr]{2}/, \"lr\") + value;\n            }\n        // flex, flex-direction, scroll-snap-type, writing-mode\n        case 6828:\n        case 4268:\n        case 2903:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + value + value;\n        // order\n        case 6165:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"flex-\" + value + value;\n        // align-items\n        case 5187:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(\\w+).+(:[^]+)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"box-$1$2\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"flex-$1$2\") + value;\n        // align-self\n        case 5443:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"flex-item-\" + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /flex-|-self/g, \"\") + (!(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(value, /flex-|baseline/) ? _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"grid-row-\" + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /flex-|-self/g, \"\") : \"\") + value;\n        // align-content\n        case 4675:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"flex-line-pack\" + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /align-content|flex-|-self/g, \"\") + value;\n        // flex-shrink\n        case 5548:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"shrink\", \"negative\") + value;\n        // flex-basis\n        case 5292:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"basis\", \"preferred-size\") + value;\n        // flex-grow\n        case 6060:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"box-\" + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"-grow\", \"\") + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"grow\", \"positive\") + value;\n        // transition\n        case 4554:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /([^-])(transform)/g, \"$1\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"$2\") + value;\n        // cursor\n        case 6187:\n            return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(zoom-|grab)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"$1\"), /(image-set)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"$1\"), value, \"\") + value;\n        // background, background-image\n        case 5495:\n        case 3959:\n            return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(image-set\\([^]*)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"$1\" + \"$`$1\");\n        // justify-content\n        case 4968:\n            return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+:)(flex-)?(.*)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"box-pack:$3\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"flex-pack:$3\"), /s.+-b[^;]+/, \"justify\") + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + value;\n        // justify-self\n        case 4200:\n            if (!(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(value, /flex-|baseline/)) return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"grid-column-align\" + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.substr)(value, length) + value;\n            break;\n        // grid-template-(columns|rows)\n        case 2592:\n        case 3360:\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"template-\", \"\") + value;\n        // grid-(row|column)-start\n        case 4384:\n        case 3616:\n            if (children && children.some(function(element, index) {\n                return length = index, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(element.props, /grid-\\w+-end/);\n            })) {\n                return ~(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.indexof)(value + (children = children[length].value), \"span\") ? value : _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"-start\", \"\") + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"grid-row-span:\" + (~(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.indexof)(children, \"span\") ? (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(children, /\\d+/) : +(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(children, /\\d+/) - +(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(value, /\\d+/)) + \";\";\n            }\n            return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"-start\", \"\") + value;\n        // grid-(row|column)-end\n        case 4896:\n        case 4128:\n            return children && children.some(function(element) {\n                return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(element.props, /grid-\\w+-start/);\n            }) ? value : _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"-end\", \"-span\"), \"span \", \"\") + value;\n        // (margin|padding)-inline-(start|end)\n        case 4095:\n        case 3583:\n        case 4068:\n        case 2532:\n            return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+)-inline(.+)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"$1$2\") + value;\n        // (min|max)?(width|height|inline-size|block-size)\n        case 8116:\n        case 7059:\n        case 5753:\n        case 5535:\n        case 5445:\n        case 5701:\n        case 4933:\n        case 4677:\n        case 5533:\n        case 5789:\n        case 5021:\n        case 4765:\n            // stretch, max-content, min-content, fill-available\n            if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.strlen)(value) - 1 - length > 6) switch((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 1)){\n                // (m)ax-content, (m)in-content\n                case 109:\n                    // -\n                    if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 4) !== 45) break;\n                // (f)ill-available, (f)it-content\n                case 102:\n                    return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+:)(.+)-([^]+)/, \"$1\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"$2-$3\" + \"$1\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 3) == 108 ? \"$3\" : \"$2-$3\")) + value;\n                // (s)tretch\n                case 115:\n                    return ~(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.indexof)(value, \"stretch\") ? prefix((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"stretch\", \"fill-available\"), length, children) + value : value;\n            }\n            break;\n        // grid-(column|row)\n        case 5152:\n        case 5920:\n            return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+?):(\\d+)(\\s*\\/\\s*(span)?\\s*(\\d+))?(.*)/, function(_, a, b, c, d, e, f) {\n                return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + a + \":\" + b + f + (c ? _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + a + \"-span:\" + (d ? e : +e - +b) + f : \"\") + value;\n            });\n        // position: sticky\n        case 4949:\n            // stick(y)?\n            if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 6) === 121) return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \":\", \":\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT) + value;\n            break;\n        // display: (flex|inline-flex|grid|inline-grid)\n        case 6444:\n            switch((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, 14) === 45 ? 18 : 11)){\n                // (inline-)?fle(x)\n                case 120:\n                    return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+:)([^;\\s!]+)(;|(\\s+)?!.+)?/, \"$1\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, 14) === 45 ? \"inline-\" : \"\") + \"box$3\" + \"$1\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + \"$2$3\" + \"$1\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + \"$2box$3\") + value;\n                // (inline-)?gri(d)\n                case 100:\n                    return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \":\", \":\" + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS) + value;\n            }\n            break;\n        // scroll-margin, scroll-margin-(top|right|bottom|left)\n        case 5719:\n        case 2647:\n        case 2135:\n        case 3927:\n        case 2391:\n            return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, \"scroll-\", \"scroll-snap-\") + value;\n    }\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/stylis/src/Prefixer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/stylis/src/Serializer.js":
/*!***********************************************!*\
  !*** ./node_modules/stylis/src/Serializer.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serialize: function() { return /* binding */ serialize; },\n/* harmony export */   stringify: function() { return /* binding */ stringify; }\n/* harmony export */ });\n/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Enum.js */ \"(app-pages-browser)/./node_modules/stylis/src/Enum.js\");\n/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ \"(app-pages-browser)/./node_modules/stylis/src/Utility.js\");\n\n\n/**\n * @param {object[]} children\n * @param {function} callback\n * @return {string}\n */ function serialize(children, callback) {\n    var output = \"\";\n    var length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.sizeof)(children);\n    for(var i = 0; i < length; i++)output += callback(children[i], i, children, callback) || \"\";\n    return output;\n}\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n * @param {function} callback\n * @return {string}\n */ function stringify(element, index, children, callback) {\n    switch(element.type){\n        case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.LAYER:\n            if (element.children.length) break;\n        case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.IMPORT:\n        case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.DECLARATION:\n            return element.return = element.return || element.value;\n        case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.COMMENT:\n            return \"\";\n        case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.KEYFRAMES:\n            return element.return = element.value + \"{\" + serialize(element.children, callback) + \"}\";\n        case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.RULESET:\n            element.value = element.props.join(\",\");\n    }\n    return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.strlen)(children = serialize(element.children, callback)) ? element.return = element.value + \"{\" + children + \"}\" : \"\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1NlcmlhbGl6ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpRjtBQUN0QztBQUUzQzs7OztDQUlDLEdBQ00sU0FBU1EsVUFBV0MsUUFBUSxFQUFFQyxRQUFRO0lBQzVDLElBQUlDLFNBQVM7SUFDYixJQUFJQyxTQUFTTCxtREFBTUEsQ0FBQ0U7SUFFcEIsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlELFFBQVFDLElBQzNCRixVQUFVRCxTQUFTRCxRQUFRLENBQUNJLEVBQUUsRUFBRUEsR0FBR0osVUFBVUMsYUFBYTtJQUUzRCxPQUFPQztBQUNSO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU0csVUFBV0MsT0FBTyxFQUFFQyxLQUFLLEVBQUVQLFFBQVEsRUFBRUMsUUFBUTtJQUM1RCxPQUFRSyxRQUFRRSxJQUFJO1FBQ25CLEtBQUtoQiwyQ0FBS0E7WUFBRSxJQUFJYyxRQUFRTixRQUFRLENBQUNHLE1BQU0sRUFBRTtRQUN6QyxLQUFLWiw0Q0FBTUE7UUFBRSxLQUFLSSxpREFBV0E7WUFBRSxPQUFPVyxRQUFRRyxNQUFNLEdBQUdILFFBQVFHLE1BQU0sSUFBSUgsUUFBUUksS0FBSztRQUN0RixLQUFLakIsNkNBQU9BO1lBQUUsT0FBTztRQUNyQixLQUFLRywrQ0FBU0E7WUFBRSxPQUFPVSxRQUFRRyxNQUFNLEdBQUdILFFBQVFJLEtBQUssR0FBRyxNQUFNWCxVQUFVTyxRQUFRTixRQUFRLEVBQUVDLFlBQVk7UUFDdEcsS0FBS1AsNkNBQU9BO1lBQUVZLFFBQVFJLEtBQUssR0FBR0osUUFBUUssS0FBSyxDQUFDQyxJQUFJLENBQUM7SUFDbEQ7SUFFQSxPQUFPZixtREFBTUEsQ0FBQ0csV0FBV0QsVUFBVU8sUUFBUU4sUUFBUSxFQUFFQyxhQUFhSyxRQUFRRyxNQUFNLEdBQUdILFFBQVFJLEtBQUssR0FBRyxNQUFNVixXQUFXLE1BQU07QUFDM0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvU2VyaWFsaXplci5qcz9iMGViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SU1QT1JULCBMQVlFUiwgQ09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT04sIEtFWUZSQU1FU30gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHtzdHJsZW4sIHNpemVvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplIChjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0dmFyIG91dHB1dCA9ICcnXG5cdHZhciBsZW5ndGggPSBzaXplb2YoY2hpbGRyZW4pXG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRvdXRwdXQgKz0gY2FsbGJhY2soY2hpbGRyZW5baV0sIGksIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRyZXR1cm4gb3V0cHV0XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIExBWUVSOiBpZiAoZWxlbWVudC5jaGlsZHJlbi5sZW5ndGgpIGJyZWFrXG5cdFx0Y2FzZSBJTVBPUlQ6IGNhc2UgREVDTEFSQVRJT046IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQucmV0dXJuIHx8IGVsZW1lbnQudmFsdWVcblx0XHRjYXNlIENPTU1FTlQ6IHJldHVybiAnJ1xuXHRcdGNhc2UgS0VZRlJBTUVTOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSArICd9J1xuXHRcdGNhc2UgUlVMRVNFVDogZWxlbWVudC52YWx1ZSA9IGVsZW1lbnQucHJvcHMuam9pbignLCcpXG5cdH1cblxuXHRyZXR1cm4gc3RybGVuKGNoaWxkcmVuID0gc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSkgPyBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBjaGlsZHJlbiArICd9JyA6ICcnXG59XG4iXSwibmFtZXMiOlsiSU1QT1JUIiwiTEFZRVIiLCJDT01NRU5UIiwiUlVMRVNFVCIsIkRFQ0xBUkFUSU9OIiwiS0VZRlJBTUVTIiwic3RybGVuIiwic2l6ZW9mIiwic2VyaWFsaXplIiwiY2hpbGRyZW4iLCJjYWxsYmFjayIsIm91dHB1dCIsImxlbmd0aCIsImkiLCJzdHJpbmdpZnkiLCJlbGVtZW50IiwiaW5kZXgiLCJ0eXBlIiwicmV0dXJuIiwidmFsdWUiLCJwcm9wcyIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/stylis/src/Serializer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/stylis/src/Tokenizer.js":
/*!**********************************************!*\
  !*** ./node_modules/stylis/src/Tokenizer.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alloc: function() { return /* binding */ alloc; },\n/* harmony export */   caret: function() { return /* binding */ caret; },\n/* harmony export */   char: function() { return /* binding */ char; },\n/* harmony export */   character: function() { return /* binding */ character; },\n/* harmony export */   characters: function() { return /* binding */ characters; },\n/* harmony export */   column: function() { return /* binding */ column; },\n/* harmony export */   commenter: function() { return /* binding */ commenter; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   dealloc: function() { return /* binding */ dealloc; },\n/* harmony export */   delimit: function() { return /* binding */ delimit; },\n/* harmony export */   delimiter: function() { return /* binding */ delimiter; },\n/* harmony export */   escaping: function() { return /* binding */ escaping; },\n/* harmony export */   identifier: function() { return /* binding */ identifier; },\n/* harmony export */   length: function() { return /* binding */ length; },\n/* harmony export */   line: function() { return /* binding */ line; },\n/* harmony export */   next: function() { return /* binding */ next; },\n/* harmony export */   node: function() { return /* binding */ node; },\n/* harmony export */   peek: function() { return /* binding */ peek; },\n/* harmony export */   position: function() { return /* binding */ position; },\n/* harmony export */   prev: function() { return /* binding */ prev; },\n/* harmony export */   slice: function() { return /* binding */ slice; },\n/* harmony export */   token: function() { return /* binding */ token; },\n/* harmony export */   tokenize: function() { return /* binding */ tokenize; },\n/* harmony export */   tokenizer: function() { return /* binding */ tokenizer; },\n/* harmony export */   whitespace: function() { return /* binding */ whitespace; }\n/* harmony export */ });\n/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ \"(app-pages-browser)/./node_modules/stylis/src/Utility.js\");\n\nvar line = 1;\nvar column = 1;\nvar length = 0;\nvar position = 0;\nvar character = 0;\nvar characters = \"\";\n/**\n * @param {string} value\n * @param {object | null} root\n * @param {object | null} parent\n * @param {string} type\n * @param {string[] | string} props\n * @param {object[] | string} children\n * @param {number} length\n */ function node(value, root, parent, type, props, children, length) {\n    return {\n        value: value,\n        root: root,\n        parent: parent,\n        type: type,\n        props: props,\n        children: children,\n        line: line,\n        column: column,\n        length: length,\n        return: \"\"\n    };\n}\n/**\n * @param {object} root\n * @param {object} props\n * @return {object}\n */ function copy(root, props) {\n    return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.assign)(node(\"\", null, null, \"\", null, null, 0), root, {\n        length: -root.length\n    }, props);\n}\n/**\n * @return {number}\n */ function char() {\n    return character;\n}\n/**\n * @return {number}\n */ function prev() {\n    character = position > 0 ? (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(characters, --position) : 0;\n    if (column--, character === 10) column = 1, line--;\n    return character;\n}\n/**\n * @return {number}\n */ function next() {\n    character = position < length ? (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(characters, position++) : 0;\n    if (column++, character === 10) column = 1, line++;\n    return character;\n}\n/**\n * @return {number}\n */ function peek() {\n    return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(characters, position);\n}\n/**\n * @return {number}\n */ function caret() {\n    return position;\n}\n/**\n * @param {number} begin\n * @param {number} end\n * @return {string}\n */ function slice(begin, end) {\n    return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.substr)(characters, begin, end);\n}\n/**\n * @param {number} type\n * @return {number}\n */ function token(type) {\n    switch(type){\n        // \\0 \\t \\n \\r \\s whitespace token\n        case 0:\n        case 9:\n        case 10:\n        case 13:\n        case 32:\n            return 5;\n        // ! + , / > @ ~ isolate token\n        case 33:\n        case 43:\n        case 44:\n        case 47:\n        case 62:\n        case 64:\n        case 126:\n        // ; { } breakpoint token\n        case 59:\n        case 123:\n        case 125:\n            return 4;\n        // : accompanied token\n        case 58:\n            return 3;\n        // \" ' ( [ opening delimit token\n        case 34:\n        case 39:\n        case 40:\n        case 91:\n            return 2;\n        // ) ] closing delimit token\n        case 41:\n        case 93:\n            return 1;\n    }\n    return 0;\n}\n/**\n * @param {string} value\n * @return {any[]}\n */ function alloc(value) {\n    return line = column = 1, length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.strlen)(characters = value), position = 0, [];\n}\n/**\n * @param {any} value\n * @return {any}\n */ function dealloc(value) {\n    return characters = \"\", value;\n}\n/**\n * @param {number} type\n * @return {string}\n */ function delimit(type) {\n    return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.trim)(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));\n}\n/**\n * @param {string} value\n * @return {string[]}\n */ function tokenize(value) {\n    return dealloc(tokenizer(alloc(value)));\n}\n/**\n * @param {number} type\n * @return {string}\n */ function whitespace(type) {\n    while(character = peek())if (character < 33) next();\n    else break;\n    return token(type) > 2 || token(character) > 3 ? \"\" : \" \";\n}\n/**\n * @param {string[]} children\n * @return {string[]}\n */ function tokenizer(children) {\n    while(next())switch(token(character)){\n        case 0:\n            (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)(identifier(position - 1), children);\n            break;\n        case 2:\n            (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)(delimit(character), children);\n            break;\n        default:\n            (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.from)(character), children);\n    }\n    return children;\n}\n/**\n * @param {number} index\n * @param {number} count\n * @return {string}\n */ function escaping(index, count) {\n    while(--count && next())// not 0-9 A-F a-f\n    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97) break;\n    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));\n}\n/**\n * @param {number} type\n * @return {number}\n */ function delimiter(type) {\n    while(next())switch(character){\n        // ] ) \" '\n        case type:\n            return position;\n        // \" '\n        case 34:\n        case 39:\n            if (type !== 34 && type !== 39) delimiter(character);\n            break;\n        // (\n        case 40:\n            if (type === 41) delimiter(type);\n            break;\n        // \\\n        case 92:\n            next();\n            break;\n    }\n    return position;\n}\n/**\n * @param {number} type\n * @param {number} index\n * @return {number}\n */ function commenter(type, index) {\n    while(next())// //\n    if (type + character === 47 + 10) break;\n    else if (type + character === 42 + 42 && peek() === 47) break;\n    return \"/*\" + slice(index, position - 1) + \"*\" + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.from)(type === 47 ? type : next());\n}\n/**\n * @param {number} index\n * @return {string}\n */ function identifier(index) {\n    while(!token(peek()))next();\n    return slice(index, position);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/stylis/src/Tokenizer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/stylis/src/Utility.js":
/*!********************************************!*\
  !*** ./node_modules/stylis/src/Utility.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abs: function() { return /* binding */ abs; },\n/* harmony export */   append: function() { return /* binding */ append; },\n/* harmony export */   assign: function() { return /* binding */ assign; },\n/* harmony export */   charat: function() { return /* binding */ charat; },\n/* harmony export */   combine: function() { return /* binding */ combine; },\n/* harmony export */   from: function() { return /* binding */ from; },\n/* harmony export */   hash: function() { return /* binding */ hash; },\n/* harmony export */   indexof: function() { return /* binding */ indexof; },\n/* harmony export */   match: function() { return /* binding */ match; },\n/* harmony export */   replace: function() { return /* binding */ replace; },\n/* harmony export */   sizeof: function() { return /* binding */ sizeof; },\n/* harmony export */   strlen: function() { return /* binding */ strlen; },\n/* harmony export */   substr: function() { return /* binding */ substr; },\n/* harmony export */   trim: function() { return /* binding */ trim; }\n/* harmony export */ });\n/**\n * @param {number}\n * @return {number}\n */ var abs = Math.abs;\n/**\n * @param {number}\n * @return {string}\n */ var from = String.fromCharCode;\n/**\n * @param {object}\n * @return {object}\n */ var assign = Object.assign;\n/**\n * @param {string} value\n * @param {number} length\n * @return {number}\n */ function hash(value, length) {\n    return charat(value, 0) ^ 45 ? (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;\n}\n/**\n * @param {string} value\n * @return {string}\n */ function trim(value) {\n    return value.trim();\n}\n/**\n * @param {string} value\n * @param {RegExp} pattern\n * @return {string?}\n */ function match(value, pattern) {\n    return (value = pattern.exec(value)) ? value[0] : value;\n}\n/**\n * @param {string} value\n * @param {(string|RegExp)} pattern\n * @param {string} replacement\n * @return {string}\n */ function replace(value, pattern, replacement) {\n    return value.replace(pattern, replacement);\n}\n/**\n * @param {string} value\n * @param {string} search\n * @return {number}\n */ function indexof(value, search) {\n    return value.indexOf(search);\n}\n/**\n * @param {string} value\n * @param {number} index\n * @return {number}\n */ function charat(value, index) {\n    return value.charCodeAt(index) | 0;\n}\n/**\n * @param {string} value\n * @param {number} begin\n * @param {number} end\n * @return {string}\n */ function substr(value, begin, end) {\n    return value.slice(begin, end);\n}\n/**\n * @param {string} value\n * @return {number}\n */ function strlen(value) {\n    return value.length;\n}\n/**\n * @param {any[]} value\n * @return {number}\n */ function sizeof(value) {\n    return value.length;\n}\n/**\n * @param {any} value\n * @param {any[]} array\n * @return {any}\n */ function append(value, array) {\n    return array.push(value), value;\n}\n/**\n * @param {string[]} array\n * @param {function} callback\n * @return {string}\n */ function combine(array, callback) {\n    return array.map(callback).join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1V0aWxpdHkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FDTSxJQUFJQSxNQUFNQyxLQUFLRCxHQUFHO0FBRXpCOzs7Q0FHQyxHQUNNLElBQUlFLE9BQU9DLE9BQU9DLFlBQVk7QUFFckM7OztDQUdDLEdBQ00sSUFBSUMsU0FBU0MsT0FBT0QsTUFBTTtBQUVqQzs7OztDQUlDLEdBQ00sU0FBU0UsS0FBTUMsS0FBSyxFQUFFQyxNQUFNO0lBQ2xDLE9BQU9DLE9BQU9GLE9BQU8sS0FBSyxLQUFLLENBQUUsQ0FBRSxDQUFFLFVBQVcsSUFBS0UsT0FBT0YsT0FBTyxFQUFDLEtBQU0sSUFBS0UsT0FBT0YsT0FBTyxFQUFDLEtBQU0sSUFBS0UsT0FBT0YsT0FBTyxFQUFDLEtBQU0sSUFBS0UsT0FBT0YsT0FBTyxLQUFLO0FBQ3ZKO0FBRUE7OztDQUdDLEdBQ00sU0FBU0csS0FBTUgsS0FBSztJQUMxQixPQUFPQSxNQUFNRyxJQUFJO0FBQ2xCO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVNDLE1BQU9KLEtBQUssRUFBRUssT0FBTztJQUNwQyxPQUFPLENBQUNMLFFBQVFLLFFBQVFDLElBQUksQ0FBQ04sTUFBSyxJQUFLQSxLQUFLLENBQUMsRUFBRSxHQUFHQTtBQUNuRDtBQUVBOzs7OztDQUtDLEdBQ00sU0FBU08sUUFBU1AsS0FBSyxFQUFFSyxPQUFPLEVBQUVHLFdBQVc7SUFDbkQsT0FBT1IsTUFBTU8sT0FBTyxDQUFDRixTQUFTRztBQUMvQjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTQyxRQUFTVCxLQUFLLEVBQUVVLE1BQU07SUFDckMsT0FBT1YsTUFBTVcsT0FBTyxDQUFDRDtBQUN0QjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTUixPQUFRRixLQUFLLEVBQUVZLEtBQUs7SUFDbkMsT0FBT1osTUFBTWEsVUFBVSxDQUFDRCxTQUFTO0FBQ2xDO0FBRUE7Ozs7O0NBS0MsR0FDTSxTQUFTRSxPQUFRZCxLQUFLLEVBQUVlLEtBQUssRUFBRUMsR0FBRztJQUN4QyxPQUFPaEIsTUFBTWlCLEtBQUssQ0FBQ0YsT0FBT0M7QUFDM0I7QUFFQTs7O0NBR0MsR0FDTSxTQUFTRSxPQUFRbEIsS0FBSztJQUM1QixPQUFPQSxNQUFNQyxNQUFNO0FBQ3BCO0FBRUE7OztDQUdDLEdBQ00sU0FBU2tCLE9BQVFuQixLQUFLO0lBQzVCLE9BQU9BLE1BQU1DLE1BQU07QUFDcEI7QUFFQTs7OztDQUlDLEdBQ00sU0FBU21CLE9BQVFwQixLQUFLLEVBQUVxQixLQUFLO0lBQ25DLE9BQU9BLE1BQU1DLElBQUksQ0FBQ3RCLFFBQVFBO0FBQzNCO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVN1QixRQUFTRixLQUFLLEVBQUVHLFFBQVE7SUFDdkMsT0FBT0gsTUFBTUksR0FBRyxDQUFDRCxVQUFVRSxJQUFJLENBQUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcz85YjQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuIGNoYXJhdCh2YWx1ZSwgMCkgXiA0NSA/ICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpIDogMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbSAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLnRyaW0oKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAqIEByZXR1cm4ge3N0cmluZz99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCAodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuICh2YWx1ZSA9IHBhdHRlcm4uZXhlYyh2YWx1ZSkpID8gdmFsdWVbMF0gOiB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZSAodmFsdWUsIHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cdHJldHVybiB2YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiJdLCJuYW1lcyI6WyJhYnMiLCJNYXRoIiwiZnJvbSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFzc2lnbiIsIk9iamVjdCIsImhhc2giLCJ2YWx1ZSIsImxlbmd0aCIsImNoYXJhdCIsInRyaW0iLCJtYXRjaCIsInBhdHRlcm4iLCJleGVjIiwicmVwbGFjZSIsInJlcGxhY2VtZW50IiwiaW5kZXhvZiIsInNlYXJjaCIsImluZGV4T2YiLCJpbmRleCIsImNoYXJDb2RlQXQiLCJzdWJzdHIiLCJiZWdpbiIsImVuZCIsInNsaWNlIiwic3RybGVuIiwic2l6ZW9mIiwiYXBwZW5kIiwiYXJyYXkiLCJwdXNoIiwiY29tYmluZSIsImNhbGxiYWNrIiwibWFwIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/stylis/src/Utility.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=E%3A%5CNext%5Cportfolio%5Capp%5Ccontact%5Cpage.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);