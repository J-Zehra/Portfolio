"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tunnel-agent";
exports.ids = ["vendor-chunks/tunnel-agent"];
exports.modules = {

/***/ "(ssr)/./node_modules/tunnel-agent/index.js":
/*!********************************************!*\
  !*** ./node_modules/tunnel-agent/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar net = __webpack_require__(/*! net */ \"net\"), tls = __webpack_require__(/*! tls */ \"tls\"), http = __webpack_require__(/*! http */ \"http\"), https = __webpack_require__(/*! https */ \"https\"), events = __webpack_require__(/*! events */ \"events\"), assert = __webpack_require__(/*! assert */ \"assert\"), util = __webpack_require__(/*! util */ \"util\"), Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer);\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\nfunction httpOverHttp(options) {\n    var agent = new TunnelingAgent(options);\n    agent.request = http.request;\n    return agent;\n}\nfunction httpsOverHttp(options) {\n    var agent = new TunnelingAgent(options);\n    agent.request = http.request;\n    agent.createSocket = createSecureSocket;\n    agent.defaultPort = 443;\n    return agent;\n}\nfunction httpOverHttps(options) {\n    var agent = new TunnelingAgent(options);\n    agent.request = https.request;\n    return agent;\n}\nfunction httpsOverHttps(options) {\n    var agent = new TunnelingAgent(options);\n    agent.request = https.request;\n    agent.createSocket = createSecureSocket;\n    agent.defaultPort = 443;\n    return agent;\n}\nfunction TunnelingAgent(options) {\n    var self = this;\n    self.options = options || {};\n    self.proxyOptions = self.options.proxy || {};\n    self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n    self.requests = [];\n    self.sockets = [];\n    self.on(\"free\", function onFree(socket, host, port) {\n        for(var i = 0, len = self.requests.length; i < len; ++i){\n            var pending = self.requests[i];\n            if (pending.host === host && pending.port === port) {\n                // Detect the request to connect same origin server,\n                // reuse the connection.\n                self.requests.splice(i, 1);\n                pending.request.onSocket(socket);\n                return;\n            }\n        }\n        socket.destroy();\n        self.removeSocket(socket);\n    });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\nTunnelingAgent.prototype.addRequest = function addRequest(req, options) {\n    var self = this;\n    // Legacy API: addRequest(req, host, port, path)\n    if (typeof options === \"string\") {\n        options = {\n            host: options,\n            port: arguments[2],\n            path: arguments[3]\n        };\n    }\n    if (self.sockets.length >= this.maxSockets) {\n        // We are over limit so we'll add it to the queue.\n        self.requests.push({\n            host: options.host,\n            port: options.port,\n            request: req\n        });\n        return;\n    }\n    // If we are under maxSockets create a new one.\n    self.createConnection({\n        host: options.host,\n        port: options.port,\n        request: req\n    });\n};\nTunnelingAgent.prototype.createConnection = function createConnection(pending) {\n    var self = this;\n    self.createSocket(pending, function(socket) {\n        socket.on(\"free\", onFree);\n        socket.on(\"close\", onCloseOrRemove);\n        socket.on(\"agentRemove\", onCloseOrRemove);\n        pending.request.onSocket(socket);\n        function onFree() {\n            self.emit(\"free\", socket, pending.host, pending.port);\n        }\n        function onCloseOrRemove(err) {\n            self.removeSocket(socket);\n            socket.removeListener(\"free\", onFree);\n            socket.removeListener(\"close\", onCloseOrRemove);\n            socket.removeListener(\"agentRemove\", onCloseOrRemove);\n        }\n    });\n};\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n    var self = this;\n    var placeholder = {};\n    self.sockets.push(placeholder);\n    var connectOptions = mergeOptions({}, self.proxyOptions, {\n        method: \"CONNECT\",\n        path: options.host + \":\" + options.port,\n        agent: false\n    });\n    if (connectOptions.proxyAuth) {\n        connectOptions.headers = connectOptions.headers || {};\n        connectOptions.headers[\"Proxy-Authorization\"] = \"Basic \" + Buffer.from(connectOptions.proxyAuth).toString(\"base64\");\n    }\n    debug(\"making CONNECT request\");\n    var connectReq = self.request(connectOptions);\n    connectReq.useChunkedEncodingByDefault = false // for v0.6\n    ;\n    connectReq.once(\"response\", onResponse) // for v0.6\n    ;\n    connectReq.once(\"upgrade\", onUpgrade) // for v0.6\n    ;\n    connectReq.once(\"connect\", onConnect) // for v0.7 or later\n    ;\n    connectReq.once(\"error\", onError);\n    connectReq.end();\n    function onResponse(res) {\n        // Very hacky. This is necessary to avoid http-parser leaks.\n        res.upgrade = true;\n    }\n    function onUpgrade(res, socket, head) {\n        // Hacky.\n        process.nextTick(function() {\n            onConnect(res, socket, head);\n        });\n    }\n    function onConnect(res, socket, head) {\n        connectReq.removeAllListeners();\n        socket.removeAllListeners();\n        if (res.statusCode === 200) {\n            assert.equal(head.length, 0);\n            debug(\"tunneling connection has established\");\n            self.sockets[self.sockets.indexOf(placeholder)] = socket;\n            cb(socket);\n        } else {\n            debug(\"tunneling socket could not be established, statusCode=%d\", res.statusCode);\n            var error = new Error(\"tunneling socket could not be established, \" + \"statusCode=\" + res.statusCode);\n            error.code = \"ECONNRESET\";\n            options.request.emit(\"error\", error);\n            self.removeSocket(placeholder);\n        }\n    }\n    function onError(cause) {\n        connectReq.removeAllListeners();\n        debug(\"tunneling socket could not be established, cause=%s\\n\", cause.message, cause.stack);\n        var error = new Error(\"tunneling socket could not be established, \" + \"cause=\" + cause.message);\n        error.code = \"ECONNRESET\";\n        options.request.emit(\"error\", error);\n        self.removeSocket(placeholder);\n    }\n};\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n    var pos = this.sockets.indexOf(socket);\n    if (pos === -1) return;\n    this.sockets.splice(pos, 1);\n    var pending = this.requests.shift();\n    if (pending) {\n        // If we have pending requests and a socket gets closed a new one\n        // needs to be created to take over in the pool for the one that closed.\n        this.createConnection(pending);\n    }\n};\nfunction createSecureSocket(options, cb) {\n    var self = this;\n    TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n        // 0 is dummy port for v0.6\n        var secureSocket = tls.connect(0, mergeOptions({}, self.options, {\n            servername: options.host,\n            socket: socket\n        }));\n        self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n        cb(secureSocket);\n    });\n}\nfunction mergeOptions(target) {\n    for(var i = 1, len = arguments.length; i < len; ++i){\n        var overrides = arguments[i];\n        if (typeof overrides === \"object\") {\n            var keys = Object.keys(overrides);\n            for(var j = 0, keyLen = keys.length; j < keyLen; ++j){\n                var k = keys[j];\n                if (overrides[k] !== undefined) {\n                    target[k] = overrides[k];\n                }\n            }\n        }\n    }\n    return target;\n}\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n    debug = function() {\n        var args = Array.prototype.slice.call(arguments);\n        if (typeof args[0] === \"string\") {\n            args[0] = \"TUNNEL: \" + args[0];\n        } else {\n            args.unshift(\"TUNNEL:\");\n        }\n        console.error.apply(console, args);\n    };\n} else {\n    debug = function() {};\n}\nexports.debug = debug // for test\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tunnel-agent/index.js\n");

/***/ })

};
;