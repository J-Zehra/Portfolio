"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eventsource";
exports.ids = ["vendor-chunks/eventsource"];
exports.modules = {

/***/ "(ssr)/./node_modules/eventsource/lib/eventsource.js":
/*!*****************************************************!*\
  !*** ./node_modules/eventsource/lib/eventsource.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar parse = (__webpack_require__(/*! url */ \"url\").parse);\nvar events = __webpack_require__(/*! events */ \"events\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar httpsOptions = [\n    \"pfx\",\n    \"key\",\n    \"passphrase\",\n    \"cert\",\n    \"ca\",\n    \"ciphers\",\n    \"rejectUnauthorized\",\n    \"secureProtocol\",\n    \"servername\",\n    \"checkServerIdentity\"\n];\nvar bom = [\n    239,\n    187,\n    191\n];\nvar colon = 58;\nvar space = 32;\nvar lineFeed = 10;\nvar carriageReturn = 13;\n// Beyond 256KB we could not observe any gain in performance\nvar maxBufferAheadAllocation = 1024 * 256;\n// Headers matching the pattern should be removed when redirecting to different origin\nvar reUnsafeHeader = /^(cookie|authorization)$/i;\nfunction hasBom(buf) {\n    return bom.every(function(charCode, index) {\n        return buf[index] === charCode;\n    });\n}\n/**\n * Creates a new EventSource object\n *\n * @param {String} url the URL to which to connect\n * @param {Object} [eventSourceInitDict] extra init params. See README for details.\n * @api public\n **/ function EventSource(url, eventSourceInitDict) {\n    var readyState = EventSource.CONNECTING;\n    var headers = eventSourceInitDict && eventSourceInitDict.headers;\n    var hasNewOrigin = false;\n    Object.defineProperty(this, \"readyState\", {\n        get: function() {\n            return readyState;\n        }\n    });\n    Object.defineProperty(this, \"url\", {\n        get: function() {\n            return url;\n        }\n    });\n    var self = this;\n    self.reconnectInterval = 1000;\n    self.connectionInProgress = false;\n    function onConnectionClosed(message) {\n        if (readyState === EventSource.CLOSED) return;\n        readyState = EventSource.CONNECTING;\n        _emit(\"error\", new Event(\"error\", {\n            message: message\n        }));\n        // The url may have been changed by a temporary redirect. If that's the case,\n        // revert it now, and flag that we are no longer pointing to a new origin\n        if (reconnectUrl) {\n            url = reconnectUrl;\n            reconnectUrl = null;\n            hasNewOrigin = false;\n        }\n        setTimeout(function() {\n            if (readyState !== EventSource.CONNECTING || self.connectionInProgress) {\n                return;\n            }\n            self.connectionInProgress = true;\n            connect();\n        }, self.reconnectInterval);\n    }\n    var req;\n    var lastEventId = \"\";\n    if (headers && headers[\"Last-Event-ID\"]) {\n        lastEventId = headers[\"Last-Event-ID\"];\n        delete headers[\"Last-Event-ID\"];\n    }\n    var discardTrailingNewline = false;\n    var data = \"\";\n    var eventName = \"\";\n    var reconnectUrl = null;\n    function connect() {\n        var options = parse(url);\n        var isSecure = options.protocol === \"https:\";\n        options.headers = {\n            \"Cache-Control\": \"no-cache\",\n            \"Accept\": \"text/event-stream\"\n        };\n        if (lastEventId) options.headers[\"Last-Event-ID\"] = lastEventId;\n        if (headers) {\n            var reqHeaders = hasNewOrigin ? removeUnsafeHeaders(headers) : headers;\n            for(var i in reqHeaders){\n                var header = reqHeaders[i];\n                if (header) {\n                    options.headers[i] = header;\n                }\n            }\n        }\n        // Legacy: this should be specified as `eventSourceInitDict.https.rejectUnauthorized`,\n        // but for now exists as a backwards-compatibility layer\n        options.rejectUnauthorized = !(eventSourceInitDict && !eventSourceInitDict.rejectUnauthorized);\n        if (eventSourceInitDict && eventSourceInitDict.createConnection !== undefined) {\n            options.createConnection = eventSourceInitDict.createConnection;\n        }\n        // If specify http proxy, make the request to sent to the proxy server,\n        // and include the original url in path and Host headers\n        var useProxy = eventSourceInitDict && eventSourceInitDict.proxy;\n        if (useProxy) {\n            var proxy = parse(eventSourceInitDict.proxy);\n            isSecure = proxy.protocol === \"https:\";\n            options.protocol = isSecure ? \"https:\" : \"http:\";\n            options.path = url;\n            options.headers.Host = options.host;\n            options.hostname = proxy.hostname;\n            options.host = proxy.host;\n            options.port = proxy.port;\n        }\n        // If https options are specified, merge them into the request options\n        if (eventSourceInitDict && eventSourceInitDict.https) {\n            for(var optName in eventSourceInitDict.https){\n                if (httpsOptions.indexOf(optName) === -1) {\n                    continue;\n                }\n                var option = eventSourceInitDict.https[optName];\n                if (option !== undefined) {\n                    options[optName] = option;\n                }\n            }\n        }\n        // Pass this on to the XHR\n        if (eventSourceInitDict && eventSourceInitDict.withCredentials !== undefined) {\n            options.withCredentials = eventSourceInitDict.withCredentials;\n        }\n        req = (isSecure ? https : http).request(options, function(res) {\n            self.connectionInProgress = false;\n            // Handle HTTP errors\n            if (res.statusCode === 500 || res.statusCode === 502 || res.statusCode === 503 || res.statusCode === 504) {\n                _emit(\"error\", new Event(\"error\", {\n                    status: res.statusCode,\n                    message: res.statusMessage\n                }));\n                onConnectionClosed();\n                return;\n            }\n            // Handle HTTP redirects\n            if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                var location = res.headers.location;\n                if (!location) {\n                    // Server sent redirect response without Location header.\n                    _emit(\"error\", new Event(\"error\", {\n                        status: res.statusCode,\n                        message: res.statusMessage\n                    }));\n                    return;\n                }\n                var prevOrigin = new URL(url).origin;\n                var nextOrigin = new URL(location).origin;\n                hasNewOrigin = prevOrigin !== nextOrigin;\n                if (res.statusCode === 307) reconnectUrl = url;\n                url = location;\n                process.nextTick(connect);\n                return;\n            }\n            if (res.statusCode !== 200) {\n                _emit(\"error\", new Event(\"error\", {\n                    status: res.statusCode,\n                    message: res.statusMessage\n                }));\n                return self.close();\n            }\n            readyState = EventSource.OPEN;\n            res.on(\"close\", function() {\n                res.removeAllListeners(\"close\");\n                res.removeAllListeners(\"end\");\n                onConnectionClosed();\n            });\n            res.on(\"end\", function() {\n                res.removeAllListeners(\"close\");\n                res.removeAllListeners(\"end\");\n                onConnectionClosed();\n            });\n            _emit(\"open\", new Event(\"open\"));\n            // text/event-stream parser adapted from webkit's\n            // Source/WebCore/page/EventSource.cpp\n            var buf;\n            var newBuffer;\n            var startingPos = 0;\n            var startingFieldLength = -1;\n            var newBufferSize = 0;\n            var bytesUsed = 0;\n            res.on(\"data\", function(chunk) {\n                if (!buf) {\n                    buf = chunk;\n                    if (hasBom(buf)) {\n                        buf = buf.slice(bom.length);\n                    }\n                    bytesUsed = buf.length;\n                } else {\n                    if (chunk.length > buf.length - bytesUsed) {\n                        newBufferSize = buf.length * 2 + chunk.length;\n                        if (newBufferSize > maxBufferAheadAllocation) {\n                            newBufferSize = buf.length + chunk.length + maxBufferAheadAllocation;\n                        }\n                        newBuffer = Buffer.alloc(newBufferSize);\n                        buf.copy(newBuffer, 0, 0, bytesUsed);\n                        buf = newBuffer;\n                    }\n                    chunk.copy(buf, bytesUsed);\n                    bytesUsed += chunk.length;\n                }\n                var pos = 0;\n                var length = bytesUsed;\n                while(pos < length){\n                    if (discardTrailingNewline) {\n                        if (buf[pos] === lineFeed) {\n                            ++pos;\n                        }\n                        discardTrailingNewline = false;\n                    }\n                    var lineLength = -1;\n                    var fieldLength = startingFieldLength;\n                    var c;\n                    for(var i = startingPos; lineLength < 0 && i < length; ++i){\n                        c = buf[i];\n                        if (c === colon) {\n                            if (fieldLength < 0) {\n                                fieldLength = i - pos;\n                            }\n                        } else if (c === carriageReturn) {\n                            discardTrailingNewline = true;\n                            lineLength = i - pos;\n                        } else if (c === lineFeed) {\n                            lineLength = i - pos;\n                        }\n                    }\n                    if (lineLength < 0) {\n                        startingPos = length - pos;\n                        startingFieldLength = fieldLength;\n                        break;\n                    } else {\n                        startingPos = 0;\n                        startingFieldLength = -1;\n                    }\n                    parseEventStreamLine(buf, pos, fieldLength, lineLength);\n                    pos += lineLength + 1;\n                }\n                if (pos === length) {\n                    buf = void 0;\n                    bytesUsed = 0;\n                } else if (pos > 0) {\n                    buf = buf.slice(pos, bytesUsed);\n                    bytesUsed = buf.length;\n                }\n            });\n        });\n        req.on(\"error\", function(err) {\n            self.connectionInProgress = false;\n            onConnectionClosed(err.message);\n        });\n        if (req.setNoDelay) req.setNoDelay(true);\n        req.end();\n    }\n    connect();\n    function _emit() {\n        if (self.listeners(arguments[0]).length > 0) {\n            self.emit.apply(self, arguments);\n        }\n    }\n    this._close = function() {\n        if (readyState === EventSource.CLOSED) return;\n        readyState = EventSource.CLOSED;\n        if (req.abort) req.abort();\n        if (req.xhr && req.xhr.abort) req.xhr.abort();\n    };\n    function parseEventStreamLine(buf, pos, fieldLength, lineLength) {\n        if (lineLength === 0) {\n            if (data.length > 0) {\n                var type = eventName || \"message\";\n                _emit(type, new MessageEvent(type, {\n                    data: data.slice(0, -1),\n                    lastEventId: lastEventId,\n                    origin: new URL(url).origin\n                }));\n                data = \"\";\n            }\n            eventName = void 0;\n        } else if (fieldLength > 0) {\n            var noValue = fieldLength < 0;\n            var step = 0;\n            var field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength)).toString();\n            if (noValue) {\n                step = lineLength;\n            } else if (buf[pos + fieldLength + 1] !== space) {\n                step = fieldLength + 1;\n            } else {\n                step = fieldLength + 2;\n            }\n            pos += step;\n            var valueLength = lineLength - step;\n            var value = buf.slice(pos, pos + valueLength).toString();\n            if (field === \"data\") {\n                data += value + \"\\n\";\n            } else if (field === \"event\") {\n                eventName = value;\n            } else if (field === \"id\") {\n                lastEventId = value;\n            } else if (field === \"retry\") {\n                var retry = parseInt(value, 10);\n                if (!Number.isNaN(retry)) {\n                    self.reconnectInterval = retry;\n                }\n            }\n        }\n    }\n}\nmodule.exports = EventSource;\nutil.inherits(EventSource, events.EventEmitter);\nEventSource.prototype.constructor = EventSource; // make stacktraces readable\n[\n    \"open\",\n    \"error\",\n    \"message\"\n].forEach(function(method) {\n    Object.defineProperty(EventSource.prototype, \"on\" + method, {\n        /**\n     * Returns the current listener\n     *\n     * @return {Mixed} the set function or undefined\n     * @api private\n     */ get: function get() {\n            var listener = this.listeners(method)[0];\n            return listener ? listener._listener ? listener._listener : listener : undefined;\n        },\n        /**\n     * Start listening for events\n     *\n     * @param {Function} listener the listener\n     * @return {Mixed} the set function or undefined\n     * @api private\n     */ set: function set(listener) {\n            this.removeAllListeners(method);\n            this.addEventListener(method, listener);\n        }\n    });\n});\n/**\n * Ready states\n */ Object.defineProperty(EventSource, \"CONNECTING\", {\n    enumerable: true,\n    value: 0\n});\nObject.defineProperty(EventSource, \"OPEN\", {\n    enumerable: true,\n    value: 1\n});\nObject.defineProperty(EventSource, \"CLOSED\", {\n    enumerable: true,\n    value: 2\n});\nEventSource.prototype.CONNECTING = 0;\nEventSource.prototype.OPEN = 1;\nEventSource.prototype.CLOSED = 2;\n/**\n * Closes the connection, if one is made, and sets the readyState attribute to 2 (closed)\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close\n * @api public\n */ EventSource.prototype.close = function() {\n    this._close();\n};\n/**\n * Emulates the W3C Browser based WebSocket interface using addEventListener.\n *\n * @param {String} type A string representing the event type to listen out for\n * @param {Function} listener callback\n * @see https://developer.mozilla.org/en/DOM/element.addEventListener\n * @see http://dev.w3.org/html5/websockets/#the-websocket-interface\n * @api public\n */ EventSource.prototype.addEventListener = function addEventListener(type, listener) {\n    if (typeof listener === \"function\") {\n        // store a reference so we can return the original function again\n        listener._listener = listener;\n        this.on(type, listener);\n    }\n};\n/**\n * Emulates the W3C Browser based WebSocket interface using dispatchEvent.\n *\n * @param {Event} event An event to be dispatched\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent\n * @api public\n */ EventSource.prototype.dispatchEvent = function dispatchEvent(event) {\n    if (!event.type) {\n        throw new Error(\"UNSPECIFIED_EVENT_TYPE_ERR\");\n    }\n    // if event is instance of an CustomEvent (or has 'details' property),\n    // send the detail object as the payload for the event\n    this.emit(event.type, event.detail);\n};\n/**\n * Emulates the W3C Browser based WebSocket interface using removeEventListener.\n *\n * @param {String} type A string representing the event type to remove\n * @param {Function} listener callback\n * @see https://developer.mozilla.org/en/DOM/element.removeEventListener\n * @see http://dev.w3.org/html5/websockets/#the-websocket-interface\n * @api public\n */ EventSource.prototype.removeEventListener = function removeEventListener(type, listener) {\n    if (typeof listener === \"function\") {\n        listener._listener = undefined;\n        this.removeListener(type, listener);\n    }\n};\n/**\n * W3C Event\n *\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#interface-Event\n * @api private\n */ function Event(type, optionalProperties) {\n    Object.defineProperty(this, \"type\", {\n        writable: false,\n        value: type,\n        enumerable: true\n    });\n    if (optionalProperties) {\n        for(var f in optionalProperties){\n            if (optionalProperties.hasOwnProperty(f)) {\n                Object.defineProperty(this, f, {\n                    writable: false,\n                    value: optionalProperties[f],\n                    enumerable: true\n                });\n            }\n        }\n    }\n}\n/**\n * W3C MessageEvent\n *\n * @see http://www.w3.org/TR/webmessaging/#event-definitions\n * @api private\n */ function MessageEvent(type, eventInitDict) {\n    Object.defineProperty(this, \"type\", {\n        writable: false,\n        value: type,\n        enumerable: true\n    });\n    for(var f in eventInitDict){\n        if (eventInitDict.hasOwnProperty(f)) {\n            Object.defineProperty(this, f, {\n                writable: false,\n                value: eventInitDict[f],\n                enumerable: true\n            });\n        }\n    }\n}\n/**\n * Returns a new object of headers that does not include any authorization and cookie headers\n *\n * @param {Object} headers An object of headers ({[headerName]: headerValue})\n * @return {Object} a new object of headers\n * @api private\n */ function removeUnsafeHeaders(headers) {\n    var safe = {};\n    for(var key in headers){\n        if (reUnsafeHeader.test(key)) {\n            continue;\n        }\n        safe[key] = headers[key];\n    }\n    return safe;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eventsource/lib/eventsource.js\n");

/***/ })

};
;